
16_PWM2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002548  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f8  080026f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002700  08002700  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002700  08002700  00012700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002704  08002704  00012704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002714  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002714  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c402  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001804  00000000  00000000  0002c43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002dc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002e7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001558f  00000000  00000000  0002f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6ff  00000000  00000000  0004480f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089d85  00000000  00000000  00050f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dac93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000302c  00000000  00000000  000dace8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080026c8 	.word	0x080026c8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080026c8 	.word	0x080026c8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 faea 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f816 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f920 	bl	8000720 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8f4 	bl	80006cc <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004e4:	f000 f87a 	bl	80005dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80004e8:	2100      	movs	r1, #0
 80004ea:	4806      	ldr	r0, [pc, #24]	; (8000504 <main+0x34>)
 80004ec:	f001 fa98 	bl	8001a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004f0:	2104      	movs	r1, #4
 80004f2:	4804      	ldr	r0, [pc, #16]	; (8000504 <main+0x34>)
 80004f4:	f001 fa94 	bl	8001a20 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80004f8:	2108      	movs	r1, #8
 80004fa:	4802      	ldr	r0, [pc, #8]	; (8000504 <main+0x34>)
 80004fc:	f001 fa90 	bl	8001a20 <HAL_TIM_PWM_Start>
  //CCR1 Related to channel 1 and so (as set in TIM3 settings in CubeMX)
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	e7fe      	b.n	8000500 <main+0x30>
 8000502:	bf00      	nop
 8000504:	20000028 	.word	0x20000028

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	; 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f002 f8ce 	bl	80026b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	; (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	; (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	; 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	; (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	; (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	; (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056c:	2310      	movs	r3, #16
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000574:	2300      	movs	r3, #0
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000578:	2310      	movs	r3, #16
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 320;
 800057c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000582:	2304      	movs	r3, #4
 8000584:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000586:	2304      	movs	r3, #4
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fd82 	bl	8001098 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 f92f 	bl	80007fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2102      	movs	r1, #2
 80005ba:	4618      	mov	r0, r3
 80005bc:	f000 ffe4 	bl	8001588 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005c6:	f000 f919 	bl	80007fc <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]
 80005fa:	615a      	str	r2, [r3, #20]
 80005fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005fe:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <MX_TIM3_Init+0xe8>)
 8000600:	4a31      	ldr	r2, [pc, #196]	; (80006c8 <MX_TIM3_Init+0xec>)
 8000602:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 655;
 8000604:	4b2f      	ldr	r3, [pc, #188]	; (80006c4 <MX_TIM3_Init+0xe8>)
 8000606:	f240 228f 	movw	r2, #655	; 0x28f
 800060a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060c:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <MX_TIM3_Init+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1962;
 8000612:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <MX_TIM3_Init+0xe8>)
 8000614:	f240 72aa 	movw	r2, #1962	; 0x7aa
 8000618:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061a:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <MX_TIM3_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <MX_TIM3_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000626:	4827      	ldr	r0, [pc, #156]	; (80006c4 <MX_TIM3_Init+0xe8>)
 8000628:	f001 f9aa 	bl	8001980 <HAL_TIM_PWM_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000632:	f000 f8e3 	bl	80007fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	4619      	mov	r1, r3
 8000644:	481f      	ldr	r0, [pc, #124]	; (80006c4 <MX_TIM3_Init+0xe8>)
 8000646:	f001 fd8f 	bl	8002168 <HAL_TIMEx_MasterConfigSynchronization>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000650:	f000 f8d4 	bl	80007fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000654:	2360      	movs	r3, #96	; 0x60
 8000656:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 654;
 8000658:	f240 238e 	movw	r3, #654	; 0x28e
 800065c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	4619      	mov	r1, r3
 800066c:	4815      	ldr	r0, [pc, #84]	; (80006c4 <MX_TIM3_Init+0xe8>)
 800066e:	f001 fa87 	bl	8001b80 <HAL_TIM_PWM_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000678:	f000 f8c0 	bl	80007fc <Error_Handler>
  }
  sConfigOC.Pulse = 654;
 800067c:	f240 238e 	movw	r3, #654	; 0x28e
 8000680:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2204      	movs	r2, #4
 8000686:	4619      	mov	r1, r3
 8000688:	480e      	ldr	r0, [pc, #56]	; (80006c4 <MX_TIM3_Init+0xe8>)
 800068a:	f001 fa79 	bl	8001b80 <HAL_TIM_PWM_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 8000694:	f000 f8b2 	bl	80007fc <Error_Handler>
  }
  sConfigOC.Pulse = 654;
 8000698:	f240 238e 	movw	r3, #654	; 0x28e
 800069c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800069e:	1d3b      	adds	r3, r7, #4
 80006a0:	2208      	movs	r2, #8
 80006a2:	4619      	mov	r1, r3
 80006a4:	4807      	ldr	r0, [pc, #28]	; (80006c4 <MX_TIM3_Init+0xe8>)
 80006a6:	f001 fa6b 	bl	8001b80 <HAL_TIM_PWM_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80006b0:	f000 f8a4 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006b4:	4803      	ldr	r0, [pc, #12]	; (80006c4 <MX_TIM3_Init+0xe8>)
 80006b6:	f000 f8f1 	bl	800089c <HAL_TIM_MspPostInit>

}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	; 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000028 	.word	0x20000028
 80006c8:	40000400 	.word	0x40000400

080006cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <MX_USART2_UART_Init+0x50>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b09      	ldr	r3, [pc, #36]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b06      	ldr	r3, [pc, #24]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_USART2_UART_Init+0x4c>)
 8000704:	f001 fd9e 	bl	8002244 <HAL_UART_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800070e:	f000 f875 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000070 	.word	0x20000070
 800071c:	40004400 	.word	0x40004400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <MX_GPIO_Init+0xd0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a2c      	ldr	r2, [pc, #176]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b26      	ldr	r3, [pc, #152]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a25      	ldr	r2, [pc, #148]	; (80007f0 <MX_GPIO_Init+0xd0>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b23      	ldr	r3, [pc, #140]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a1e      	ldr	r2, [pc, #120]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	4812      	ldr	r0, [pc, #72]	; (80007f4 <MX_GPIO_Init+0xd4>)
 80007ac:	f000 fc5a 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	480c      	ldr	r0, [pc, #48]	; (80007f8 <MX_GPIO_Init+0xd8>)
 80007c8:	f000 fac8 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007cc:	2320      	movs	r3, #32
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_GPIO_Init+0xd4>)
 80007e4:	f000 faba 	bl	8000d5c <HAL_GPIO_Init>

}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020800 	.word	0x40020800

080007fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000800:	b672      	cpsid	i
}
 8000802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000804:	e7fe      	b.n	8000804 <Error_Handler+0x8>
	...

08000808 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_MspInit+0x4c>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	4a0f      	ldr	r2, [pc, #60]	; (8000854 <HAL_MspInit+0x4c>)
 8000818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081c:	6453      	str	r3, [r2, #68]	; 0x44
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <HAL_MspInit+0x4c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a08      	ldr	r2, [pc, #32]	; (8000854 <HAL_MspInit+0x4c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000846:	2007      	movs	r0, #7
 8000848:	f000 fa54 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800

08000858 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <HAL_TIM_PWM_MspInit+0x3c>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d10d      	bne.n	8000886 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_TIM_PWM_MspInit+0x40>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	4a09      	ldr	r2, [pc, #36]	; (8000898 <HAL_TIM_PWM_MspInit+0x40>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6413      	str	r3, [r2, #64]	; 0x40
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <HAL_TIM_PWM_MspInit+0x40>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40000400 	.word	0x40000400
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a21      	ldr	r2, [pc, #132]	; (8000940 <HAL_TIM_MspPostInit+0xa4>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d13b      	bne.n	8000936 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <HAL_TIM_MspPostInit+0xa8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <HAL_TIM_MspPostInit+0xa8>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <HAL_TIM_MspPostInit+0xa8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_TIM_MspPostInit+0xa8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <HAL_TIM_MspPostInit+0xa8>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_TIM_MspPostInit+0xa8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008f6:	23c0      	movs	r3, #192	; 0xc0
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000906:	2302      	movs	r3, #2
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <HAL_TIM_MspPostInit+0xac>)
 8000912:	f000 fa23 	bl	8000d5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000916:	2301      	movs	r3, #1
 8000918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000926:	2302      	movs	r3, #2
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4806      	ldr	r0, [pc, #24]	; (800094c <HAL_TIM_MspPostInit+0xb0>)
 8000932:	f000 fa13 	bl	8000d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40000400 	.word	0x40000400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000
 800094c:	40020400 	.word	0x40020400

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <HAL_UART_MspInit+0x84>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d12b      	bne.n	80009ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <HAL_UART_MspInit+0x88>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_UART_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009aa:	230c      	movs	r3, #12
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <HAL_UART_MspInit+0x8c>)
 80009c6:	f000 f9c9 	bl	8000d5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f890 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <SystemInit+0x20>)
 8000a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3e:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <SystemInit+0x20>)
 8000a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a5e:	490e      	ldr	r1, [pc, #56]	; (8000a98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a64:	e002      	b.n	8000a6c <LoopCopyDataInit>

08000a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a6a:	3304      	adds	r3, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a70:	d3f9      	bcc.n	8000a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a74:	4c0b      	ldr	r4, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a78:	e001      	b.n	8000a7e <LoopFillZerobss>

08000a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7c:	3204      	adds	r2, #4

08000a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a80:	d3fb      	bcc.n	8000a7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a82:	f7ff ffd7 	bl	8000a34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a86:	f001 fdf3 	bl	8002670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a8a:	f7ff fd21 	bl	80004d0 <main>
  bx  lr    
 8000a8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a9c:	08002708 	.word	0x08002708
  ldr r2, =_sbss
 8000aa0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aa4:	200000b8 	.word	0x200000b8

08000aa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <HAL_Init+0x40>)
 8000ab6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <HAL_Init+0x40>)
 8000ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac8:	4b08      	ldr	r3, [pc, #32]	; (8000aec <HAL_Init+0x40>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_Init+0x40>)
 8000ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	f000 f90d 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f000 f808 	bl	8000af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae0:	f7ff fe92 	bl	8000808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023c00 	.word	0x40023c00

08000af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_InitTick+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_InitTick+0x58>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f917 	bl	8000d42 <HAL_SYSTICK_Config>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00e      	b.n	8000b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b0f      	cmp	r3, #15
 8000b22:	d80a      	bhi.n	8000b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f000 f8ed 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b30:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_InitTick+0x5c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e000      	b.n	8000b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_IncTick+0x20>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_IncTick+0x24>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4413      	add	r3, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_IncTick+0x24>)
 8000b62:	6013      	str	r3, [r2, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	200000b4 	.word	0x200000b4

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_GetTick+0x14>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	200000b4 	.word	0x200000b4

08000b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	0a1b      	lsrs	r3, r3, #8
 8000be2:	f003 0307 	and.w	r3, r3, #7
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db0a      	blt.n	8000c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	490c      	ldr	r1, [pc, #48]	; (8000c40 <__NVIC_SetPriority+0x4c>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	0112      	lsls	r2, r2, #4
 8000c14:	b2d2      	uxtb	r2, r2
 8000c16:	440b      	add	r3, r1
 8000c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c1c:	e00a      	b.n	8000c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4908      	ldr	r1, [pc, #32]	; (8000c44 <__NVIC_SetPriority+0x50>)
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	0112      	lsls	r2, r2, #4
 8000c2e:	b2d2      	uxtb	r2, r2
 8000c30:	440b      	add	r3, r1
 8000c32:	761a      	strb	r2, [r3, #24]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	f1c3 0307 	rsb	r3, r3, #7
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	bf28      	it	cs
 8000c66:	2304      	movcs	r3, #4
 8000c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	2b06      	cmp	r3, #6
 8000c70:	d902      	bls.n	8000c78 <NVIC_EncodePriority+0x30>
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3b03      	subs	r3, #3
 8000c76:	e000      	b.n	8000c7a <NVIC_EncodePriority+0x32>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c80:	69bb      	ldr	r3, [r7, #24]
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43da      	mvns	r2, r3
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	43d9      	mvns	r1, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	4313      	orrs	r3, r2
         );
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3724      	adds	r7, #36	; 0x24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f7ff ff8e 	bl	8000bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff47 	bl	8000b90 <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff5c 	bl	8000bd8 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff8e 	bl	8000c48 <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffb0 	bl	8000cb0 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	e159      	b.n	800102c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d78:	2201      	movs	r2, #1
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f040 8148 	bne.w	8001026 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d005      	beq.n	8000dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d130      	bne.n	8000e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	2203      	movs	r2, #3
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68da      	ldr	r2, [r3, #12]
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000de4:	2201      	movs	r2, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	091b      	lsrs	r3, r3, #4
 8000dfa:	f003 0201 	and.w	r2, r3, #1
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d017      	beq.n	8000e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d123      	bne.n	8000ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	69b9      	ldr	r1, [r7, #24]
 8000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0203 	and.w	r2, r3, #3
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80a2 	beq.w	8001026 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b57      	ldr	r3, [pc, #348]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a56      	ldr	r2, [pc, #344]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b54      	ldr	r3, [pc, #336]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efe:	4a52      	ldr	r2, [pc, #328]	; (8001048 <HAL_GPIO_Init+0x2ec>)
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	089b      	lsrs	r3, r3, #2
 8000f04:	3302      	adds	r3, #2
 8000f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	220f      	movs	r2, #15
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a49      	ldr	r2, [pc, #292]	; (800104c <HAL_GPIO_Init+0x2f0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d019      	beq.n	8000f5e <HAL_GPIO_Init+0x202>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a48      	ldr	r2, [pc, #288]	; (8001050 <HAL_GPIO_Init+0x2f4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d013      	beq.n	8000f5a <HAL_GPIO_Init+0x1fe>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a47      	ldr	r2, [pc, #284]	; (8001054 <HAL_GPIO_Init+0x2f8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d00d      	beq.n	8000f56 <HAL_GPIO_Init+0x1fa>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a46      	ldr	r2, [pc, #280]	; (8001058 <HAL_GPIO_Init+0x2fc>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x1f6>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a45      	ldr	r2, [pc, #276]	; (800105c <HAL_GPIO_Init+0x300>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d101      	bne.n	8000f4e <HAL_GPIO_Init+0x1f2>
 8000f4a:	2304      	movs	r3, #4
 8000f4c:	e008      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f4e:	2307      	movs	r3, #7
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f52:	2303      	movs	r3, #3
 8000f54:	e004      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f56:	2302      	movs	r3, #2
 8000f58:	e002      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <HAL_GPIO_Init+0x204>
 8000f5e:	2300      	movs	r3, #0
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	f002 0203 	and.w	r2, r2, #3
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	4093      	lsls	r3, r2
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f70:	4935      	ldr	r1, [pc, #212]	; (8001048 <HAL_GPIO_Init+0x2ec>)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	089b      	lsrs	r3, r3, #2
 8000f76:	3302      	adds	r3, #2
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f7e:	4b38      	ldr	r3, [pc, #224]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fcc:	4a24      	ldr	r2, [pc, #144]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b23      	ldr	r3, [pc, #140]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_GPIO_Init+0x304>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_GPIO_Init+0x304>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3301      	adds	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	f67f aea2 	bls.w	8000d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40013800 	.word	0x40013800
 800104c:	40020000 	.word	0x40020000
 8001050:	40020400 	.word	0x40020400
 8001054:	40020800 	.word	0x40020800
 8001058:	40020c00 	.word	0x40020c00
 800105c:	40021000 	.word	0x40021000
 8001060:	40013c00 	.word	0x40013c00

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001080:	e003      	b.n	800108a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001082:	887b      	ldrh	r3, [r7, #2]
 8001084:	041a      	lsls	r2, r3, #16
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e264      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d075      	beq.n	80011a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010b6:	4ba3      	ldr	r3, [pc, #652]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d00c      	beq.n	80010dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c2:	4ba0      	ldr	r3, [pc, #640]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010ca:	2b08      	cmp	r3, #8
 80010cc:	d112      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ce:	4b9d      	ldr	r3, [pc, #628]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010da:	d10b      	bne.n	80010f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010dc:	4b99      	ldr	r3, [pc, #612]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d05b      	beq.n	80011a0 <HAL_RCC_OscConfig+0x108>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d157      	bne.n	80011a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e23f      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fc:	d106      	bne.n	800110c <HAL_RCC_OscConfig+0x74>
 80010fe:	4b91      	ldr	r3, [pc, #580]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a90      	ldr	r2, [pc, #576]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e01d      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001114:	d10c      	bne.n	8001130 <HAL_RCC_OscConfig+0x98>
 8001116:	4b8b      	ldr	r3, [pc, #556]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a8a      	ldr	r2, [pc, #552]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b88      	ldr	r3, [pc, #544]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a87      	ldr	r2, [pc, #540]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e00b      	b.n	8001148 <HAL_RCC_OscConfig+0xb0>
 8001130:	4b84      	ldr	r3, [pc, #528]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a83      	ldr	r2, [pc, #524]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b81      	ldr	r3, [pc, #516]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a80      	ldr	r2, [pc, #512]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d013      	beq.n	8001178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fd12 	bl	8000b78 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fd0e 	bl	8000b78 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e204      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116a:	4b76      	ldr	r3, [pc, #472]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d0f0      	beq.n	8001158 <HAL_RCC_OscConfig+0xc0>
 8001176:	e014      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fcfe 	bl	8000b78 <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fcfa 	bl	8000b78 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e1f0      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	4b6c      	ldr	r3, [pc, #432]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0xe8>
 800119e:	e000      	b.n	80011a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d063      	beq.n	8001276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011ae:	4b65      	ldr	r3, [pc, #404]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ba:	4b62      	ldr	r3, [pc, #392]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80011c2:	2b08      	cmp	r3, #8
 80011c4:	d11c      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011c6:	4b5f      	ldr	r3, [pc, #380]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d116      	bne.n	8001200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	4b5c      	ldr	r3, [pc, #368]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e1c4      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ea:	4b56      	ldr	r3, [pc, #344]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4952      	ldr	r1, [pc, #328]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	4313      	orrs	r3, r2
 80011fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	e03a      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001208:	4b4f      	ldr	r3, [pc, #316]	; (8001348 <HAL_RCC_OscConfig+0x2b0>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800120e:	f7ff fcb3 	bl	8000b78 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001216:	f7ff fcaf 	bl	8000b78 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e1a5      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001228:	4b46      	ldr	r3, [pc, #280]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001234:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	691b      	ldr	r3, [r3, #16]
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4940      	ldr	r1, [pc, #256]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	4313      	orrs	r3, r2
 8001246:	600b      	str	r3, [r1, #0]
 8001248:	e015      	b.n	8001276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800124a:	4b3f      	ldr	r3, [pc, #252]	; (8001348 <HAL_RCC_OscConfig+0x2b0>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fc92 	bl	8000b78 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001258:	f7ff fc8e 	bl	8000b78 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e184      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f0      	bne.n	8001258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d030      	beq.n	80012e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d016      	beq.n	80012b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <HAL_RCC_OscConfig+0x2b4>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001290:	f7ff fc72 	bl	8000b78 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	e008      	b.n	80012aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001298:	f7ff fc6e 	bl	8000b78 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e164      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012aa:	4b26      	ldr	r3, [pc, #152]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80012ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f0      	beq.n	8001298 <HAL_RCC_OscConfig+0x200>
 80012b6:	e015      	b.n	80012e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <HAL_RCC_OscConfig+0x2b4>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012be:	f7ff fc5b 	bl	8000b78 <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff fc57 	bl	8000b78 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e14d      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1f0      	bne.n	80012c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80a0 	beq.w	8001432 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f6:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10f      	bne.n	8001322 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131e:	2301      	movs	r3, #1
 8001320:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <HAL_RCC_OscConfig+0x2b8>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d121      	bne.n	8001372 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_RCC_OscConfig+0x2b8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_RCC_OscConfig+0x2b8>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133a:	f7ff fc1d 	bl	8000b78 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	e011      	b.n	8001366 <HAL_RCC_OscConfig+0x2ce>
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	42470000 	.word	0x42470000
 800134c:	42470e80 	.word	0x42470e80
 8001350:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001354:	f7ff fc10 	bl	8000b78 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e106      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b85      	ldr	r3, [pc, #532]	; (800157c <HAL_RCC_OscConfig+0x4e4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f0      	beq.n	8001354 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d106      	bne.n	8001388 <HAL_RCC_OscConfig+0x2f0>
 800137a:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	4a80      	ldr	r2, [pc, #512]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	6713      	str	r3, [r2, #112]	; 0x70
 8001386:	e01c      	b.n	80013c2 <HAL_RCC_OscConfig+0x32a>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	2b05      	cmp	r3, #5
 800138e:	d10c      	bne.n	80013aa <HAL_RCC_OscConfig+0x312>
 8001390:	4b7b      	ldr	r3, [pc, #492]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 8001392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001394:	4a7a      	ldr	r2, [pc, #488]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6713      	str	r3, [r2, #112]	; 0x70
 800139c:	4b78      	ldr	r3, [pc, #480]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013a0:	4a77      	ldr	r2, [pc, #476]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6713      	str	r3, [r2, #112]	; 0x70
 80013a8:	e00b      	b.n	80013c2 <HAL_RCC_OscConfig+0x32a>
 80013aa:	4b75      	ldr	r3, [pc, #468]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ae:	4a74      	ldr	r2, [pc, #464]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	6713      	str	r3, [r2, #112]	; 0x70
 80013b6:	4b72      	ldr	r3, [pc, #456]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ba:	4a71      	ldr	r2, [pc, #452]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 80013bc:	f023 0304 	bic.w	r3, r3, #4
 80013c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d015      	beq.n	80013f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ca:	f7ff fbd5 	bl	8000b78 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d0:	e00a      	b.n	80013e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d2:	f7ff fbd1 	bl	8000b78 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e0c5      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e8:	4b65      	ldr	r3, [pc, #404]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 80013ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d0ee      	beq.n	80013d2 <HAL_RCC_OscConfig+0x33a>
 80013f4:	e014      	b.n	8001420 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fbbf 	bl	8000b78 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fc:	e00a      	b.n	8001414 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013fe:	f7ff fbbb 	bl	8000b78 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f241 3288 	movw	r2, #5000	; 0x1388
 800140c:	4293      	cmp	r3, r2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e0af      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001414:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1ee      	bne.n	80013fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d105      	bne.n	8001432 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001426:	4b56      	ldr	r3, [pc, #344]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a55      	ldr	r2, [pc, #340]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 800142c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 809b 	beq.w	8001572 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800143c:	4b50      	ldr	r3, [pc, #320]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b08      	cmp	r3, #8
 8001446:	d05c      	beq.n	8001502 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d141      	bne.n	80014d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001450:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <HAL_RCC_OscConfig+0x4ec>)
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fb8f 	bl	8000b78 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800145e:	f7ff fb8b 	bl	8000b78 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e081      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001470:	4b43      	ldr	r3, [pc, #268]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1f0      	bne.n	800145e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69da      	ldr	r2, [r3, #28]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	431a      	orrs	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	019b      	lsls	r3, r3, #6
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	3b01      	subs	r3, #1
 8001496:	041b      	lsls	r3, r3, #16
 8001498:	431a      	orrs	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149e:	061b      	lsls	r3, r3, #24
 80014a0:	4937      	ldr	r1, [pc, #220]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <HAL_RCC_OscConfig+0x4ec>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb64 	bl	8000b78 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fb60 	bl	8000b78 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e056      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x41c>
 80014d2:	e04e      	b.n	8001572 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_RCC_OscConfig+0x4ec>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fb4d 	bl	8000b78 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e2:	f7ff fb49 	bl	8000b78 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e03f      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1f0      	bne.n	80014e2 <HAL_RCC_OscConfig+0x44a>
 8001500:	e037      	b.n	8001572 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e032      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_RCC_OscConfig+0x4e8>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d028      	beq.n	800156e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d121      	bne.n	800156e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d11a      	bne.n	800156e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800153e:	4013      	ands	r3, r2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001544:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001546:	4293      	cmp	r3, r2
 8001548:	d111      	bne.n	800156e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	3b01      	subs	r3, #1
 8001558:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800155a:	429a      	cmp	r2, r3
 800155c:	d107      	bne.n	800156e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e000      	b.n	8001574 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40007000 	.word	0x40007000
 8001580:	40023800 	.word	0x40023800
 8001584:	42470060 	.word	0x42470060

08001588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0cc      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800159c:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d90c      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015aa:	4b65      	ldr	r3, [pc, #404]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b63      	ldr	r3, [pc, #396]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0b8      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015dc:	4b59      	ldr	r3, [pc, #356]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	4a58      	ldr	r2, [pc, #352]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	4a52      	ldr	r2, [pc, #328]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001600:	4b50      	ldr	r3, [pc, #320]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	494d      	ldr	r1, [pc, #308]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d044      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b47      	ldr	r3, [pc, #284]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d119      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e07f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d003      	beq.n	8001646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001642:	2b03      	cmp	r3, #3
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e06f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e067      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001666:	4b37      	ldr	r3, [pc, #220]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f023 0203 	bic.w	r2, r3, #3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	4934      	ldr	r1, [pc, #208]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	4313      	orrs	r3, r2
 8001676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001678:	f7ff fa7e 	bl	8000b78 <HAL_GetTick>
 800167c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	e00a      	b.n	8001696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001680:	f7ff fa7a 	bl	8000b78 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e04f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 020c 	and.w	r2, r3, #12
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d1eb      	bne.n	8001680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d20c      	bcs.n	80016d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e032      	b.n	8001736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4916      	ldr	r1, [pc, #88]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	490e      	ldr	r1, [pc, #56]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	4313      	orrs	r3, r2
 800170c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800170e:	f000 f821 	bl	8001754 <HAL_RCC_GetSysClockFreq>
 8001712:	4602      	mov	r2, r0
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	490a      	ldr	r1, [pc, #40]	; (8001748 <HAL_RCC_ClockConfig+0x1c0>)
 8001720:	5ccb      	ldrb	r3, [r1, r3]
 8001722:	fa22 f303 	lsr.w	r3, r2, r3
 8001726:	4a09      	ldr	r2, [pc, #36]	; (800174c <HAL_RCC_ClockConfig+0x1c4>)
 8001728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_RCC_ClockConfig+0x1c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f9de 	bl	8000af0 <HAL_InitTick>

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023c00 	.word	0x40023c00
 8001744:	40023800 	.word	0x40023800
 8001748:	080026e0 	.word	0x080026e0
 800174c:	20000000 	.word	0x20000000
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001754:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	2300      	movs	r3, #0
 8001766:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800176c:	4b67      	ldr	r3, [pc, #412]	; (800190c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b08      	cmp	r3, #8
 8001776:	d00d      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x40>
 8001778:	2b08      	cmp	r3, #8
 800177a:	f200 80bd 	bhi.w	80018f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_RCC_GetSysClockFreq+0x34>
 8001782:	2b04      	cmp	r3, #4
 8001784:	d003      	beq.n	800178e <HAL_RCC_GetSysClockFreq+0x3a>
 8001786:	e0b7      	b.n	80018f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001788:	4b61      	ldr	r3, [pc, #388]	; (8001910 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800178a:	60bb      	str	r3, [r7, #8]
       break;
 800178c:	e0b7      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800178e:	4b61      	ldr	r3, [pc, #388]	; (8001914 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001790:	60bb      	str	r3, [r7, #8]
      break;
 8001792:	e0b4      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001794:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800179c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800179e:	4b5b      	ldr	r3, [pc, #364]	; (800190c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d04d      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017aa:	4b58      	ldr	r3, [pc, #352]	; (800190c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	099b      	lsrs	r3, r3, #6
 80017b0:	461a      	mov	r2, r3
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	ea02 0800 	and.w	r8, r2, r0
 80017c2:	ea03 0901 	and.w	r9, r3, r1
 80017c6:	4640      	mov	r0, r8
 80017c8:	4649      	mov	r1, r9
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	014b      	lsls	r3, r1, #5
 80017d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80017d8:	0142      	lsls	r2, r0, #5
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	ebb0 0008 	subs.w	r0, r0, r8
 80017e2:	eb61 0109 	sbc.w	r1, r1, r9
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	018b      	lsls	r3, r1, #6
 80017f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80017f4:	0182      	lsls	r2, r0, #6
 80017f6:	1a12      	subs	r2, r2, r0
 80017f8:	eb63 0301 	sbc.w	r3, r3, r1
 80017fc:	f04f 0000 	mov.w	r0, #0
 8001800:	f04f 0100 	mov.w	r1, #0
 8001804:	00d9      	lsls	r1, r3, #3
 8001806:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800180a:	00d0      	lsls	r0, r2, #3
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	eb12 0208 	adds.w	r2, r2, r8
 8001814:	eb43 0309 	adc.w	r3, r3, r9
 8001818:	f04f 0000 	mov.w	r0, #0
 800181c:	f04f 0100 	mov.w	r1, #0
 8001820:	0259      	lsls	r1, r3, #9
 8001822:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001826:	0250      	lsls	r0, r2, #9
 8001828:	4602      	mov	r2, r0
 800182a:	460b      	mov	r3, r1
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	461a      	mov	r2, r3
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	f7fe fcce 	bl	80001d8 <__aeabi_uldivmod>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4613      	mov	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e04a      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	099b      	lsrs	r3, r3, #6
 800184c:	461a      	mov	r2, r3
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001856:	f04f 0100 	mov.w	r1, #0
 800185a:	ea02 0400 	and.w	r4, r2, r0
 800185e:	ea03 0501 	and.w	r5, r3, r1
 8001862:	4620      	mov	r0, r4
 8001864:	4629      	mov	r1, r5
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	014b      	lsls	r3, r1, #5
 8001870:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001874:	0142      	lsls	r2, r0, #5
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	1b00      	subs	r0, r0, r4
 800187c:	eb61 0105 	sbc.w	r1, r1, r5
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	018b      	lsls	r3, r1, #6
 800188a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800188e:	0182      	lsls	r2, r0, #6
 8001890:	1a12      	subs	r2, r2, r0
 8001892:	eb63 0301 	sbc.w	r3, r3, r1
 8001896:	f04f 0000 	mov.w	r0, #0
 800189a:	f04f 0100 	mov.w	r1, #0
 800189e:	00d9      	lsls	r1, r3, #3
 80018a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80018a4:	00d0      	lsls	r0, r2, #3
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	1912      	adds	r2, r2, r4
 80018ac:	eb45 0303 	adc.w	r3, r5, r3
 80018b0:	f04f 0000 	mov.w	r0, #0
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	0299      	lsls	r1, r3, #10
 80018ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80018be:	0290      	lsls	r0, r2, #10
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	461a      	mov	r2, r3
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	f7fe fc82 	bl	80001d8 <__aeabi_uldivmod>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4613      	mov	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	3301      	adds	r3, #1
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f4:	60bb      	str	r3, [r7, #8]
      break;
 80018f6:	e002      	b.n	80018fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018fa:	60bb      	str	r3, [r7, #8]
      break;
 80018fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018fe:	68bb      	ldr	r3, [r7, #8]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	00f42400 	.word	0x00f42400
 8001914:	007a1200 	.word	0x007a1200

08001918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_RCC_GetHCLKFreq+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	20000000 	.word	0x20000000

08001930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001934:	f7ff fff0 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	0a9b      	lsrs	r3, r3, #10
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4903      	ldr	r1, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	080026f0 	.word	0x080026f0

08001958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800195c:	f7ff ffdc 	bl	8001918 <HAL_RCC_GetHCLKFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0b5b      	lsrs	r3, r3, #13
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	4903      	ldr	r1, [pc, #12]	; (800197c <HAL_RCC_GetPCLK2Freq+0x24>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40023800 	.word	0x40023800
 800197c:	080026f0 	.word	0x080026f0

08001980 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e041      	b.n	8001a16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7fe ff56 	bl	8000858 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3304      	adds	r3, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f000 f9a0 	bl	8001d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b084      	sub	sp, #16
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d109      	bne.n	8001a44 <HAL_TIM_PWM_Start+0x24>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e022      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d109      	bne.n	8001a5e <HAL_TIM_PWM_Start+0x3e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	bf14      	ite	ne
 8001a56:	2301      	movne	r3, #1
 8001a58:	2300      	moveq	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	e015      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d109      	bne.n	8001a78 <HAL_TIM_PWM_Start+0x58>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	e008      	b.n	8001a8a <HAL_TIM_PWM_Start+0x6a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	bf14      	ite	ne
 8001a84:	2301      	movne	r3, #1
 8001a86:	2300      	moveq	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e068      	b.n	8001b64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d104      	bne.n	8001aa2 <HAL_TIM_PWM_Start+0x82>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001aa0:	e013      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d104      	bne.n	8001ab2 <HAL_TIM_PWM_Start+0x92>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ab0:	e00b      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d104      	bne.n	8001ac2 <HAL_TIM_PWM_Start+0xa2>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ac0:	e003      	b.n	8001aca <HAL_TIM_PWM_Start+0xaa>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	6839      	ldr	r1, [r7, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 fb22 	bl	800211c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <HAL_TIM_PWM_Start+0x14c>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d107      	bne.n	8001af2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <HAL_TIM_PWM_Start+0x14c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d018      	beq.n	8001b2e <HAL_TIM_PWM_Start+0x10e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b04:	d013      	beq.n	8001b2e <HAL_TIM_PWM_Start+0x10e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <HAL_TIM_PWM_Start+0x150>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00e      	beq.n	8001b2e <HAL_TIM_PWM_Start+0x10e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a17      	ldr	r2, [pc, #92]	; (8001b74 <HAL_TIM_PWM_Start+0x154>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d009      	beq.n	8001b2e <HAL_TIM_PWM_Start+0x10e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a16      	ldr	r2, [pc, #88]	; (8001b78 <HAL_TIM_PWM_Start+0x158>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d004      	beq.n	8001b2e <HAL_TIM_PWM_Start+0x10e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_TIM_PWM_Start+0x15c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d111      	bne.n	8001b52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2b06      	cmp	r3, #6
 8001b3e:	d010      	beq.n	8001b62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b50:	e007      	b.n	8001b62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40010000 	.word	0x40010000
 8001b70:	40000400 	.word	0x40000400
 8001b74:	40000800 	.word	0x40000800
 8001b78:	40000c00 	.word	0x40000c00
 8001b7c:	40014000 	.word	0x40014000

08001b80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d101      	bne.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e0ae      	b.n	8001cfc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	f200 809f 	bhi.w	8001cec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001bae:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb4:	08001be9 	.word	0x08001be9
 8001bb8:	08001ced 	.word	0x08001ced
 8001bbc:	08001ced 	.word	0x08001ced
 8001bc0:	08001ced 	.word	0x08001ced
 8001bc4:	08001c29 	.word	0x08001c29
 8001bc8:	08001ced 	.word	0x08001ced
 8001bcc:	08001ced 	.word	0x08001ced
 8001bd0:	08001ced 	.word	0x08001ced
 8001bd4:	08001c6b 	.word	0x08001c6b
 8001bd8:	08001ced 	.word	0x08001ced
 8001bdc:	08001ced 	.word	0x08001ced
 8001be0:	08001ced 	.word	0x08001ced
 8001be4:	08001cab 	.word	0x08001cab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 f908 	bl	8001e04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	699a      	ldr	r2, [r3, #24]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0208 	orr.w	r2, r2, #8
 8001c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0204 	bic.w	r2, r2, #4
 8001c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6999      	ldr	r1, [r3, #24]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	619a      	str	r2, [r3, #24]
      break;
 8001c26:	e064      	b.n	8001cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f94e 	bl	8001ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6999      	ldr	r1, [r3, #24]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	021a      	lsls	r2, r3, #8
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	619a      	str	r2, [r3, #24]
      break;
 8001c68:	e043      	b.n	8001cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f999 	bl	8001fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0208 	orr.w	r2, r2, #8
 8001c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	69da      	ldr	r2, [r3, #28]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0204 	bic.w	r2, r2, #4
 8001c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	69d9      	ldr	r1, [r3, #28]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	61da      	str	r2, [r3, #28]
      break;
 8001ca8:	e023      	b.n	8001cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68b9      	ldr	r1, [r7, #8]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f9e3 	bl	800207c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	69da      	ldr	r2, [r3, #28]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	69da      	ldr	r2, [r3, #28]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	69d9      	ldr	r1, [r3, #28]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	021a      	lsls	r2, r3, #8
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	61da      	str	r2, [r3, #28]
      break;
 8001cea:	e002      	b.n	8001cf2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	75fb      	strb	r3, [r7, #23]
      break;
 8001cf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a34      	ldr	r2, [pc, #208]	; (8001de8 <TIM_Base_SetConfig+0xe4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00f      	beq.n	8001d3c <TIM_Base_SetConfig+0x38>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d22:	d00b      	beq.n	8001d3c <TIM_Base_SetConfig+0x38>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a31      	ldr	r2, [pc, #196]	; (8001dec <TIM_Base_SetConfig+0xe8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d007      	beq.n	8001d3c <TIM_Base_SetConfig+0x38>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a30      	ldr	r2, [pc, #192]	; (8001df0 <TIM_Base_SetConfig+0xec>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d003      	beq.n	8001d3c <TIM_Base_SetConfig+0x38>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a2f      	ldr	r2, [pc, #188]	; (8001df4 <TIM_Base_SetConfig+0xf0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d108      	bne.n	8001d4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a25      	ldr	r2, [pc, #148]	; (8001de8 <TIM_Base_SetConfig+0xe4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01b      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d5c:	d017      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a22      	ldr	r2, [pc, #136]	; (8001dec <TIM_Base_SetConfig+0xe8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <TIM_Base_SetConfig+0xec>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00f      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a20      	ldr	r2, [pc, #128]	; (8001df4 <TIM_Base_SetConfig+0xf0>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00b      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <TIM_Base_SetConfig+0xf4>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a1e      	ldr	r2, [pc, #120]	; (8001dfc <TIM_Base_SetConfig+0xf8>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d003      	beq.n	8001d8e <TIM_Base_SetConfig+0x8a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a1d      	ldr	r2, [pc, #116]	; (8001e00 <TIM_Base_SetConfig+0xfc>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <TIM_Base_SetConfig+0xe4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d103      	bne.n	8001dd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	615a      	str	r2, [r3, #20]
}
 8001dda:	bf00      	nop
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40000800 	.word	0x40000800
 8001df4:	40000c00 	.word	0x40000c00
 8001df8:	40014000 	.word	0x40014000
 8001dfc:	40014400 	.word	0x40014400
 8001e00:	40014800 	.word	0x40014800

08001e04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	f023 0201 	bic.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f023 0302 	bic.w	r3, r3, #2
 8001e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ecc <TIM_OC1_SetConfig+0xc8>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d10c      	bne.n	8001e7a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f023 0308 	bic.w	r3, r3, #8
 8001e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <TIM_OC1_SetConfig+0xc8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d111      	bne.n	8001ea6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	621a      	str	r2, [r3, #32]
}
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	40010000 	.word	0x40010000

08001ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	f023 0210 	bic.w	r2, r3, #16
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f023 0320 	bic.w	r3, r3, #32
 8001f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	697a      	ldr	r2, [r7, #20]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <TIM_OC2_SetConfig+0xd4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d10d      	bne.n	8001f4c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <TIM_OC2_SetConfig+0xd4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d113      	bne.n	8001f7c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	621a      	str	r2, [r3, #32]
}
 8001f96:	bf00      	nop
 8001f98:	371c      	adds	r7, #28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40010000 	.word	0x40010000

08001fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <TIM_OC3_SetConfig+0xd0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d10d      	bne.n	8002022 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800200c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <TIM_OC3_SetConfig+0xd0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d113      	bne.n	8002052 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	621a      	str	r2, [r3, #32]
}
 800206c:	bf00      	nop
 800206e:	371c      	adds	r7, #28
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40010000 	.word	0x40010000

0800207c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800207c:	b480      	push	{r7}
 800207e:	b087      	sub	sp, #28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	031b      	lsls	r3, r3, #12
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <TIM_OC4_SetConfig+0x9c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d109      	bne.n	80020f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	019b      	lsls	r3, r3, #6
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	621a      	str	r2, [r3, #32]
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40010000 	.word	0x40010000

0800211c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	2201      	movs	r2, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a1a      	ldr	r2, [r3, #32]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	43db      	mvns	r3, r3
 800213e:	401a      	ands	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6a1a      	ldr	r2, [r3, #32]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	431a      	orrs	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	621a      	str	r2, [r3, #32]
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800217c:	2302      	movs	r3, #2
 800217e:	e050      	b.n	8002222 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d018      	beq.n	80021f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021cc:	d013      	beq.n	80021f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a18      	ldr	r2, [pc, #96]	; (8002234 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00e      	beq.n	80021f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d009      	beq.n	80021f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a15      	ldr	r2, [pc, #84]	; (800223c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d004      	beq.n	80021f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a13      	ldr	r2, [pc, #76]	; (8002240 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10c      	bne.n	8002210 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	4313      	orrs	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40010000 	.word	0x40010000
 8002234:	40000400 	.word	0x40000400
 8002238:	40000800 	.word	0x40000800
 800223c:	40000c00 	.word	0x40000c00
 8002240:	40014000 	.word	0x40014000

08002244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e03f      	b.n	80022d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fe fb70 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2224      	movs	r2, #36	; 0x24
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f829 	bl	80022e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800229c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	695a      	ldr	r2, [r3, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
	...

080022e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e4:	b09f      	sub	sp, #124	; 0x7c
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80022f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022f6:	68d9      	ldr	r1, [r3, #12]
 80022f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	ea40 0301 	orr.w	r3, r0, r1
 8002300:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	431a      	orrs	r2, r3
 800230c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	431a      	orrs	r2, r3
 8002312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	4313      	orrs	r3, r2
 8002318:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800231a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002324:	f021 010c 	bic.w	r1, r1, #12
 8002328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800232e:	430b      	orrs	r3, r1
 8002330:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800233c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800233e:	6999      	ldr	r1, [r3, #24]
 8002340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	ea40 0301 	orr.w	r3, r0, r1
 8002348:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800234a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4bc5      	ldr	r3, [pc, #788]	; (8002664 <UART_SetConfig+0x384>)
 8002350:	429a      	cmp	r2, r3
 8002352:	d004      	beq.n	800235e <UART_SetConfig+0x7e>
 8002354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4bc3      	ldr	r3, [pc, #780]	; (8002668 <UART_SetConfig+0x388>)
 800235a:	429a      	cmp	r2, r3
 800235c:	d103      	bne.n	8002366 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800235e:	f7ff fafb 	bl	8001958 <HAL_RCC_GetPCLK2Freq>
 8002362:	6778      	str	r0, [r7, #116]	; 0x74
 8002364:	e002      	b.n	800236c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002366:	f7ff fae3 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 800236a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800236c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800236e:	69db      	ldr	r3, [r3, #28]
 8002370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002374:	f040 80b6 	bne.w	80024e4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800237a:	461c      	mov	r4, r3
 800237c:	f04f 0500 	mov.w	r5, #0
 8002380:	4622      	mov	r2, r4
 8002382:	462b      	mov	r3, r5
 8002384:	1891      	adds	r1, r2, r2
 8002386:	6439      	str	r1, [r7, #64]	; 0x40
 8002388:	415b      	adcs	r3, r3
 800238a:	647b      	str	r3, [r7, #68]	; 0x44
 800238c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002390:	1912      	adds	r2, r2, r4
 8002392:	eb45 0303 	adc.w	r3, r5, r3
 8002396:	f04f 0000 	mov.w	r0, #0
 800239a:	f04f 0100 	mov.w	r1, #0
 800239e:	00d9      	lsls	r1, r3, #3
 80023a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023a4:	00d0      	lsls	r0, r2, #3
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	1911      	adds	r1, r2, r4
 80023ac:	6639      	str	r1, [r7, #96]	; 0x60
 80023ae:	416b      	adcs	r3, r5
 80023b0:	667b      	str	r3, [r7, #100]	; 0x64
 80023b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	461a      	mov	r2, r3
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	1891      	adds	r1, r2, r2
 80023be:	63b9      	str	r1, [r7, #56]	; 0x38
 80023c0:	415b      	adcs	r3, r3
 80023c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80023c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80023cc:	f7fd ff04 	bl	80001d8 <__aeabi_uldivmod>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4ba5      	ldr	r3, [pc, #660]	; (800266c <UART_SetConfig+0x38c>)
 80023d6:	fba3 2302 	umull	r2, r3, r3, r2
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	011e      	lsls	r6, r3, #4
 80023de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023e0:	461c      	mov	r4, r3
 80023e2:	f04f 0500 	mov.w	r5, #0
 80023e6:	4622      	mov	r2, r4
 80023e8:	462b      	mov	r3, r5
 80023ea:	1891      	adds	r1, r2, r2
 80023ec:	6339      	str	r1, [r7, #48]	; 0x30
 80023ee:	415b      	adcs	r3, r3
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
 80023f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80023f6:	1912      	adds	r2, r2, r4
 80023f8:	eb45 0303 	adc.w	r3, r5, r3
 80023fc:	f04f 0000 	mov.w	r0, #0
 8002400:	f04f 0100 	mov.w	r1, #0
 8002404:	00d9      	lsls	r1, r3, #3
 8002406:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800240a:	00d0      	lsls	r0, r2, #3
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	1911      	adds	r1, r2, r4
 8002412:	65b9      	str	r1, [r7, #88]	; 0x58
 8002414:	416b      	adcs	r3, r5
 8002416:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	461a      	mov	r2, r3
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	1891      	adds	r1, r2, r2
 8002424:	62b9      	str	r1, [r7, #40]	; 0x28
 8002426:	415b      	adcs	r3, r3
 8002428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800242e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002432:	f7fd fed1 	bl	80001d8 <__aeabi_uldivmod>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4b8c      	ldr	r3, [pc, #560]	; (800266c <UART_SetConfig+0x38c>)
 800243c:	fba3 1302 	umull	r1, r3, r3, r2
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	2164      	movs	r1, #100	; 0x64
 8002444:	fb01 f303 	mul.w	r3, r1, r3
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	3332      	adds	r3, #50	; 0x32
 800244e:	4a87      	ldr	r2, [pc, #540]	; (800266c <UART_SetConfig+0x38c>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800245c:	441e      	add	r6, r3
 800245e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002460:	4618      	mov	r0, r3
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	1894      	adds	r4, r2, r2
 800246c:	623c      	str	r4, [r7, #32]
 800246e:	415b      	adcs	r3, r3
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
 8002472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002476:	1812      	adds	r2, r2, r0
 8002478:	eb41 0303 	adc.w	r3, r1, r3
 800247c:	f04f 0400 	mov.w	r4, #0
 8002480:	f04f 0500 	mov.w	r5, #0
 8002484:	00dd      	lsls	r5, r3, #3
 8002486:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800248a:	00d4      	lsls	r4, r2, #3
 800248c:	4622      	mov	r2, r4
 800248e:	462b      	mov	r3, r5
 8002490:	1814      	adds	r4, r2, r0
 8002492:	653c      	str	r4, [r7, #80]	; 0x50
 8002494:	414b      	adcs	r3, r1
 8002496:	657b      	str	r3, [r7, #84]	; 0x54
 8002498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	461a      	mov	r2, r3
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	1891      	adds	r1, r2, r2
 80024a4:	61b9      	str	r1, [r7, #24]
 80024a6:	415b      	adcs	r3, r3
 80024a8:	61fb      	str	r3, [r7, #28]
 80024aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80024b2:	f7fd fe91 	bl	80001d8 <__aeabi_uldivmod>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4b6c      	ldr	r3, [pc, #432]	; (800266c <UART_SetConfig+0x38c>)
 80024bc:	fba3 1302 	umull	r1, r3, r3, r2
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	2164      	movs	r1, #100	; 0x64
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	3332      	adds	r3, #50	; 0x32
 80024ce:	4a67      	ldr	r2, [pc, #412]	; (800266c <UART_SetConfig+0x38c>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	f003 0207 	and.w	r2, r3, #7
 80024da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4432      	add	r2, r6
 80024e0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024e2:	e0b9      	b.n	8002658 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024e6:	461c      	mov	r4, r3
 80024e8:	f04f 0500 	mov.w	r5, #0
 80024ec:	4622      	mov	r2, r4
 80024ee:	462b      	mov	r3, r5
 80024f0:	1891      	adds	r1, r2, r2
 80024f2:	6139      	str	r1, [r7, #16]
 80024f4:	415b      	adcs	r3, r3
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024fc:	1912      	adds	r2, r2, r4
 80024fe:	eb45 0303 	adc.w	r3, r5, r3
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	00d9      	lsls	r1, r3, #3
 800250c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002510:	00d0      	lsls	r0, r2, #3
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	eb12 0804 	adds.w	r8, r2, r4
 800251a:	eb43 0905 	adc.w	r9, r3, r5
 800251e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4618      	mov	r0, r3
 8002524:	f04f 0100 	mov.w	r1, #0
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	008b      	lsls	r3, r1, #2
 8002532:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002536:	0082      	lsls	r2, r0, #2
 8002538:	4640      	mov	r0, r8
 800253a:	4649      	mov	r1, r9
 800253c:	f7fd fe4c 	bl	80001d8 <__aeabi_uldivmod>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4b49      	ldr	r3, [pc, #292]	; (800266c <UART_SetConfig+0x38c>)
 8002546:	fba3 2302 	umull	r2, r3, r3, r2
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	011e      	lsls	r6, r3, #4
 800254e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002550:	4618      	mov	r0, r3
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	1894      	adds	r4, r2, r2
 800255c:	60bc      	str	r4, [r7, #8]
 800255e:	415b      	adcs	r3, r3
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002566:	1812      	adds	r2, r2, r0
 8002568:	eb41 0303 	adc.w	r3, r1, r3
 800256c:	f04f 0400 	mov.w	r4, #0
 8002570:	f04f 0500 	mov.w	r5, #0
 8002574:	00dd      	lsls	r5, r3, #3
 8002576:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800257a:	00d4      	lsls	r4, r2, #3
 800257c:	4622      	mov	r2, r4
 800257e:	462b      	mov	r3, r5
 8002580:	1814      	adds	r4, r2, r0
 8002582:	64bc      	str	r4, [r7, #72]	; 0x48
 8002584:	414b      	adcs	r3, r1
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4618      	mov	r0, r3
 800258e:	f04f 0100 	mov.w	r1, #0
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	008b      	lsls	r3, r1, #2
 800259c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80025a0:	0082      	lsls	r2, r0, #2
 80025a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80025a6:	f7fd fe17 	bl	80001d8 <__aeabi_uldivmod>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4b2f      	ldr	r3, [pc, #188]	; (800266c <UART_SetConfig+0x38c>)
 80025b0:	fba3 1302 	umull	r1, r3, r3, r2
 80025b4:	095b      	lsrs	r3, r3, #5
 80025b6:	2164      	movs	r1, #100	; 0x64
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	3332      	adds	r3, #50	; 0x32
 80025c2:	4a2a      	ldr	r2, [pc, #168]	; (800266c <UART_SetConfig+0x38c>)
 80025c4:	fba2 2303 	umull	r2, r3, r2, r3
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ce:	441e      	add	r6, r3
 80025d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d2:	4618      	mov	r0, r3
 80025d4:	f04f 0100 	mov.w	r1, #0
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	1894      	adds	r4, r2, r2
 80025de:	603c      	str	r4, [r7, #0]
 80025e0:	415b      	adcs	r3, r3
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025e8:	1812      	adds	r2, r2, r0
 80025ea:	eb41 0303 	adc.w	r3, r1, r3
 80025ee:	f04f 0400 	mov.w	r4, #0
 80025f2:	f04f 0500 	mov.w	r5, #0
 80025f6:	00dd      	lsls	r5, r3, #3
 80025f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025fc:	00d4      	lsls	r4, r2, #3
 80025fe:	4622      	mov	r2, r4
 8002600:	462b      	mov	r3, r5
 8002602:	eb12 0a00 	adds.w	sl, r2, r0
 8002606:	eb43 0b01 	adc.w	fp, r3, r1
 800260a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	4618      	mov	r0, r3
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	008b      	lsls	r3, r1, #2
 800261e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002622:	0082      	lsls	r2, r0, #2
 8002624:	4650      	mov	r0, sl
 8002626:	4659      	mov	r1, fp
 8002628:	f7fd fdd6 	bl	80001d8 <__aeabi_uldivmod>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <UART_SetConfig+0x38c>)
 8002632:	fba3 1302 	umull	r1, r3, r3, r2
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2164      	movs	r1, #100	; 0x64
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	011b      	lsls	r3, r3, #4
 8002642:	3332      	adds	r3, #50	; 0x32
 8002644:	4a09      	ldr	r2, [pc, #36]	; (800266c <UART_SetConfig+0x38c>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	f003 020f 	and.w	r2, r3, #15
 8002650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4432      	add	r2, r6
 8002656:	609a      	str	r2, [r3, #8]
}
 8002658:	bf00      	nop
 800265a:	377c      	adds	r7, #124	; 0x7c
 800265c:	46bd      	mov	sp, r7
 800265e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002662:	bf00      	nop
 8002664:	40011000 	.word	0x40011000
 8002668:	40011400 	.word	0x40011400
 800266c:	51eb851f 	.word	0x51eb851f

08002670 <__libc_init_array>:
 8002670:	b570      	push	{r4, r5, r6, lr}
 8002672:	4d0d      	ldr	r5, [pc, #52]	; (80026a8 <__libc_init_array+0x38>)
 8002674:	4c0d      	ldr	r4, [pc, #52]	; (80026ac <__libc_init_array+0x3c>)
 8002676:	1b64      	subs	r4, r4, r5
 8002678:	10a4      	asrs	r4, r4, #2
 800267a:	2600      	movs	r6, #0
 800267c:	42a6      	cmp	r6, r4
 800267e:	d109      	bne.n	8002694 <__libc_init_array+0x24>
 8002680:	4d0b      	ldr	r5, [pc, #44]	; (80026b0 <__libc_init_array+0x40>)
 8002682:	4c0c      	ldr	r4, [pc, #48]	; (80026b4 <__libc_init_array+0x44>)
 8002684:	f000 f820 	bl	80026c8 <_init>
 8002688:	1b64      	subs	r4, r4, r5
 800268a:	10a4      	asrs	r4, r4, #2
 800268c:	2600      	movs	r6, #0
 800268e:	42a6      	cmp	r6, r4
 8002690:	d105      	bne.n	800269e <__libc_init_array+0x2e>
 8002692:	bd70      	pop	{r4, r5, r6, pc}
 8002694:	f855 3b04 	ldr.w	r3, [r5], #4
 8002698:	4798      	blx	r3
 800269a:	3601      	adds	r6, #1
 800269c:	e7ee      	b.n	800267c <__libc_init_array+0xc>
 800269e:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a2:	4798      	blx	r3
 80026a4:	3601      	adds	r6, #1
 80026a6:	e7f2      	b.n	800268e <__libc_init_array+0x1e>
 80026a8:	08002700 	.word	0x08002700
 80026ac:	08002700 	.word	0x08002700
 80026b0:	08002700 	.word	0x08002700
 80026b4:	08002704 	.word	0x08002704

080026b8 <memset>:
 80026b8:	4402      	add	r2, r0
 80026ba:	4603      	mov	r3, r0
 80026bc:	4293      	cmp	r3, r2
 80026be:	d100      	bne.n	80026c2 <memset+0xa>
 80026c0:	4770      	bx	lr
 80026c2:	f803 1b01 	strb.w	r1, [r3], #1
 80026c6:	e7f9      	b.n	80026bc <memset+0x4>

080026c8 <_init>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	bf00      	nop
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr

080026d4 <_fini>:
 80026d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d6:	bf00      	nop
 80026d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026da:	bc08      	pop	{r3}
 80026dc:	469e      	mov	lr, r3
 80026de:	4770      	bx	lr
