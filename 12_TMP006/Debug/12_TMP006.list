
12_TMP006.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004838  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080049d8  080049d8  000149d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a48  08004a48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a50  08004a50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a50  08004a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a54  08004a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000070  08004ac8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08004ac8  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca44  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a57  00000000  00000000  0002cae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002eeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f33  00000000  00000000  0002f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c8ef  00000000  00000000  000456f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000887ff  00000000  00000000  00051fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da7e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bfc  00000000  00000000  000da834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080049c0 	.word	0x080049c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080049c0 	.word	0x080049c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b96e 	b.w	8000bf0 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9d08      	ldr	r5, [sp, #32]
 8000932:	4604      	mov	r4, r0
 8000934:	468c      	mov	ip, r1
 8000936:	2b00      	cmp	r3, #0
 8000938:	f040 8083 	bne.w	8000a42 <__udivmoddi4+0x116>
 800093c:	428a      	cmp	r2, r1
 800093e:	4617      	mov	r7, r2
 8000940:	d947      	bls.n	80009d2 <__udivmoddi4+0xa6>
 8000942:	fab2 f282 	clz	r2, r2
 8000946:	b142      	cbz	r2, 800095a <__udivmoddi4+0x2e>
 8000948:	f1c2 0020 	rsb	r0, r2, #32
 800094c:	fa24 f000 	lsr.w	r0, r4, r0
 8000950:	4091      	lsls	r1, r2
 8000952:	4097      	lsls	r7, r2
 8000954:	ea40 0c01 	orr.w	ip, r0, r1
 8000958:	4094      	lsls	r4, r2
 800095a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800095e:	0c23      	lsrs	r3, r4, #16
 8000960:	fbbc f6f8 	udiv	r6, ip, r8
 8000964:	fa1f fe87 	uxth.w	lr, r7
 8000968:	fb08 c116 	mls	r1, r8, r6, ip
 800096c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000970:	fb06 f10e 	mul.w	r1, r6, lr
 8000974:	4299      	cmp	r1, r3
 8000976:	d909      	bls.n	800098c <__udivmoddi4+0x60>
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	f106 30ff 	add.w	r0, r6, #4294967295
 800097e:	f080 8119 	bcs.w	8000bb4 <__udivmoddi4+0x288>
 8000982:	4299      	cmp	r1, r3
 8000984:	f240 8116 	bls.w	8000bb4 <__udivmoddi4+0x288>
 8000988:	3e02      	subs	r6, #2
 800098a:	443b      	add	r3, r7
 800098c:	1a5b      	subs	r3, r3, r1
 800098e:	b2a4      	uxth	r4, r4
 8000990:	fbb3 f0f8 	udiv	r0, r3, r8
 8000994:	fb08 3310 	mls	r3, r8, r0, r3
 8000998:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800099c:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a0:	45a6      	cmp	lr, r4
 80009a2:	d909      	bls.n	80009b8 <__udivmoddi4+0x8c>
 80009a4:	193c      	adds	r4, r7, r4
 80009a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80009aa:	f080 8105 	bcs.w	8000bb8 <__udivmoddi4+0x28c>
 80009ae:	45a6      	cmp	lr, r4
 80009b0:	f240 8102 	bls.w	8000bb8 <__udivmoddi4+0x28c>
 80009b4:	3802      	subs	r0, #2
 80009b6:	443c      	add	r4, r7
 80009b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009bc:	eba4 040e 	sub.w	r4, r4, lr
 80009c0:	2600      	movs	r6, #0
 80009c2:	b11d      	cbz	r5, 80009cc <__udivmoddi4+0xa0>
 80009c4:	40d4      	lsrs	r4, r2
 80009c6:	2300      	movs	r3, #0
 80009c8:	e9c5 4300 	strd	r4, r3, [r5]
 80009cc:	4631      	mov	r1, r6
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	b902      	cbnz	r2, 80009d6 <__udivmoddi4+0xaa>
 80009d4:	deff      	udf	#255	; 0xff
 80009d6:	fab2 f282 	clz	r2, r2
 80009da:	2a00      	cmp	r2, #0
 80009dc:	d150      	bne.n	8000a80 <__udivmoddi4+0x154>
 80009de:	1bcb      	subs	r3, r1, r7
 80009e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009e4:	fa1f f887 	uxth.w	r8, r7
 80009e8:	2601      	movs	r6, #1
 80009ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80009ee:	0c21      	lsrs	r1, r4, #16
 80009f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009f8:	fb08 f30c 	mul.w	r3, r8, ip
 80009fc:	428b      	cmp	r3, r1
 80009fe:	d907      	bls.n	8000a10 <__udivmoddi4+0xe4>
 8000a00:	1879      	adds	r1, r7, r1
 8000a02:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0xe2>
 8000a08:	428b      	cmp	r3, r1
 8000a0a:	f200 80e9 	bhi.w	8000be0 <__udivmoddi4+0x2b4>
 8000a0e:	4684      	mov	ip, r0
 8000a10:	1ac9      	subs	r1, r1, r3
 8000a12:	b2a3      	uxth	r3, r4
 8000a14:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a18:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a1c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a20:	fb08 f800 	mul.w	r8, r8, r0
 8000a24:	45a0      	cmp	r8, r4
 8000a26:	d907      	bls.n	8000a38 <__udivmoddi4+0x10c>
 8000a28:	193c      	adds	r4, r7, r4
 8000a2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a2e:	d202      	bcs.n	8000a36 <__udivmoddi4+0x10a>
 8000a30:	45a0      	cmp	r8, r4
 8000a32:	f200 80d9 	bhi.w	8000be8 <__udivmoddi4+0x2bc>
 8000a36:	4618      	mov	r0, r3
 8000a38:	eba4 0408 	sub.w	r4, r4, r8
 8000a3c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a40:	e7bf      	b.n	80009c2 <__udivmoddi4+0x96>
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d909      	bls.n	8000a5a <__udivmoddi4+0x12e>
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	f000 80b1 	beq.w	8000bae <__udivmoddi4+0x282>
 8000a4c:	2600      	movs	r6, #0
 8000a4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a52:	4630      	mov	r0, r6
 8000a54:	4631      	mov	r1, r6
 8000a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5a:	fab3 f683 	clz	r6, r3
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	d14a      	bne.n	8000af8 <__udivmoddi4+0x1cc>
 8000a62:	428b      	cmp	r3, r1
 8000a64:	d302      	bcc.n	8000a6c <__udivmoddi4+0x140>
 8000a66:	4282      	cmp	r2, r0
 8000a68:	f200 80b8 	bhi.w	8000bdc <__udivmoddi4+0x2b0>
 8000a6c:	1a84      	subs	r4, r0, r2
 8000a6e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a72:	2001      	movs	r0, #1
 8000a74:	468c      	mov	ip, r1
 8000a76:	2d00      	cmp	r5, #0
 8000a78:	d0a8      	beq.n	80009cc <__udivmoddi4+0xa0>
 8000a7a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a7e:	e7a5      	b.n	80009cc <__udivmoddi4+0xa0>
 8000a80:	f1c2 0320 	rsb	r3, r2, #32
 8000a84:	fa20 f603 	lsr.w	r6, r0, r3
 8000a88:	4097      	lsls	r7, r2
 8000a8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a8e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a92:	40d9      	lsrs	r1, r3
 8000a94:	4330      	orrs	r0, r6
 8000a96:	0c03      	lsrs	r3, r0, #16
 8000a98:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000aa4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aa8:	fb06 f108 	mul.w	r1, r6, r8
 8000aac:	4299      	cmp	r1, r3
 8000aae:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab2:	d909      	bls.n	8000ac8 <__udivmoddi4+0x19c>
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000aba:	f080 808d 	bcs.w	8000bd8 <__udivmoddi4+0x2ac>
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	f240 808a 	bls.w	8000bd8 <__udivmoddi4+0x2ac>
 8000ac4:	3e02      	subs	r6, #2
 8000ac6:	443b      	add	r3, r7
 8000ac8:	1a5b      	subs	r3, r3, r1
 8000aca:	b281      	uxth	r1, r0
 8000acc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ad0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ad4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad8:	fb00 f308 	mul.w	r3, r0, r8
 8000adc:	428b      	cmp	r3, r1
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x1c4>
 8000ae0:	1879      	adds	r1, r7, r1
 8000ae2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ae6:	d273      	bcs.n	8000bd0 <__udivmoddi4+0x2a4>
 8000ae8:	428b      	cmp	r3, r1
 8000aea:	d971      	bls.n	8000bd0 <__udivmoddi4+0x2a4>
 8000aec:	3802      	subs	r0, #2
 8000aee:	4439      	add	r1, r7
 8000af0:	1acb      	subs	r3, r1, r3
 8000af2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000af6:	e778      	b.n	80009ea <__udivmoddi4+0xbe>
 8000af8:	f1c6 0c20 	rsb	ip, r6, #32
 8000afc:	fa03 f406 	lsl.w	r4, r3, r6
 8000b00:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b04:	431c      	orrs	r4, r3
 8000b06:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b0e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b12:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b16:	431f      	orrs	r7, r3
 8000b18:	0c3b      	lsrs	r3, r7, #16
 8000b1a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b1e:	fa1f f884 	uxth.w	r8, r4
 8000b22:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b26:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b2a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b2e:	458a      	cmp	sl, r1
 8000b30:	fa02 f206 	lsl.w	r2, r2, r6
 8000b34:	fa00 f306 	lsl.w	r3, r0, r6
 8000b38:	d908      	bls.n	8000b4c <__udivmoddi4+0x220>
 8000b3a:	1861      	adds	r1, r4, r1
 8000b3c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b40:	d248      	bcs.n	8000bd4 <__udivmoddi4+0x2a8>
 8000b42:	458a      	cmp	sl, r1
 8000b44:	d946      	bls.n	8000bd4 <__udivmoddi4+0x2a8>
 8000b46:	f1a9 0902 	sub.w	r9, r9, #2
 8000b4a:	4421      	add	r1, r4
 8000b4c:	eba1 010a 	sub.w	r1, r1, sl
 8000b50:	b2bf      	uxth	r7, r7
 8000b52:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b56:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b5a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b5e:	fb00 f808 	mul.w	r8, r0, r8
 8000b62:	45b8      	cmp	r8, r7
 8000b64:	d907      	bls.n	8000b76 <__udivmoddi4+0x24a>
 8000b66:	19e7      	adds	r7, r4, r7
 8000b68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b6c:	d22e      	bcs.n	8000bcc <__udivmoddi4+0x2a0>
 8000b6e:	45b8      	cmp	r8, r7
 8000b70:	d92c      	bls.n	8000bcc <__udivmoddi4+0x2a0>
 8000b72:	3802      	subs	r0, #2
 8000b74:	4427      	add	r7, r4
 8000b76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b7a:	eba7 0708 	sub.w	r7, r7, r8
 8000b7e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b82:	454f      	cmp	r7, r9
 8000b84:	46c6      	mov	lr, r8
 8000b86:	4649      	mov	r1, r9
 8000b88:	d31a      	bcc.n	8000bc0 <__udivmoddi4+0x294>
 8000b8a:	d017      	beq.n	8000bbc <__udivmoddi4+0x290>
 8000b8c:	b15d      	cbz	r5, 8000ba6 <__udivmoddi4+0x27a>
 8000b8e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b92:	eb67 0701 	sbc.w	r7, r7, r1
 8000b96:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b9a:	40f2      	lsrs	r2, r6
 8000b9c:	ea4c 0202 	orr.w	r2, ip, r2
 8000ba0:	40f7      	lsrs	r7, r6
 8000ba2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ba6:	2600      	movs	r6, #0
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	462e      	mov	r6, r5
 8000bb0:	4628      	mov	r0, r5
 8000bb2:	e70b      	b.n	80009cc <__udivmoddi4+0xa0>
 8000bb4:	4606      	mov	r6, r0
 8000bb6:	e6e9      	b.n	800098c <__udivmoddi4+0x60>
 8000bb8:	4618      	mov	r0, r3
 8000bba:	e6fd      	b.n	80009b8 <__udivmoddi4+0x8c>
 8000bbc:	4543      	cmp	r3, r8
 8000bbe:	d2e5      	bcs.n	8000b8c <__udivmoddi4+0x260>
 8000bc0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bc4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bc8:	3801      	subs	r0, #1
 8000bca:	e7df      	b.n	8000b8c <__udivmoddi4+0x260>
 8000bcc:	4608      	mov	r0, r1
 8000bce:	e7d2      	b.n	8000b76 <__udivmoddi4+0x24a>
 8000bd0:	4660      	mov	r0, ip
 8000bd2:	e78d      	b.n	8000af0 <__udivmoddi4+0x1c4>
 8000bd4:	4681      	mov	r9, r0
 8000bd6:	e7b9      	b.n	8000b4c <__udivmoddi4+0x220>
 8000bd8:	4666      	mov	r6, ip
 8000bda:	e775      	b.n	8000ac8 <__udivmoddi4+0x19c>
 8000bdc:	4630      	mov	r0, r6
 8000bde:	e74a      	b.n	8000a76 <__udivmoddi4+0x14a>
 8000be0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000be4:	4439      	add	r1, r7
 8000be6:	e713      	b.n	8000a10 <__udivmoddi4+0xe4>
 8000be8:	3802      	subs	r0, #2
 8000bea:	443c      	add	r4, r7
 8000bec:	e724      	b.n	8000a38 <__udivmoddi4+0x10c>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_idiv0>:
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfa:	f000 fb37 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfe:	f000 f899 	bl	8000d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c02:	f000 f959 	bl	8000eb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c06:	f000 f92d 	bl	8000e64 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000c0a:	f000 f8fd 	bl	8000e08 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	// Tell TMP102 that we want to read from temp register
	buf[0] = REG_TEMP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	703b      	strb	r3, [r7, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TMP006_ADDR, buf, 1, HAL_MAX_DELAY);
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	b299      	uxth	r1, r3
 8000c16:	463a      	mov	r2, r7
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	483c      	ldr	r0, [pc, #240]	; (8000d14 <main+0x120>)
 8000c22:	f001 f83f 	bl	8001ca4 <HAL_I2C_Master_Transmit>
 8000c26:	4603      	mov	r3, r0
 8000c28:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 8000c2a:	7dfb      	ldrb	r3, [r7, #23]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d008      	beq.n	8000c42 <main+0x4e>
		strcpy((char*)buf, "Error Tx\r\n");
 8000c30:	463b      	mov	r3, r7
 8000c32:	4a39      	ldr	r2, [pc, #228]	; (8000d18 <main+0x124>)
 8000c34:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c36:	c303      	stmia	r3!, {r0, r1}
 8000c38:	801a      	strh	r2, [r3, #0]
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	0c12      	lsrs	r2, r2, #16
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e056      	b.n	8000cf0 <main+0xfc>
	}
	else {
		// Read 2 bytes from temp register
		ret = HAL_I2C_Master_Receive(&hi2c1, TMP006_ADDR, buf, 2, HAL_MAX_DELAY);
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	b299      	uxth	r1, r3
 8000c46:	463a      	mov	r2, r7
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	9300      	str	r3, [sp, #0]
 8000c4e:	2302      	movs	r3, #2
 8000c50:	4830      	ldr	r0, [pc, #192]	; (8000d14 <main+0x120>)
 8000c52:	f001 f925 	bl	8001ea0 <HAL_I2C_Master_Receive>
 8000c56:	4603      	mov	r3, r0
 8000c58:	75fb      	strb	r3, [r7, #23]
		if (ret != HAL_OK) {
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d008      	beq.n	8000c72 <main+0x7e>
			strcpy((char*)buf, "Error Rx\r\n");
 8000c60:	463b      	mov	r3, r7
 8000c62:	4a2e      	ldr	r2, [pc, #184]	; (8000d1c <main+0x128>)
 8000c64:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c66:	c303      	stmia	r3!, {r0, r1}
 8000c68:	801a      	strh	r2, [r3, #0]
 8000c6a:	3302      	adds	r3, #2
 8000c6c:	0c12      	lsrs	r2, r2, #16
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	e03e      	b.n	8000cf0 <main+0xfc>
		}
		else {
			// Combine the bytes
			val = ((int16_t)buf[0]<<6) | (buf[1] >> 2); //HERE
 8000c72:	783b      	ldrb	r3, [r7, #0]
 8000c74:	019b      	lsls	r3, r3, #6
 8000c76:	b21a      	sxth	r2, r3
 8000c78:	787b      	ldrb	r3, [r7, #1]
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	4313      	orrs	r3, r2
 8000c82:	82bb      	strh	r3, [r7, #20]
			{
				val |= 0xF0000; // we put add 1111 infront so its read as negative values (2's complient)
			}

			// Convert to float temp value in Celsius
			temp_c = val * 0.03125;
 8000c84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fd7d 	bl	8000788 <__aeabi_i2d>
 8000c8e:	f04f 0200 	mov.w	r2, #0
 8000c92:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <main+0x12c>)
 8000c94:	f7ff fafc 	bl	8000290 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	f7ff fddc 	bl	800085c <__aeabi_d2f>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	613b      	str	r3, [r7, #16]


			// Convert temp to decimal format
			temp_c *= 100;
 8000ca8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cac:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000d24 <main+0x130>
 8000cb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb4:	edc7 7a04 	vstr	s15, [r7, #16]
			sprintf((char*)buf, "%u.%02u C\r\n", ((unsigned int)temp_c / 100), ((unsigned int)temp_c % 100));
 8000cb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cc0:	ee17 2a90 	vmov	r2, s15
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <main+0x134>)
 8000cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8000cca:	095a      	lsrs	r2, r3, #5
 8000ccc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cd4:	ee17 1a90 	vmov	r1, s15
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <main+0x134>)
 8000cda:	fba3 0301 	umull	r0, r3, r3, r1
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2064      	movs	r0, #100	; 0x64
 8000ce2:	fb00 f303 	mul.w	r3, r0, r3
 8000ce6:	1acb      	subs	r3, r1, r3
 8000ce8:	4638      	mov	r0, r7
 8000cea:	4910      	ldr	r1, [pc, #64]	; (8000d2c <main+0x138>)
 8000cec:	f003 fa3a 	bl	8004164 <siprintf>
		}
	}

	// strcpy((char*)buf, "Hello!\r\n");
	// Send out buffer (tmp or error msg)
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fa74 	bl	80001e0 <strlen>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4639      	mov	r1, r7
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	480b      	ldr	r0, [pc, #44]	; (8000d30 <main+0x13c>)
 8000d04:	f002 fae1 	bl	80032ca <HAL_UART_Transmit>

	// Wait
	HAL_Delay(500);
 8000d08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d0c:	f000 fb20 	bl	8001350 <HAL_Delay>
	buf[0] = REG_TEMP;
 8000d10:	e77d      	b.n	8000c0e <main+0x1a>
 8000d12:	bf00      	nop
 8000d14:	20000098 	.word	0x20000098
 8000d18:	080049d8 	.word	0x080049d8
 8000d1c:	080049e4 	.word	0x080049e4
 8000d20:	3fa00000 	.word	0x3fa00000
 8000d24:	42c80000 	.word	0x42c80000
 8000d28:	51eb851f 	.word	0x51eb851f
 8000d2c:	080049f0 	.word	0x080049f0
 8000d30:	200000ec 	.word	0x200000ec

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b094      	sub	sp, #80	; 0x50
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0320 	add.w	r3, r7, #32
 8000d3e:	2230      	movs	r2, #48	; 0x30
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f003 fa06 	bl	8004154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	4a27      	ldr	r2, [pc, #156]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d66:	6413      	str	r3, [r2, #64]	; 0x40
 8000d68:	4b25      	ldr	r3, [pc, #148]	; (8000e00 <SystemClock_Config+0xcc>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <SystemClock_Config+0xd0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d90:	2302      	movs	r3, #2
 8000d92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d94:	2301      	movs	r3, #1
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d98:	2310      	movs	r3, #16
 8000d9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000da4:	2310      	movs	r3, #16
 8000da6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000da8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dae:	2304      	movs	r3, #4
 8000db0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000db2:	2304      	movs	r3, #4
 8000db4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f001 fdc4 	bl	8002948 <HAL_RCC_OscConfig>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dc6:	f000 f8e5 	bl	8000f94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dca:	230f      	movs	r3, #15
 8000dcc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2102      	movs	r1, #2
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 f826 	bl	8002e38 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000df2:	f000 f8cf 	bl	8000f94 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3750      	adds	r7, #80	; 0x50
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40007000 	.word	0x40007000

08000e08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <MX_I2C1_Init+0x54>)
 8000e10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e14:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <MX_I2C1_Init+0x58>)
 8000e16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_I2C1_Init+0x50>)
 8000e46:	f000 fde9 	bl	8001a1c <HAL_I2C_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e50:	f000 f8a0 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000098 	.word	0x20000098
 8000e5c:	40005400 	.word	0x40005400
 8000e60:	000186a0 	.word	0x000186a0

08000e64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e6a:	4a12      	ldr	r2, [pc, #72]	; (8000eb4 <MX_USART2_UART_Init+0x50>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	f002 f9c8 	bl	8003230 <HAL_UART_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ea6:	f000 f875 	bl	8000f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000ec 	.word	0x200000ec
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a2c      	ldr	r2, [pc, #176]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b1f      	ldr	r3, [pc, #124]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a1e      	ldr	r2, [pc, #120]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_GPIO_Init+0xd0>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2120      	movs	r1, #32
 8000f42:	4812      	ldr	r0, [pc, #72]	; (8000f8c <MX_GPIO_Init+0xd4>)
 8000f44:	f000 fd50 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f4e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <MX_GPIO_Init+0xd8>)
 8000f60:	f000 fbbe 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f64:	2320      	movs	r3, #32
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0314 	add.w	r3, r7, #20
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_GPIO_Init+0xd4>)
 8000f7c:	f000 fbb0 	bl	80016e0 <HAL_GPIO_Init>

}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	; 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020800 	.word	0x40020800

08000f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <Error_Handler+0x8>
	...

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_MspInit+0x4c>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_MspInit+0x4c>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_MspInit+0x4c>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_MspInit+0x4c>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fde:	2007      	movs	r0, #7
 8000fe0:	f000 faaa 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_I2C_MspInit+0x84>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d12c      	bne.n	800106c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_I2C_MspInit+0x88>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a17      	ldr	r2, [pc, #92]	; (8001078 <HAL_I2C_MspInit+0x88>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_I2C_MspInit+0x88>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800102e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001034:	2312      	movs	r3, #18
 8001036:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001040:	2304      	movs	r3, #4
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	4619      	mov	r1, r3
 800104a:	480c      	ldr	r0, [pc, #48]	; (800107c <HAL_I2C_MspInit+0x8c>)
 800104c:	f000 fb48 	bl	80016e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_I2C_MspInit+0x88>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_I2C_MspInit+0x88>)
 800105a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_I2C_MspInit+0x88>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	; 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40005400 	.word	0x40005400
 8001078:	40023800 	.word	0x40023800
 800107c:	40020400 	.word	0x40020400

08001080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <HAL_UART_MspInit+0x94>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d133      	bne.n	800110a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <HAL_UART_MspInit+0x98>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_UART_MspInit+0x98>)
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_UART_MspInit+0x98>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_UART_MspInit+0x98>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <HAL_UART_MspInit+0x98>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_UART_MspInit+0x98>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010da:	230c      	movs	r3, #12
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e6:	2303      	movs	r3, #3
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010ea:	2307      	movs	r3, #7
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <HAL_UART_MspInit+0x9c>)
 80010f6:	f000 faf3 	bl	80016e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2026      	movs	r0, #38	; 0x26
 8001100:	f000 fa25 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001104:	2026      	movs	r0, #38	; 0x26
 8001106:	f000 fa3e 	bl	8001586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	; 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40004400 	.word	0x40004400
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 f8d0 	bl	8001310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <USART2_IRQHandler+0x10>)
 800117a:	f002 f939 	bl	80033f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200000ec 	.word	0x200000ec

08001188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001190:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <_sbrk+0x5c>)
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <_sbrk+0x60>)
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d102      	bne.n	80011aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <_sbrk+0x64>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <_sbrk+0x68>)
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <_sbrk+0x64>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4413      	add	r3, r2
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d207      	bcs.n	80011c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011b8:	f002 ffa2 	bl	8004100 <__errno>
 80011bc:	4603      	mov	r3, r0
 80011be:	220c      	movs	r2, #12
 80011c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c2:	f04f 33ff 	mov.w	r3, #4294967295
 80011c6:	e009      	b.n	80011dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <_sbrk+0x64>)
 80011d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011da:	68fb      	ldr	r3, [r7, #12]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20020000 	.word	0x20020000
 80011e8:	00000400 	.word	0x00000400
 80011ec:	2000008c 	.word	0x2000008c
 80011f0:	20000148 	.word	0x20000148

080011f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800121e:	490e      	ldr	r1, [pc, #56]	; (8001258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001220:	4a0e      	ldr	r2, [pc, #56]	; (800125c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001234:	4c0b      	ldr	r4, [pc, #44]	; (8001264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001242:	f7ff ffd7 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f002 ff61 	bl	800410c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f7ff fcd3 	bl	8000bf4 <main>
  bx  lr    
 800124e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800125c:	08004a58 	.word	0x08004a58
  ldr r2, =_sbss
 8001260:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001264:	20000144 	.word	0x20000144

08001268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_Init+0x40>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_Init+0x40>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_Init+0x40>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 f94f 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	2000      	movs	r0, #0
 800129c:	f000 f808 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fe7e 	bl	8000fa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f967 	bl	80015a2 <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 f92f 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000000 	.word	0x20000000
 8001308:	20000008 	.word	0x20000008
 800130c:	20000004 	.word	0x20000004

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000008 	.word	0x20000008
 8001334:	20000130 	.word	0x20000130

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000130 	.word	0x20000130

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff ffee 	bl	8001338 <HAL_GetTick>
 800135c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001376:	bf00      	nop
 8001378:	f7ff ffde 	bl	8001338 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	60d3      	str	r3, [r2, #12]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4907      	ldr	r1, [pc, #28]	; (8001434 <__NVIC_EnableIRQ+0x38>)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	; (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f7ff ff8e 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff29 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff3e 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff8e 	bl	800148c <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5d 	bl	8001438 <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ff31 	bl	80013fc <__NVIC_EnableIRQ>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff ffa2 	bl	80014f4 <SysTick_Config>
 80015b0:	4603      	mov	r3, r0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b084      	sub	sp, #16
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015c8:	f7ff feb6 	bl	8001338 <HAL_GetTick>
 80015cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d008      	beq.n	80015ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e052      	b.n	8001692 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0216 	bic.w	r2, r2, #22
 80015fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800160a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d103      	bne.n	800161c <HAL_DMA_Abort+0x62>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0208 	bic.w	r2, r2, #8
 800162a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0201 	bic.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800163c:	e013      	b.n	8001666 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800163e:	f7ff fe7b 	bl	8001338 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b05      	cmp	r3, #5
 800164a:	d90c      	bls.n	8001666 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2220      	movs	r2, #32
 8001650:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2203      	movs	r2, #3
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e015      	b.n	8001692 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e4      	bne.n	800163e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	223f      	movs	r2, #63	; 0x3f
 800167a:	409a      	lsls	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d004      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e00c      	b.n	80016d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2205      	movs	r2, #5
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e159      	b.n	80019b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8148 	bne.w	80019aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d005      	beq.n	8001732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172e:	2b02      	cmp	r3, #2
 8001730:	d130      	bne.n	8001794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001768:	2201      	movs	r2, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 0201 	and.w	r2, r3, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b03      	cmp	r3, #3
 800179e:	d017      	beq.n	80017d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d123      	bne.n	8001824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	69b9      	ldr	r1, [r7, #24]
 8001820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0203 	and.w	r2, r3, #3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a2 	beq.w	80019aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a56      	ldr	r2, [pc, #344]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001882:	4a52      	ldr	r2, [pc, #328]	; (80019cc <HAL_GPIO_Init+0x2ec>)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a49      	ldr	r2, [pc, #292]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_Init+0x202>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <HAL_GPIO_Init+0x2f4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0x1fe>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a47      	ldr	r2, [pc, #284]	; (80019d8 <HAL_GPIO_Init+0x2f8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_Init+0x1fa>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a46      	ldr	r2, [pc, #280]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x1f6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a45      	ldr	r2, [pc, #276]	; (80019e0 <HAL_GPIO_Init+0x300>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_Init+0x1f2>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e008      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018e2:	2300      	movs	r3, #0
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f002 0203 	and.w	r2, r2, #3
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f4:	4935      	ldr	r1, [pc, #212]	; (80019cc <HAL_GPIO_Init+0x2ec>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001902:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001926:	4a2f      	ldr	r2, [pc, #188]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <HAL_GPIO_Init+0x304>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001950:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197a:	4a1a      	ldr	r2, [pc, #104]	; (80019e4 <HAL_GPIO_Init+0x304>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a4:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	f67f aea2 	bls.w	80016fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40013c00 	.word	0x40013c00

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a04:	e003      	b.n	8001a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	619a      	str	r2, [r3, #24]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
	...

08001a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e12b      	b.n	8001c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fad4 	bl	8000ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2224      	movs	r2, #36	; 0x24
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a80:	f001 fbae 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8001a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a81      	ldr	r2, [pc, #516]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d807      	bhi.n	8001aa0 <HAL_I2C_Init+0x84>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4a80      	ldr	r2, [pc, #512]	; (8001c94 <HAL_I2C_Init+0x278>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	bf94      	ite	ls
 8001a98:	2301      	movls	r3, #1
 8001a9a:	2300      	movhi	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e006      	b.n	8001aae <HAL_I2C_Init+0x92>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a7d      	ldr	r2, [pc, #500]	; (8001c98 <HAL_I2C_Init+0x27c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	bf94      	ite	ls
 8001aa8:	2301      	movls	r3, #1
 8001aaa:	2300      	movhi	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0e7      	b.n	8001c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a78      	ldr	r2, [pc, #480]	; (8001c9c <HAL_I2C_Init+0x280>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9b      	lsrs	r3, r3, #18
 8001ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a6a      	ldr	r2, [pc, #424]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d802      	bhi.n	8001af0 <HAL_I2C_Init+0xd4>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	3301      	adds	r3, #1
 8001aee:	e009      	b.n	8001b04 <HAL_I2C_Init+0xe8>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	4a69      	ldr	r2, [pc, #420]	; (8001ca0 <HAL_I2C_Init+0x284>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	3301      	adds	r3, #1
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	495c      	ldr	r1, [pc, #368]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001b20:	428b      	cmp	r3, r1
 8001b22:	d819      	bhi.n	8001b58 <HAL_I2C_Init+0x13c>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e59      	subs	r1, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b32:	1c59      	adds	r1, r3, #1
 8001b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b38:	400b      	ands	r3, r1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <HAL_I2C_Init+0x138>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1e59      	subs	r1, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b52:	e051      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001b54:	2304      	movs	r3, #4
 8001b56:	e04f      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d111      	bne.n	8001b84 <HAL_I2C_Init+0x168>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1e58      	subs	r0, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	440b      	add	r3, r1
 8001b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	e012      	b.n	8001baa <HAL_I2C_Init+0x18e>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	0099      	lsls	r1, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Init+0x196>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e022      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_I2C_Init+0x1bc>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1e58      	subs	r0, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6859      	ldr	r1, [r3, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	440b      	add	r3, r1
 8001bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd6:	e00f      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1e58      	subs	r0, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	0099      	lsls	r1, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	6809      	ldr	r1, [r1, #0]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6911      	ldr	r1, [r2, #16]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68d2      	ldr	r2, [r2, #12]
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	000186a0 	.word	0x000186a0
 8001c94:	001e847f 	.word	0x001e847f
 8001c98:	003d08ff 	.word	0x003d08ff
 8001c9c:	431bde83 	.word	0x431bde83
 8001ca0:	10624dd3 	.word	0x10624dd3

08001ca4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	817b      	strh	r3, [r7, #10]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff fb3e 	bl	8001338 <HAL_GetTick>
 8001cbc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	f040 80e0 	bne.w	8001e8c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2319      	movs	r3, #25
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	4970      	ldr	r1, [pc, #448]	; (8001e98 <HAL_I2C_Master_Transmit+0x1f4>)
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 fc58 	bl	800258c <I2C_WaitOnFlagUntilTimeout>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e0d3      	b.n	8001e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_I2C_Master_Transmit+0x50>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e0cc      	b.n	8001e8e <HAL_I2C_Master_Transmit+0x1ea>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d007      	beq.n	8001d1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f042 0201 	orr.w	r2, r2, #1
 8001d18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2221      	movs	r2, #33	; 0x21
 8001d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2210      	movs	r2, #16
 8001d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	893a      	ldrh	r2, [r7, #8]
 8001d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4a50      	ldr	r2, [pc, #320]	; (8001e9c <HAL_I2C_Master_Transmit+0x1f8>)
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d5c:	8979      	ldrh	r1, [r7, #10]
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	6a3a      	ldr	r2, [r7, #32]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 fac2 	bl	80022ec <I2C_MasterRequestWrite>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e08d      	b.n	8001e8e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d72:	2300      	movs	r3, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d88:	e066      	b.n	8001e58 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	6a39      	ldr	r1, [r7, #32]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fcd2 	bl	8002738 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00d      	beq.n	8001db6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d107      	bne.n	8001db2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e06b      	b.n	8001e8e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dde:	3b01      	subs	r3, #1
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d11b      	bne.n	8001e2c <HAL_I2C_Master_Transmit+0x188>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d017      	beq.n	8001e2c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	6a39      	ldr	r1, [r7, #32]
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 fcc2 	bl	80027ba <I2C_WaitOnBTFFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00d      	beq.n	8001e58 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d107      	bne.n	8001e54 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e52:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e01a      	b.n	8001e8e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d194      	bne.n	8001d8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2220      	movs	r2, #32
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e8c:	2302      	movs	r3, #2
  }
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	00100002 	.word	0x00100002
 8001e9c:	ffff0000 	.word	0xffff0000

08001ea0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	; 0x30
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	460b      	mov	r3, r1
 8001eae:	817b      	strh	r3, [r7, #10]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff fa40 	bl	8001338 <HAL_GetTick>
 8001eb8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	f040 820b 	bne.w	80022de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2319      	movs	r3, #25
 8001ece:	2201      	movs	r2, #1
 8001ed0:	497c      	ldr	r1, [pc, #496]	; (80020c4 <HAL_I2C_Master_Receive+0x224>)
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fb5a 	bl	800258c <I2C_WaitOnFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e1fe      	b.n	80022e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_I2C_Master_Receive+0x50>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e1f7      	b.n	80022e0 <HAL_I2C_Master_Receive+0x440>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d007      	beq.n	8001f16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2222      	movs	r2, #34	; 0x22
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2210      	movs	r2, #16
 8001f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	893a      	ldrh	r2, [r7, #8]
 8001f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4a5c      	ldr	r2, [pc, #368]	; (80020c8 <HAL_I2C_Master_Receive+0x228>)
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f58:	8979      	ldrh	r1, [r7, #10]
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fa46 	bl	80023f0 <I2C_MasterRequestRead>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e1b8      	b.n	80022e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d113      	bne.n	8001f9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
 8001f80:	623b      	str	r3, [r7, #32]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	623b      	str	r3, [r7, #32]
 8001f8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	e18c      	b.n	80022b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d11b      	bne.n	8001fde <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	61fb      	str	r3, [r7, #28]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e16c      	b.n	80022b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d11b      	bne.n	800201e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002004:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	e14c      	b.n	80022b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800202c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002044:	e138      	b.n	80022b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204a:	2b03      	cmp	r3, #3
 800204c:	f200 80f1 	bhi.w	8002232 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	2b01      	cmp	r3, #1
 8002056:	d123      	bne.n	80020a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 fbed 	bl	800283c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e139      	b.n	80022e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	691a      	ldr	r2, [r3, #16]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002094:	b29b      	uxth	r3, r3
 8002096:	3b01      	subs	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800209e:	e10b      	b.n	80022b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d14e      	bne.n	8002146 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ae:	2200      	movs	r2, #0
 80020b0:	4906      	ldr	r1, [pc, #24]	; (80020cc <HAL_I2C_Master_Receive+0x22c>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 fa6a 	bl	800258c <I2C_WaitOnFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d008      	beq.n	80020d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e10e      	b.n	80022e0 <HAL_I2C_Master_Receive+0x440>
 80020c2:	bf00      	nop
 80020c4:	00100002 	.word	0x00100002
 80020c8:	ffff0000 	.word	0xffff0000
 80020cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691a      	ldr	r2, [r3, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002144:	e0b8      	b.n	80022b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214c:	2200      	movs	r2, #0
 800214e:	4966      	ldr	r1, [pc, #408]	; (80022e8 <HAL_I2C_Master_Receive+0x448>)
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fa1b 	bl	800258c <I2C_WaitOnFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0bf      	b.n	80022e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800216e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	3b01      	subs	r3, #1
 800218e:	b29a      	uxth	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	3b01      	subs	r3, #1
 800219c:	b29a      	uxth	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a8:	2200      	movs	r2, #0
 80021aa:	494f      	ldr	r1, [pc, #316]	; (80022e8 <HAL_I2C_Master_Receive+0x448>)
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 f9ed 	bl	800258c <I2C_WaitOnFlagUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e091      	b.n	80022e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221a:	3b01      	subs	r3, #1
 800221c:	b29a      	uxth	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b01      	subs	r3, #1
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002230:	e042      	b.n	80022b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002234:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fb00 	bl	800283c <I2C_WaitOnRXNEFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e04c      	b.n	80022e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	3b01      	subs	r3, #1
 8002272:	b29a      	uxth	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b04      	cmp	r3, #4
 8002284:	d118      	bne.n	80022b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f47f aec2 	bne.w	8002046 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2220      	movs	r2, #32
 80022c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	e000      	b.n	80022e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80022de:	2302      	movs	r3, #2
  }
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3728      	adds	r7, #40	; 0x28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	00010004 	.word	0x00010004

080022ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	460b      	mov	r3, r1
 80022fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d006      	beq.n	8002316 <I2C_MasterRequestWrite+0x2a>
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d003      	beq.n	8002316 <I2C_MasterRequestWrite+0x2a>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002314:	d108      	bne.n	8002328 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	e00b      	b.n	8002340 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	2b12      	cmp	r3, #18
 800232e:	d107      	bne.n	8002340 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800233e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f91d 	bl	800258c <I2C_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00d      	beq.n	8002374 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002366:	d103      	bne.n	8002370 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800236e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e035      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800237c:	d108      	bne.n	8002390 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800237e:	897b      	ldrh	r3, [r7, #10]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	e01b      	b.n	80023c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002390:	897b      	ldrh	r3, [r7, #10]
 8002392:	11db      	asrs	r3, r3, #7
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 0306 	and.w	r3, r3, #6
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f063 030f 	orn	r3, r3, #15
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	490e      	ldr	r1, [pc, #56]	; (80023e8 <I2C_MasterRequestWrite+0xfc>)
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f943 	bl	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e010      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023be:	897b      	ldrh	r3, [r7, #10]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	4907      	ldr	r1, [pc, #28]	; (80023ec <I2C_MasterRequestWrite+0x100>)
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f933 	bl	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	00010008 	.word	0x00010008
 80023ec:	00010002 	.word	0x00010002

080023f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	460b      	mov	r3, r1
 80023fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002414:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2b08      	cmp	r3, #8
 800241a:	d006      	beq.n	800242a <I2C_MasterRequestRead+0x3a>
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d003      	beq.n	800242a <I2C_MasterRequestRead+0x3a>
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002428:	d108      	bne.n	800243c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	e00b      	b.n	8002454 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	2b11      	cmp	r3, #17
 8002442:	d107      	bne.n	8002454 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002452:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f893 	bl	800258c <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00d      	beq.n	8002488 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247a:	d103      	bne.n	8002484 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e079      	b.n	800257c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002490:	d108      	bne.n	80024a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002492:	897b      	ldrh	r3, [r7, #10]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	b2da      	uxtb	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	611a      	str	r2, [r3, #16]
 80024a2:	e05f      	b.n	8002564 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024a4:	897b      	ldrh	r3, [r7, #10]
 80024a6:	11db      	asrs	r3, r3, #7
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f003 0306 	and.w	r3, r3, #6
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f063 030f 	orn	r3, r3, #15
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4930      	ldr	r1, [pc, #192]	; (8002584 <I2C_MasterRequestRead+0x194>)
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f8b9 	bl	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e054      	b.n	800257c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024d2:	897b      	ldrh	r3, [r7, #10]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4929      	ldr	r1, [pc, #164]	; (8002588 <I2C_MasterRequestRead+0x198>)
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f8a9 	bl	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e044      	b.n	800257c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002516:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f831 	bl	800258c <I2C_WaitOnFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00d      	beq.n	800254c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253e:	d103      	bne.n	8002548 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002546:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e017      	b.n	800257c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800254c:	897b      	ldrh	r3, [r7, #10]
 800254e:	11db      	asrs	r3, r3, #7
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f003 0306 	and.w	r3, r3, #6
 8002556:	b2db      	uxtb	r3, r3
 8002558:	f063 030e 	orn	r3, r3, #14
 800255c:	b2da      	uxtb	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	4907      	ldr	r1, [pc, #28]	; (8002588 <I2C_MasterRequestRead+0x198>)
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f865 	bl	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	00010008 	.word	0x00010008
 8002588:	00010002 	.word	0x00010002

0800258c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800259c:	e025      	b.n	80025ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d021      	beq.n	80025ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025a6:	f7fe fec7 	bl	8001338 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d302      	bcc.n	80025bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d116      	bne.n	80025ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2220      	movs	r2, #32
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f043 0220 	orr.w	r2, r3, #32
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e023      	b.n	8002632 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d10d      	bne.n	8002610 <I2C_WaitOnFlagUntilTimeout+0x84>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4013      	ands	r3, r2
 8002600:	b29b      	uxth	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	bf0c      	ite	eq
 8002606:	2301      	moveq	r3, #1
 8002608:	2300      	movne	r3, #0
 800260a:	b2db      	uxtb	r3, r3
 800260c:	461a      	mov	r2, r3
 800260e:	e00c      	b.n	800262a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4013      	ands	r3, r2
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	bf0c      	ite	eq
 8002622:	2301      	moveq	r3, #1
 8002624:	2300      	movne	r3, #0
 8002626:	b2db      	uxtb	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	429a      	cmp	r2, r3
 800262e:	d0b6      	beq.n	800259e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b084      	sub	sp, #16
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002648:	e051      	b.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002658:	d123      	bne.n	80026a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002668:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002672:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f043 0204 	orr.w	r2, r3, #4
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e046      	b.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d021      	beq.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026aa:	f7fe fe45 	bl	8001338 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d302      	bcc.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d116      	bne.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f043 0220 	orr.w	r2, r3, #32
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e020      	b.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d10c      	bne.n	8002712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	43da      	mvns	r2, r3
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4013      	ands	r3, r2
 8002704:	b29b      	uxth	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	bf14      	ite	ne
 800270a:	2301      	movne	r3, #1
 800270c:	2300      	moveq	r3, #0
 800270e:	b2db      	uxtb	r3, r3
 8002710:	e00b      	b.n	800272a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	43da      	mvns	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	4013      	ands	r3, r2
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf14      	ite	ne
 8002724:	2301      	movne	r3, #1
 8002726:	2300      	moveq	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d18d      	bne.n	800264a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002744:	e02d      	b.n	80027a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f8ce 	bl	80028e8 <I2C_IsAcknowledgeFailed>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e02d      	b.n	80027b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d021      	beq.n	80027a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7fe fdeb 	bl	8001338 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d116      	bne.n	80027a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f043 0220 	orr.w	r2, r3, #32
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e007      	b.n	80027b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ac:	2b80      	cmp	r3, #128	; 0x80
 80027ae:	d1ca      	bne.n	8002746 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b084      	sub	sp, #16
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027c6:	e02d      	b.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f88d 	bl	80028e8 <I2C_IsAcknowledgeFailed>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e02d      	b.n	8002834 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027de:	d021      	beq.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e0:	f7fe fdaa 	bl	8001338 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d302      	bcc.n	80027f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d116      	bne.n	8002824 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2220      	movs	r2, #32
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f043 0220 	orr.w	r2, r3, #32
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e007      	b.n	8002834 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b04      	cmp	r3, #4
 8002830:	d1ca      	bne.n	80027c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002848:	e042      	b.n	80028d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b10      	cmp	r3, #16
 8002856:	d119      	bne.n	800288c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0210 	mvn.w	r2, #16
 8002860:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e029      	b.n	80028e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288c:	f7fe fd54 	bl	8001338 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	429a      	cmp	r2, r3
 800289a:	d302      	bcc.n	80028a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d116      	bne.n	80028d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	f043 0220 	orr.w	r2, r3, #32
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e007      	b.n	80028e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028da:	2b40      	cmp	r3, #64	; 0x40
 80028dc:	d1b5      	bne.n	800284a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fe:	d11b      	bne.n	8002938 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002908:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	f043 0204 	orr.w	r2, r3, #4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
	...

08002948 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e264      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d075      	beq.n	8002a52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002966:	4ba3      	ldr	r3, [pc, #652]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b04      	cmp	r3, #4
 8002970:	d00c      	beq.n	800298c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002972:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800297a:	2b08      	cmp	r3, #8
 800297c:	d112      	bne.n	80029a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297e:	4b9d      	ldr	r3, [pc, #628]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298a:	d10b      	bne.n	80029a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298c:	4b99      	ldr	r3, [pc, #612]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d05b      	beq.n	8002a50 <HAL_RCC_OscConfig+0x108>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d157      	bne.n	8002a50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e23f      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ac:	d106      	bne.n	80029bc <HAL_RCC_OscConfig+0x74>
 80029ae:	4b91      	ldr	r3, [pc, #580]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a90      	ldr	r2, [pc, #576]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e01d      	b.n	80029f8 <HAL_RCC_OscConfig+0xb0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x98>
 80029c6:	4b8b      	ldr	r3, [pc, #556]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a8a      	ldr	r2, [pc, #552]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b88      	ldr	r3, [pc, #544]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a87      	ldr	r2, [pc, #540]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0xb0>
 80029e0:	4b84      	ldr	r3, [pc, #528]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a83      	ldr	r2, [pc, #524]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b81      	ldr	r3, [pc, #516]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a80      	ldr	r2, [pc, #512]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe fc9a 	bl	8001338 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a08:	f7fe fc96 	bl	8001338 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e204      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b76      	ldr	r3, [pc, #472]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0xc0>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe fc86 	bl	8001338 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a30:	f7fe fc82 	bl	8001338 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e1f0      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	4b6c      	ldr	r3, [pc, #432]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0xe8>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d063      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a5e:	4b65      	ldr	r3, [pc, #404]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6a:	4b62      	ldr	r3, [pc, #392]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d11c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a76:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d116      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_RCC_OscConfig+0x152>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e1c4      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4952      	ldr	r1, [pc, #328]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	e03a      	b.n	8002b26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab8:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <HAL_RCC_OscConfig+0x2b0>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fc3b 	bl	8001338 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fc37 	bl	8001338 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1a5      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4940      	ldr	r1, [pc, #256]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <HAL_RCC_OscConfig+0x2b0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fc1a 	bl	8001338 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b08:	f7fe fc16 	bl	8001338 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e184      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d030      	beq.n	8002b94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d016      	beq.n	8002b68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <HAL_RCC_OscConfig+0x2b4>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7fe fbfa 	bl	8001338 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b48:	f7fe fbf6 	bl	8001338 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e164      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x200>
 8002b66:	e015      	b.n	8002b94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b68:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCC_OscConfig+0x2b4>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fbe3 	bl	8001338 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b76:	f7fe fbdf 	bl	8001338 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e14d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a0 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_OscConfig+0x2b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d121      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCC_OscConfig+0x2b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <HAL_RCC_OscConfig+0x2b8>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bea:	f7fe fba5 	bl	8001338 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	e011      	b.n	8002c16 <HAL_RCC_OscConfig+0x2ce>
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	42470000 	.word	0x42470000
 8002bfc:	42470e80 	.word	0x42470e80
 8002c00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c04:	f7fe fb98 	bl	8001338 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e106      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <HAL_RCC_OscConfig+0x4e4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d106      	bne.n	8002c38 <HAL_RCC_OscConfig+0x2f0>
 8002c2a:	4b81      	ldr	r3, [pc, #516]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4a80      	ldr	r2, [pc, #512]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70
 8002c36:	e01c      	b.n	8002c72 <HAL_RCC_OscConfig+0x32a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCC_OscConfig+0x312>
 8002c40:	4b7b      	ldr	r3, [pc, #492]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a7a      	ldr	r2, [pc, #488]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	4b78      	ldr	r3, [pc, #480]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	4a77      	ldr	r2, [pc, #476]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
 8002c58:	e00b      	b.n	8002c72 <HAL_RCC_OscConfig+0x32a>
 8002c5a:	4b75      	ldr	r3, [pc, #468]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a74      	ldr	r2, [pc, #464]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
 8002c66:	4b72      	ldr	r3, [pc, #456]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a71      	ldr	r2, [pc, #452]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d015      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe fb5d 	bl	8001338 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe fb59 	bl	8001338 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0c5      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	4b65      	ldr	r3, [pc, #404]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ee      	beq.n	8002c82 <HAL_RCC_OscConfig+0x33a>
 8002ca4:	e014      	b.n	8002cd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe fb47 	bl	8001338 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe fb43 	bl	8001338 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0af      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ee      	bne.n	8002cae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d105      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd6:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	4a55      	ldr	r2, [pc, #340]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 809b 	beq.w	8002e22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cec:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d05c      	beq.n	8002db2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d141      	bne.n	8002d84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <HAL_RCC_OscConfig+0x4ec>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7fe fb17 	bl	8001338 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7fe fb13 	bl	8001338 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e081      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d20:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f0      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	019b      	lsls	r3, r3, #6
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	3b01      	subs	r3, #1
 8002d46:	041b      	lsls	r3, r3, #16
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	4937      	ldr	r1, [pc, #220]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d56:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <HAL_RCC_OscConfig+0x4ec>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe faec 	bl	8001338 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe fae8 	bl	8001338 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e056      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d76:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x41c>
 8002d82:	e04e      	b.n	8002e22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d84:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe fad5 	bl	8001338 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe fad1 	bl	8001338 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e03f      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da4:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x44a>
 8002db0:	e037      	b.n	8002e22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e032      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d028      	beq.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d121      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d11a      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d111      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	3b01      	subs	r3, #1
 8002e08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40007000 	.word	0x40007000
 8002e30:	40023800 	.word	0x40023800
 8002e34:	42470060 	.word	0x42470060

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0cc      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b68      	ldr	r3, [pc, #416]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d90c      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d044      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d119      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef6:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e067      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f16:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f023 0203 	bic.w	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4934      	ldr	r1, [pc, #208]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f28:	f7fe fa06 	bl	8001338 <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f30:	f7fe fa02 	bl	8001338 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e04f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 020c 	and.w	r2, r3, #12
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1eb      	bne.n	8002f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d20c      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 f821 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490a      	ldr	r1, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe f966 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023c00 	.word	0x40023c00
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	080049fc 	.word	0x080049fc
 8002ffc:	20000000 	.word	0x20000000
 8003000:	20000004 	.word	0x20000004

08003004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	2300      	movs	r3, #0
 8003016:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800301c:	4b67      	ldr	r3, [pc, #412]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b08      	cmp	r3, #8
 8003026:	d00d      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x40>
 8003028:	2b08      	cmp	r3, #8
 800302a:	f200 80bd 	bhi.w	80031a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x34>
 8003032:	2b04      	cmp	r3, #4
 8003034:	d003      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x3a>
 8003036:	e0b7      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003038:	4b61      	ldr	r3, [pc, #388]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800303a:	60bb      	str	r3, [r7, #8]
       break;
 800303c:	e0b7      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800303e:	4b61      	ldr	r3, [pc, #388]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003040:	60bb      	str	r3, [r7, #8]
      break;
 8003042:	e0b4      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003044:	4b5d      	ldr	r3, [pc, #372]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800304c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800304e:	4b5b      	ldr	r3, [pc, #364]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d04d      	beq.n	80030f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305a:	4b58      	ldr	r3, [pc, #352]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	099b      	lsrs	r3, r3, #6
 8003060:	461a      	mov	r2, r3
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	f240 10ff 	movw	r0, #511	; 0x1ff
 800306a:	f04f 0100 	mov.w	r1, #0
 800306e:	ea02 0800 	and.w	r8, r2, r0
 8003072:	ea03 0901 	and.w	r9, r3, r1
 8003076:	4640      	mov	r0, r8
 8003078:	4649      	mov	r1, r9
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	014b      	lsls	r3, r1, #5
 8003084:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003088:	0142      	lsls	r2, r0, #5
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	ebb0 0008 	subs.w	r0, r0, r8
 8003092:	eb61 0109 	sbc.w	r1, r1, r9
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	018b      	lsls	r3, r1, #6
 80030a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030a4:	0182      	lsls	r2, r0, #6
 80030a6:	1a12      	subs	r2, r2, r0
 80030a8:	eb63 0301 	sbc.w	r3, r3, r1
 80030ac:	f04f 0000 	mov.w	r0, #0
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	00d9      	lsls	r1, r3, #3
 80030b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ba:	00d0      	lsls	r0, r2, #3
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	eb12 0208 	adds.w	r2, r2, r8
 80030c4:	eb43 0309 	adc.w	r3, r3, r9
 80030c8:	f04f 0000 	mov.w	r0, #0
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	0259      	lsls	r1, r3, #9
 80030d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030d6:	0250      	lsls	r0, r2, #9
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	f7fd fc08 	bl	80008fc <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e04a      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f6:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	461a      	mov	r2, r3
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	ea02 0400 	and.w	r4, r2, r0
 800310e:	ea03 0501 	and.w	r5, r3, r1
 8003112:	4620      	mov	r0, r4
 8003114:	4629      	mov	r1, r5
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	014b      	lsls	r3, r1, #5
 8003120:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003124:	0142      	lsls	r2, r0, #5
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	1b00      	subs	r0, r0, r4
 800312c:	eb61 0105 	sbc.w	r1, r1, r5
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	018b      	lsls	r3, r1, #6
 800313a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800313e:	0182      	lsls	r2, r0, #6
 8003140:	1a12      	subs	r2, r2, r0
 8003142:	eb63 0301 	sbc.w	r3, r3, r1
 8003146:	f04f 0000 	mov.w	r0, #0
 800314a:	f04f 0100 	mov.w	r1, #0
 800314e:	00d9      	lsls	r1, r3, #3
 8003150:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003154:	00d0      	lsls	r0, r2, #3
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	1912      	adds	r2, r2, r4
 800315c:	eb45 0303 	adc.w	r3, r5, r3
 8003160:	f04f 0000 	mov.w	r0, #0
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	0299      	lsls	r1, r3, #10
 800316a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800316e:	0290      	lsls	r0, r2, #10
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	461a      	mov	r2, r3
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	f7fd fbbc 	bl	80008fc <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4613      	mov	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	3301      	adds	r3, #1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	60bb      	str	r3, [r7, #8]
      break;
 80031a6:	e002      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031aa:	60bb      	str	r3, [r7, #8]
      break;
 80031ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ae:	68bb      	ldr	r3, [r7, #8]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800
 80031c0:	00f42400 	.word	0x00f42400
 80031c4:	007a1200 	.word	0x007a1200

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000000 	.word	0x20000000

080031e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031e4:	f7ff fff0 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0a9b      	lsrs	r3, r3, #10
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4903      	ldr	r1, [pc, #12]	; (8003204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40023800 	.word	0x40023800
 8003204:	08004a0c 	.word	0x08004a0c

08003208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800320c:	f7ff ffdc 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0b5b      	lsrs	r3, r3, #13
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4903      	ldr	r1, [pc, #12]	; (800322c <HAL_RCC_GetPCLK2Freq+0x24>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	08004a0c 	.word	0x08004a0c

08003230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e03f      	b.n	80032c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7fd ff12 	bl	8001080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	; 0x24
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 fd7b 	bl	8003d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b08a      	sub	sp, #40	; 0x28
 80032ce:	af02      	add	r7, sp, #8
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d17c      	bne.n	80033e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_UART_Transmit+0x2c>
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e075      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_UART_Transmit+0x3e>
 8003304:	2302      	movs	r3, #2
 8003306:	e06e      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2221      	movs	r2, #33	; 0x21
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800331e:	f7fe f80b 	bl	8001338 <HAL_GetTick>
 8003322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003338:	d108      	bne.n	800334c <HAL_UART_Transmit+0x82>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d104      	bne.n	800334c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	e003      	b.n	8003354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800335c:	e02a      	b.n	80033b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 faf9 	bl	8003960 <UART_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e036      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800338c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	3302      	adds	r3, #2
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	e007      	b.n	80033a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3301      	adds	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1cf      	bne.n	800335e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2200      	movs	r2, #0
 80033c6:	2140      	movs	r1, #64	; 0x40
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fac9 	bl	8003960 <UART_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e006      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b0ba      	sub	sp, #232	; 0xe8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800341c:	2300      	movs	r3, #0
 800341e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800342e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	d009      	beq.n	8003456 <HAL_UART_IRQHandler+0x66>
 8003442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fbd3 	bl	8003bfa <UART_Receive_IT>
      return;
 8003454:	e256      	b.n	8003904 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003456:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80de 	beq.w	800361c <HAL_UART_IRQHandler+0x22c>
 8003460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800346c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003470:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 80d1 	beq.w	800361c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800347a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_UART_IRQHandler+0xae>
 8003486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800348a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_UART_IRQHandler+0xd2>
 80034aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f043 0202 	orr.w	r2, r3, #2
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <HAL_UART_IRQHandler+0xf6>
 80034ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d011      	beq.n	8003516 <HAL_UART_IRQHandler+0x126>
 80034f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f6:	f003 0320 	and.w	r3, r3, #32
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f043 0208 	orr.w	r2, r3, #8
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 81ed 	beq.w	80038fa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_UART_IRQHandler+0x14e>
 800352c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fb5e 	bl	8003bfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003548:	2b40      	cmp	r3, #64	; 0x40
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d103      	bne.n	800356a <HAL_UART_IRQHandler+0x17a>
 8003562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003566:	2b00      	cmp	r3, #0
 8003568:	d04f      	beq.n	800360a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fa66 	bl	8003a3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357a:	2b40      	cmp	r3, #64	; 0x40
 800357c:	d141      	bne.n	8003602 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3314      	adds	r3, #20
 8003584:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800358c:	e853 3f00 	ldrex	r3, [r3]
 8003590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800359c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3314      	adds	r3, #20
 80035a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035ba:	e841 2300 	strex	r3, r2, [r1]
 80035be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1d9      	bne.n	800357e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d013      	beq.n	80035fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	4a7d      	ldr	r2, [pc, #500]	; (80037cc <HAL_UART_IRQHandler+0x3dc>)
 80035d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe f85b 	bl	800169a <HAL_DMA_Abort_IT>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d016      	beq.n	8003618 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f4:	4610      	mov	r0, r2
 80035f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	e00e      	b.n	8003618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f99a 	bl	8003934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	e00a      	b.n	8003618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f996 	bl	8003934 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	e006      	b.n	8003618 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 f992 	bl	8003934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003616:	e170      	b.n	80038fa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003618:	bf00      	nop
    return;
 800361a:	e16e      	b.n	80038fa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	2b01      	cmp	r3, #1
 8003622:	f040 814a 	bne.w	80038ba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 8143 	beq.w	80038ba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 813c 	beq.w	80038ba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	f040 80b4 	bne.w	80037d0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003674:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8140 	beq.w	80038fe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003682:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003686:	429a      	cmp	r2, r3
 8003688:	f080 8139 	bcs.w	80038fe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003692:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369e:	f000 8088 	beq.w	80037b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	330c      	adds	r3, #12
 80036a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80036da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80036de:	e841 2300 	strex	r3, r2, [r1]
 80036e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80036e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1d9      	bne.n	80036a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	3314      	adds	r3, #20
 80036f4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80036fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3314      	adds	r3, #20
 800370e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003712:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003716:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003718:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800371a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e1      	bne.n	80036ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003732:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003734:	e853 3f00 	ldrex	r3, [r3]
 8003738:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800373a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800373c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	3314      	adds	r3, #20
 800374a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800374e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003750:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003754:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800375c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e3      	bne.n	800372a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	330c      	adds	r3, #12
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003782:	f023 0310 	bic.w	r3, r3, #16
 8003786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	330c      	adds	r3, #12
 8003790:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003794:	65ba      	str	r2, [r7, #88]	; 0x58
 8003796:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800379a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e3      	bne.n	8003770 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd ff04 	bl	80015ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	b29b      	uxth	r3, r3
 80037c0:	4619      	mov	r1, r3
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f8c0 	bl	8003948 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037c8:	e099      	b.n	80038fe <HAL_UART_IRQHandler+0x50e>
 80037ca:	bf00      	nop
 80037cc:	08003b03 	.word	0x08003b03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 808b 	beq.w	8003902 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80037ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8086 	beq.w	8003902 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	330c      	adds	r3, #12
 80037fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003800:	e853 3f00 	ldrex	r3, [r3]
 8003804:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003808:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800380c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	330c      	adds	r3, #12
 8003816:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800381a:	647a      	str	r2, [r7, #68]	; 0x44
 800381c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003820:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e3      	bne.n	80037f6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3314      	adds	r3, #20
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	623b      	str	r3, [r7, #32]
   return(result);
 800383e:	6a3b      	ldr	r3, [r7, #32]
 8003840:	f023 0301 	bic.w	r3, r3, #1
 8003844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3314      	adds	r3, #20
 800384e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003852:	633a      	str	r2, [r7, #48]	; 0x30
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e3      	bne.n	800382e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	60fb      	str	r3, [r7, #12]
   return(result);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0310 	bic.w	r3, r3, #16
 800388a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003898:	61fa      	str	r2, [r7, #28]
 800389a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	69b9      	ldr	r1, [r7, #24]
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	617b      	str	r3, [r7, #20]
   return(result);
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e3      	bne.n	8003874 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038b0:	4619      	mov	r1, r3
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f848 	bl	8003948 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038b8:	e023      	b.n	8003902 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d009      	beq.n	80038da <HAL_UART_IRQHandler+0x4ea>
 80038c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f929 	bl	8003b2a <UART_Transmit_IT>
    return;
 80038d8:	e014      	b.n	8003904 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00e      	beq.n	8003904 <HAL_UART_IRQHandler+0x514>
 80038e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f969 	bl	8003bca <UART_EndTransmit_IT>
    return;
 80038f8:	e004      	b.n	8003904 <HAL_UART_IRQHandler+0x514>
    return;
 80038fa:	bf00      	nop
 80038fc:	e002      	b.n	8003904 <HAL_UART_IRQHandler+0x514>
      return;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <HAL_UART_IRQHandler+0x514>
      return;
 8003902:	bf00      	nop
  }
}
 8003904:	37e8      	adds	r7, #232	; 0xe8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop

0800390c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b090      	sub	sp, #64	; 0x40
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	603b      	str	r3, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003970:	e050      	b.n	8003a14 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003978:	d04c      	beq.n	8003a14 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800397a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <UART_WaitOnFlagUntilTimeout+0x30>
 8003980:	f7fd fcda 	bl	8001338 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800398c:	429a      	cmp	r2, r3
 800398e:	d241      	bcs.n	8003a14 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039b0:	637a      	str	r2, [r7, #52]	; 0x34
 80039b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e5      	bne.n	8003990 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3314      	adds	r3, #20
 80039ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	613b      	str	r3, [r7, #16]
   return(result);
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f023 0301 	bic.w	r3, r3, #1
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	3314      	adds	r3, #20
 80039e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039e4:	623a      	str	r2, [r7, #32]
 80039e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	69f9      	ldr	r1, [r7, #28]
 80039ea:	6a3a      	ldr	r2, [r7, #32]
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e5      	bne.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e00f      	b.n	8003a34 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d09f      	beq.n	8003972 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3740      	adds	r7, #64	; 0x40
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b095      	sub	sp, #84	; 0x54
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a64:	643a      	str	r2, [r7, #64]	; 0x40
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e5      	bne.n	8003a44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3314      	adds	r3, #20
 8003a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3314      	adds	r3, #20
 8003a96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e5      	bne.n	8003a78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d119      	bne.n	8003ae8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f023 0310 	bic.w	r3, r3, #16
 8003aca:	647b      	str	r3, [r7, #68]	; 0x44
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ad4:	61ba      	str	r2, [r7, #24]
 8003ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	6979      	ldr	r1, [r7, #20]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e5      	bne.n	8003ab4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003af6:	bf00      	nop
 8003af8:	3754      	adds	r7, #84	; 0x54
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7ff ff09 	bl	8003934 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b21      	cmp	r3, #33	; 0x21
 8003b3c:	d13e      	bne.n	8003bbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b46:	d114      	bne.n	8003b72 <UART_Transmit_IT+0x48>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d110      	bne.n	8003b72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	1c9a      	adds	r2, r3, #2
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	621a      	str	r2, [r3, #32]
 8003b70:	e008      	b.n	8003b84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	1c59      	adds	r1, r3, #1
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6211      	str	r1, [r2, #32]
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4619      	mov	r1, r3
 8003b92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10f      	bne.n	8003bb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ba6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b082      	sub	sp, #8
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003be0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fe8e 	bl	800390c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b08c      	sub	sp, #48	; 0x30
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b22      	cmp	r3, #34	; 0x22
 8003c0c:	f040 80ab 	bne.w	8003d66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c18:	d117      	bne.n	8003c4a <UART_Receive_IT+0x50>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d113      	bne.n	8003c4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	1c9a      	adds	r2, r3, #2
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	629a      	str	r2, [r3, #40]	; 0x28
 8003c48:	e026      	b.n	8003c98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5c:	d007      	beq.n	8003c6e <UART_Receive_IT+0x74>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <UART_Receive_IT+0x82>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	e008      	b.n	8003c8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d15a      	bne.n	8003d62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68da      	ldr	r2, [r3, #12]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0220 	bic.w	r2, r2, #32
 8003cba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68da      	ldr	r2, [r3, #12]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	695a      	ldr	r2, [r3, #20]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d135      	bne.n	8003d58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	613b      	str	r3, [r7, #16]
   return(result);
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f023 0310 	bic.w	r3, r3, #16
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	330c      	adds	r3, #12
 8003d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d12:	623a      	str	r2, [r7, #32]
 8003d14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	69f9      	ldr	r1, [r7, #28]
 8003d18:	6a3a      	ldr	r2, [r7, #32]
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e5      	bne.n	8003cf2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d10a      	bne.n	8003d4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff fdf9 	bl	8003948 <HAL_UARTEx_RxEventCallback>
 8003d56:	e002      	b.n	8003d5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fde1 	bl	8003920 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e002      	b.n	8003d68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	e000      	b.n	8003d68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
  }
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3730      	adds	r7, #48	; 0x30
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d74:	b09f      	sub	sp, #124	; 0x7c
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d86:	68d9      	ldr	r1, [r3, #12]
 8003d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	ea40 0301 	orr.w	r3, r0, r1
 8003d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003db4:	f021 010c 	bic.w	r1, r1, #12
 8003db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dbe:	430b      	orrs	r3, r1
 8003dc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	6999      	ldr	r1, [r3, #24]
 8003dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	ea40 0301 	orr.w	r3, r0, r1
 8003dd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4bc5      	ldr	r3, [pc, #788]	; (80040f4 <UART_SetConfig+0x384>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d004      	beq.n	8003dee <UART_SetConfig+0x7e>
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4bc3      	ldr	r3, [pc, #780]	; (80040f8 <UART_SetConfig+0x388>)
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d103      	bne.n	8003df6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dee:	f7ff fa0b 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8003df2:	6778      	str	r0, [r7, #116]	; 0x74
 8003df4:	e002      	b.n	8003dfc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003df6:	f7ff f9f3 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8003dfa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e04:	f040 80b6 	bne.w	8003f74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0a:	461c      	mov	r4, r3
 8003e0c:	f04f 0500 	mov.w	r5, #0
 8003e10:	4622      	mov	r2, r4
 8003e12:	462b      	mov	r3, r5
 8003e14:	1891      	adds	r1, r2, r2
 8003e16:	6439      	str	r1, [r7, #64]	; 0x40
 8003e18:	415b      	adcs	r3, r3
 8003e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e20:	1912      	adds	r2, r2, r4
 8003e22:	eb45 0303 	adc.w	r3, r5, r3
 8003e26:	f04f 0000 	mov.w	r0, #0
 8003e2a:	f04f 0100 	mov.w	r1, #0
 8003e2e:	00d9      	lsls	r1, r3, #3
 8003e30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e34:	00d0      	lsls	r0, r2, #3
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	1911      	adds	r1, r2, r4
 8003e3c:	6639      	str	r1, [r7, #96]	; 0x60
 8003e3e:	416b      	adcs	r3, r5
 8003e40:	667b      	str	r3, [r7, #100]	; 0x64
 8003e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	461a      	mov	r2, r3
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	1891      	adds	r1, r2, r2
 8003e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e50:	415b      	adcs	r3, r3
 8003e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e5c:	f7fc fd4e 	bl	80008fc <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4ba5      	ldr	r3, [pc, #660]	; (80040fc <UART_SetConfig+0x38c>)
 8003e66:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	011e      	lsls	r6, r3, #4
 8003e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e70:	461c      	mov	r4, r3
 8003e72:	f04f 0500 	mov.w	r5, #0
 8003e76:	4622      	mov	r2, r4
 8003e78:	462b      	mov	r3, r5
 8003e7a:	1891      	adds	r1, r2, r2
 8003e7c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e7e:	415b      	adcs	r3, r3
 8003e80:	637b      	str	r3, [r7, #52]	; 0x34
 8003e82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e86:	1912      	adds	r2, r2, r4
 8003e88:	eb45 0303 	adc.w	r3, r5, r3
 8003e8c:	f04f 0000 	mov.w	r0, #0
 8003e90:	f04f 0100 	mov.w	r1, #0
 8003e94:	00d9      	lsls	r1, r3, #3
 8003e96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e9a:	00d0      	lsls	r0, r2, #3
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	1911      	adds	r1, r2, r4
 8003ea2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ea4:	416b      	adcs	r3, r5
 8003ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	461a      	mov	r2, r3
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	1891      	adds	r1, r2, r2
 8003eb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003eb6:	415b      	adcs	r3, r3
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ebe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ec2:	f7fc fd1b 	bl	80008fc <__aeabi_uldivmod>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4b8c      	ldr	r3, [pc, #560]	; (80040fc <UART_SetConfig+0x38c>)
 8003ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed0:	095b      	lsrs	r3, r3, #5
 8003ed2:	2164      	movs	r1, #100	; 0x64
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	3332      	adds	r3, #50	; 0x32
 8003ede:	4a87      	ldr	r2, [pc, #540]	; (80040fc <UART_SetConfig+0x38c>)
 8003ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee4:	095b      	lsrs	r3, r3, #5
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003eec:	441e      	add	r6, r3
 8003eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f04f 0100 	mov.w	r1, #0
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	1894      	adds	r4, r2, r2
 8003efc:	623c      	str	r4, [r7, #32]
 8003efe:	415b      	adcs	r3, r3
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
 8003f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f06:	1812      	adds	r2, r2, r0
 8003f08:	eb41 0303 	adc.w	r3, r1, r3
 8003f0c:	f04f 0400 	mov.w	r4, #0
 8003f10:	f04f 0500 	mov.w	r5, #0
 8003f14:	00dd      	lsls	r5, r3, #3
 8003f16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f1a:	00d4      	lsls	r4, r2, #3
 8003f1c:	4622      	mov	r2, r4
 8003f1e:	462b      	mov	r3, r5
 8003f20:	1814      	adds	r4, r2, r0
 8003f22:	653c      	str	r4, [r7, #80]	; 0x50
 8003f24:	414b      	adcs	r3, r1
 8003f26:	657b      	str	r3, [r7, #84]	; 0x54
 8003f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	1891      	adds	r1, r2, r2
 8003f34:	61b9      	str	r1, [r7, #24]
 8003f36:	415b      	adcs	r3, r3
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f42:	f7fc fcdb 	bl	80008fc <__aeabi_uldivmod>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4b6c      	ldr	r3, [pc, #432]	; (80040fc <UART_SetConfig+0x38c>)
 8003f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f50:	095b      	lsrs	r3, r3, #5
 8003f52:	2164      	movs	r1, #100	; 0x64
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	3332      	adds	r3, #50	; 0x32
 8003f5e:	4a67      	ldr	r2, [pc, #412]	; (80040fc <UART_SetConfig+0x38c>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	f003 0207 	and.w	r2, r3, #7
 8003f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4432      	add	r2, r6
 8003f70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f72:	e0b9      	b.n	80040e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f76:	461c      	mov	r4, r3
 8003f78:	f04f 0500 	mov.w	r5, #0
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	462b      	mov	r3, r5
 8003f80:	1891      	adds	r1, r2, r2
 8003f82:	6139      	str	r1, [r7, #16]
 8003f84:	415b      	adcs	r3, r3
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f8c:	1912      	adds	r2, r2, r4
 8003f8e:	eb45 0303 	adc.w	r3, r5, r3
 8003f92:	f04f 0000 	mov.w	r0, #0
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	00d9      	lsls	r1, r3, #3
 8003f9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa0:	00d0      	lsls	r0, r2, #3
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	eb12 0804 	adds.w	r8, r2, r4
 8003faa:	eb43 0905 	adc.w	r9, r3, r5
 8003fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f04f 0100 	mov.w	r1, #0
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	008b      	lsls	r3, r1, #2
 8003fc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fc6:	0082      	lsls	r2, r0, #2
 8003fc8:	4640      	mov	r0, r8
 8003fca:	4649      	mov	r1, r9
 8003fcc:	f7fc fc96 	bl	80008fc <__aeabi_uldivmod>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4b49      	ldr	r3, [pc, #292]	; (80040fc <UART_SetConfig+0x38c>)
 8003fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	011e      	lsls	r6, r3, #4
 8003fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f04f 0100 	mov.w	r1, #0
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	1894      	adds	r4, r2, r2
 8003fec:	60bc      	str	r4, [r7, #8]
 8003fee:	415b      	adcs	r3, r3
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ff6:	1812      	adds	r2, r2, r0
 8003ff8:	eb41 0303 	adc.w	r3, r1, r3
 8003ffc:	f04f 0400 	mov.w	r4, #0
 8004000:	f04f 0500 	mov.w	r5, #0
 8004004:	00dd      	lsls	r5, r3, #3
 8004006:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800400a:	00d4      	lsls	r4, r2, #3
 800400c:	4622      	mov	r2, r4
 800400e:	462b      	mov	r3, r5
 8004010:	1814      	adds	r4, r2, r0
 8004012:	64bc      	str	r4, [r7, #72]	; 0x48
 8004014:	414b      	adcs	r3, r1
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4618      	mov	r0, r3
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	f04f 0200 	mov.w	r2, #0
 8004026:	f04f 0300 	mov.w	r3, #0
 800402a:	008b      	lsls	r3, r1, #2
 800402c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004030:	0082      	lsls	r2, r0, #2
 8004032:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004036:	f7fc fc61 	bl	80008fc <__aeabi_uldivmod>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4b2f      	ldr	r3, [pc, #188]	; (80040fc <UART_SetConfig+0x38c>)
 8004040:	fba3 1302 	umull	r1, r3, r3, r2
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	2164      	movs	r1, #100	; 0x64
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	3332      	adds	r3, #50	; 0x32
 8004052:	4a2a      	ldr	r2, [pc, #168]	; (80040fc <UART_SetConfig+0x38c>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800405e:	441e      	add	r6, r3
 8004060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004062:	4618      	mov	r0, r3
 8004064:	f04f 0100 	mov.w	r1, #0
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	1894      	adds	r4, r2, r2
 800406e:	603c      	str	r4, [r7, #0]
 8004070:	415b      	adcs	r3, r3
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004078:	1812      	adds	r2, r2, r0
 800407a:	eb41 0303 	adc.w	r3, r1, r3
 800407e:	f04f 0400 	mov.w	r4, #0
 8004082:	f04f 0500 	mov.w	r5, #0
 8004086:	00dd      	lsls	r5, r3, #3
 8004088:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800408c:	00d4      	lsls	r4, r2, #3
 800408e:	4622      	mov	r2, r4
 8004090:	462b      	mov	r3, r5
 8004092:	eb12 0a00 	adds.w	sl, r2, r0
 8004096:	eb43 0b01 	adc.w	fp, r3, r1
 800409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4618      	mov	r0, r3
 80040a0:	f04f 0100 	mov.w	r1, #0
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	008b      	lsls	r3, r1, #2
 80040ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040b2:	0082      	lsls	r2, r0, #2
 80040b4:	4650      	mov	r0, sl
 80040b6:	4659      	mov	r1, fp
 80040b8:	f7fc fc20 	bl	80008fc <__aeabi_uldivmod>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4b0e      	ldr	r3, [pc, #56]	; (80040fc <UART_SetConfig+0x38c>)
 80040c2:	fba3 1302 	umull	r1, r3, r3, r2
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	2164      	movs	r1, #100	; 0x64
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	3332      	adds	r3, #50	; 0x32
 80040d4:	4a09      	ldr	r2, [pc, #36]	; (80040fc <UART_SetConfig+0x38c>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	f003 020f 	and.w	r2, r3, #15
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4432      	add	r2, r6
 80040e6:	609a      	str	r2, [r3, #8]
}
 80040e8:	bf00      	nop
 80040ea:	377c      	adds	r7, #124	; 0x7c
 80040ec:	46bd      	mov	sp, r7
 80040ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f2:	bf00      	nop
 80040f4:	40011000 	.word	0x40011000
 80040f8:	40011400 	.word	0x40011400
 80040fc:	51eb851f 	.word	0x51eb851f

08004100 <__errno>:
 8004100:	4b01      	ldr	r3, [pc, #4]	; (8004108 <__errno+0x8>)
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	2000000c 	.word	0x2000000c

0800410c <__libc_init_array>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	4d0d      	ldr	r5, [pc, #52]	; (8004144 <__libc_init_array+0x38>)
 8004110:	4c0d      	ldr	r4, [pc, #52]	; (8004148 <__libc_init_array+0x3c>)
 8004112:	1b64      	subs	r4, r4, r5
 8004114:	10a4      	asrs	r4, r4, #2
 8004116:	2600      	movs	r6, #0
 8004118:	42a6      	cmp	r6, r4
 800411a:	d109      	bne.n	8004130 <__libc_init_array+0x24>
 800411c:	4d0b      	ldr	r5, [pc, #44]	; (800414c <__libc_init_array+0x40>)
 800411e:	4c0c      	ldr	r4, [pc, #48]	; (8004150 <__libc_init_array+0x44>)
 8004120:	f000 fc4e 	bl	80049c0 <_init>
 8004124:	1b64      	subs	r4, r4, r5
 8004126:	10a4      	asrs	r4, r4, #2
 8004128:	2600      	movs	r6, #0
 800412a:	42a6      	cmp	r6, r4
 800412c:	d105      	bne.n	800413a <__libc_init_array+0x2e>
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	f855 3b04 	ldr.w	r3, [r5], #4
 8004134:	4798      	blx	r3
 8004136:	3601      	adds	r6, #1
 8004138:	e7ee      	b.n	8004118 <__libc_init_array+0xc>
 800413a:	f855 3b04 	ldr.w	r3, [r5], #4
 800413e:	4798      	blx	r3
 8004140:	3601      	adds	r6, #1
 8004142:	e7f2      	b.n	800412a <__libc_init_array+0x1e>
 8004144:	08004a50 	.word	0x08004a50
 8004148:	08004a50 	.word	0x08004a50
 800414c:	08004a50 	.word	0x08004a50
 8004150:	08004a54 	.word	0x08004a54

08004154 <memset>:
 8004154:	4402      	add	r2, r0
 8004156:	4603      	mov	r3, r0
 8004158:	4293      	cmp	r3, r2
 800415a:	d100      	bne.n	800415e <memset+0xa>
 800415c:	4770      	bx	lr
 800415e:	f803 1b01 	strb.w	r1, [r3], #1
 8004162:	e7f9      	b.n	8004158 <memset+0x4>

08004164 <siprintf>:
 8004164:	b40e      	push	{r1, r2, r3}
 8004166:	b500      	push	{lr}
 8004168:	b09c      	sub	sp, #112	; 0x70
 800416a:	ab1d      	add	r3, sp, #116	; 0x74
 800416c:	9002      	str	r0, [sp, #8]
 800416e:	9006      	str	r0, [sp, #24]
 8004170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004174:	4809      	ldr	r0, [pc, #36]	; (800419c <siprintf+0x38>)
 8004176:	9107      	str	r1, [sp, #28]
 8004178:	9104      	str	r1, [sp, #16]
 800417a:	4909      	ldr	r1, [pc, #36]	; (80041a0 <siprintf+0x3c>)
 800417c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004180:	9105      	str	r1, [sp, #20]
 8004182:	6800      	ldr	r0, [r0, #0]
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	a902      	add	r1, sp, #8
 8004188:	f000 f868 	bl	800425c <_svfiprintf_r>
 800418c:	9b02      	ldr	r3, [sp, #8]
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	b01c      	add	sp, #112	; 0x70
 8004194:	f85d eb04 	ldr.w	lr, [sp], #4
 8004198:	b003      	add	sp, #12
 800419a:	4770      	bx	lr
 800419c:	2000000c 	.word	0x2000000c
 80041a0:	ffff0208 	.word	0xffff0208

080041a4 <__ssputs_r>:
 80041a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a8:	688e      	ldr	r6, [r1, #8]
 80041aa:	429e      	cmp	r6, r3
 80041ac:	4682      	mov	sl, r0
 80041ae:	460c      	mov	r4, r1
 80041b0:	4690      	mov	r8, r2
 80041b2:	461f      	mov	r7, r3
 80041b4:	d838      	bhi.n	8004228 <__ssputs_r+0x84>
 80041b6:	898a      	ldrh	r2, [r1, #12]
 80041b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041bc:	d032      	beq.n	8004224 <__ssputs_r+0x80>
 80041be:	6825      	ldr	r5, [r4, #0]
 80041c0:	6909      	ldr	r1, [r1, #16]
 80041c2:	eba5 0901 	sub.w	r9, r5, r1
 80041c6:	6965      	ldr	r5, [r4, #20]
 80041c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041d0:	3301      	adds	r3, #1
 80041d2:	444b      	add	r3, r9
 80041d4:	106d      	asrs	r5, r5, #1
 80041d6:	429d      	cmp	r5, r3
 80041d8:	bf38      	it	cc
 80041da:	461d      	movcc	r5, r3
 80041dc:	0553      	lsls	r3, r2, #21
 80041de:	d531      	bpl.n	8004244 <__ssputs_r+0xa0>
 80041e0:	4629      	mov	r1, r5
 80041e2:	f000 fb47 	bl	8004874 <_malloc_r>
 80041e6:	4606      	mov	r6, r0
 80041e8:	b950      	cbnz	r0, 8004200 <__ssputs_r+0x5c>
 80041ea:	230c      	movs	r3, #12
 80041ec:	f8ca 3000 	str.w	r3, [sl]
 80041f0:	89a3      	ldrh	r3, [r4, #12]
 80041f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	f04f 30ff 	mov.w	r0, #4294967295
 80041fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004200:	6921      	ldr	r1, [r4, #16]
 8004202:	464a      	mov	r2, r9
 8004204:	f000 fabe 	bl	8004784 <memcpy>
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800420e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004212:	81a3      	strh	r3, [r4, #12]
 8004214:	6126      	str	r6, [r4, #16]
 8004216:	6165      	str	r5, [r4, #20]
 8004218:	444e      	add	r6, r9
 800421a:	eba5 0509 	sub.w	r5, r5, r9
 800421e:	6026      	str	r6, [r4, #0]
 8004220:	60a5      	str	r5, [r4, #8]
 8004222:	463e      	mov	r6, r7
 8004224:	42be      	cmp	r6, r7
 8004226:	d900      	bls.n	800422a <__ssputs_r+0x86>
 8004228:	463e      	mov	r6, r7
 800422a:	4632      	mov	r2, r6
 800422c:	6820      	ldr	r0, [r4, #0]
 800422e:	4641      	mov	r1, r8
 8004230:	f000 fab6 	bl	80047a0 <memmove>
 8004234:	68a3      	ldr	r3, [r4, #8]
 8004236:	6822      	ldr	r2, [r4, #0]
 8004238:	1b9b      	subs	r3, r3, r6
 800423a:	4432      	add	r2, r6
 800423c:	60a3      	str	r3, [r4, #8]
 800423e:	6022      	str	r2, [r4, #0]
 8004240:	2000      	movs	r0, #0
 8004242:	e7db      	b.n	80041fc <__ssputs_r+0x58>
 8004244:	462a      	mov	r2, r5
 8004246:	f000 fb6f 	bl	8004928 <_realloc_r>
 800424a:	4606      	mov	r6, r0
 800424c:	2800      	cmp	r0, #0
 800424e:	d1e1      	bne.n	8004214 <__ssputs_r+0x70>
 8004250:	6921      	ldr	r1, [r4, #16]
 8004252:	4650      	mov	r0, sl
 8004254:	f000 fabe 	bl	80047d4 <_free_r>
 8004258:	e7c7      	b.n	80041ea <__ssputs_r+0x46>
	...

0800425c <_svfiprintf_r>:
 800425c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004260:	4698      	mov	r8, r3
 8004262:	898b      	ldrh	r3, [r1, #12]
 8004264:	061b      	lsls	r3, r3, #24
 8004266:	b09d      	sub	sp, #116	; 0x74
 8004268:	4607      	mov	r7, r0
 800426a:	460d      	mov	r5, r1
 800426c:	4614      	mov	r4, r2
 800426e:	d50e      	bpl.n	800428e <_svfiprintf_r+0x32>
 8004270:	690b      	ldr	r3, [r1, #16]
 8004272:	b963      	cbnz	r3, 800428e <_svfiprintf_r+0x32>
 8004274:	2140      	movs	r1, #64	; 0x40
 8004276:	f000 fafd 	bl	8004874 <_malloc_r>
 800427a:	6028      	str	r0, [r5, #0]
 800427c:	6128      	str	r0, [r5, #16]
 800427e:	b920      	cbnz	r0, 800428a <_svfiprintf_r+0x2e>
 8004280:	230c      	movs	r3, #12
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	f04f 30ff 	mov.w	r0, #4294967295
 8004288:	e0d1      	b.n	800442e <_svfiprintf_r+0x1d2>
 800428a:	2340      	movs	r3, #64	; 0x40
 800428c:	616b      	str	r3, [r5, #20]
 800428e:	2300      	movs	r3, #0
 8004290:	9309      	str	r3, [sp, #36]	; 0x24
 8004292:	2320      	movs	r3, #32
 8004294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004298:	f8cd 800c 	str.w	r8, [sp, #12]
 800429c:	2330      	movs	r3, #48	; 0x30
 800429e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004448 <_svfiprintf_r+0x1ec>
 80042a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042a6:	f04f 0901 	mov.w	r9, #1
 80042aa:	4623      	mov	r3, r4
 80042ac:	469a      	mov	sl, r3
 80042ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042b2:	b10a      	cbz	r2, 80042b8 <_svfiprintf_r+0x5c>
 80042b4:	2a25      	cmp	r2, #37	; 0x25
 80042b6:	d1f9      	bne.n	80042ac <_svfiprintf_r+0x50>
 80042b8:	ebba 0b04 	subs.w	fp, sl, r4
 80042bc:	d00b      	beq.n	80042d6 <_svfiprintf_r+0x7a>
 80042be:	465b      	mov	r3, fp
 80042c0:	4622      	mov	r2, r4
 80042c2:	4629      	mov	r1, r5
 80042c4:	4638      	mov	r0, r7
 80042c6:	f7ff ff6d 	bl	80041a4 <__ssputs_r>
 80042ca:	3001      	adds	r0, #1
 80042cc:	f000 80aa 	beq.w	8004424 <_svfiprintf_r+0x1c8>
 80042d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042d2:	445a      	add	r2, fp
 80042d4:	9209      	str	r2, [sp, #36]	; 0x24
 80042d6:	f89a 3000 	ldrb.w	r3, [sl]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80a2 	beq.w	8004424 <_svfiprintf_r+0x1c8>
 80042e0:	2300      	movs	r3, #0
 80042e2:	f04f 32ff 	mov.w	r2, #4294967295
 80042e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042ea:	f10a 0a01 	add.w	sl, sl, #1
 80042ee:	9304      	str	r3, [sp, #16]
 80042f0:	9307      	str	r3, [sp, #28]
 80042f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042f6:	931a      	str	r3, [sp, #104]	; 0x68
 80042f8:	4654      	mov	r4, sl
 80042fa:	2205      	movs	r2, #5
 80042fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004300:	4851      	ldr	r0, [pc, #324]	; (8004448 <_svfiprintf_r+0x1ec>)
 8004302:	f7fb ff75 	bl	80001f0 <memchr>
 8004306:	9a04      	ldr	r2, [sp, #16]
 8004308:	b9d8      	cbnz	r0, 8004342 <_svfiprintf_r+0xe6>
 800430a:	06d0      	lsls	r0, r2, #27
 800430c:	bf44      	itt	mi
 800430e:	2320      	movmi	r3, #32
 8004310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004314:	0711      	lsls	r1, r2, #28
 8004316:	bf44      	itt	mi
 8004318:	232b      	movmi	r3, #43	; 0x2b
 800431a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800431e:	f89a 3000 	ldrb.w	r3, [sl]
 8004322:	2b2a      	cmp	r3, #42	; 0x2a
 8004324:	d015      	beq.n	8004352 <_svfiprintf_r+0xf6>
 8004326:	9a07      	ldr	r2, [sp, #28]
 8004328:	4654      	mov	r4, sl
 800432a:	2000      	movs	r0, #0
 800432c:	f04f 0c0a 	mov.w	ip, #10
 8004330:	4621      	mov	r1, r4
 8004332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004336:	3b30      	subs	r3, #48	; 0x30
 8004338:	2b09      	cmp	r3, #9
 800433a:	d94e      	bls.n	80043da <_svfiprintf_r+0x17e>
 800433c:	b1b0      	cbz	r0, 800436c <_svfiprintf_r+0x110>
 800433e:	9207      	str	r2, [sp, #28]
 8004340:	e014      	b.n	800436c <_svfiprintf_r+0x110>
 8004342:	eba0 0308 	sub.w	r3, r0, r8
 8004346:	fa09 f303 	lsl.w	r3, r9, r3
 800434a:	4313      	orrs	r3, r2
 800434c:	9304      	str	r3, [sp, #16]
 800434e:	46a2      	mov	sl, r4
 8004350:	e7d2      	b.n	80042f8 <_svfiprintf_r+0x9c>
 8004352:	9b03      	ldr	r3, [sp, #12]
 8004354:	1d19      	adds	r1, r3, #4
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	9103      	str	r1, [sp, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	bfbb      	ittet	lt
 800435e:	425b      	neglt	r3, r3
 8004360:	f042 0202 	orrlt.w	r2, r2, #2
 8004364:	9307      	strge	r3, [sp, #28]
 8004366:	9307      	strlt	r3, [sp, #28]
 8004368:	bfb8      	it	lt
 800436a:	9204      	strlt	r2, [sp, #16]
 800436c:	7823      	ldrb	r3, [r4, #0]
 800436e:	2b2e      	cmp	r3, #46	; 0x2e
 8004370:	d10c      	bne.n	800438c <_svfiprintf_r+0x130>
 8004372:	7863      	ldrb	r3, [r4, #1]
 8004374:	2b2a      	cmp	r3, #42	; 0x2a
 8004376:	d135      	bne.n	80043e4 <_svfiprintf_r+0x188>
 8004378:	9b03      	ldr	r3, [sp, #12]
 800437a:	1d1a      	adds	r2, r3, #4
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	9203      	str	r2, [sp, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	bfb8      	it	lt
 8004384:	f04f 33ff 	movlt.w	r3, #4294967295
 8004388:	3402      	adds	r4, #2
 800438a:	9305      	str	r3, [sp, #20]
 800438c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004458 <_svfiprintf_r+0x1fc>
 8004390:	7821      	ldrb	r1, [r4, #0]
 8004392:	2203      	movs	r2, #3
 8004394:	4650      	mov	r0, sl
 8004396:	f7fb ff2b 	bl	80001f0 <memchr>
 800439a:	b140      	cbz	r0, 80043ae <_svfiprintf_r+0x152>
 800439c:	2340      	movs	r3, #64	; 0x40
 800439e:	eba0 000a 	sub.w	r0, r0, sl
 80043a2:	fa03 f000 	lsl.w	r0, r3, r0
 80043a6:	9b04      	ldr	r3, [sp, #16]
 80043a8:	4303      	orrs	r3, r0
 80043aa:	3401      	adds	r4, #1
 80043ac:	9304      	str	r3, [sp, #16]
 80043ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043b2:	4826      	ldr	r0, [pc, #152]	; (800444c <_svfiprintf_r+0x1f0>)
 80043b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043b8:	2206      	movs	r2, #6
 80043ba:	f7fb ff19 	bl	80001f0 <memchr>
 80043be:	2800      	cmp	r0, #0
 80043c0:	d038      	beq.n	8004434 <_svfiprintf_r+0x1d8>
 80043c2:	4b23      	ldr	r3, [pc, #140]	; (8004450 <_svfiprintf_r+0x1f4>)
 80043c4:	bb1b      	cbnz	r3, 800440e <_svfiprintf_r+0x1b2>
 80043c6:	9b03      	ldr	r3, [sp, #12]
 80043c8:	3307      	adds	r3, #7
 80043ca:	f023 0307 	bic.w	r3, r3, #7
 80043ce:	3308      	adds	r3, #8
 80043d0:	9303      	str	r3, [sp, #12]
 80043d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d4:	4433      	add	r3, r6
 80043d6:	9309      	str	r3, [sp, #36]	; 0x24
 80043d8:	e767      	b.n	80042aa <_svfiprintf_r+0x4e>
 80043da:	fb0c 3202 	mla	r2, ip, r2, r3
 80043de:	460c      	mov	r4, r1
 80043e0:	2001      	movs	r0, #1
 80043e2:	e7a5      	b.n	8004330 <_svfiprintf_r+0xd4>
 80043e4:	2300      	movs	r3, #0
 80043e6:	3401      	adds	r4, #1
 80043e8:	9305      	str	r3, [sp, #20]
 80043ea:	4619      	mov	r1, r3
 80043ec:	f04f 0c0a 	mov.w	ip, #10
 80043f0:	4620      	mov	r0, r4
 80043f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043f6:	3a30      	subs	r2, #48	; 0x30
 80043f8:	2a09      	cmp	r2, #9
 80043fa:	d903      	bls.n	8004404 <_svfiprintf_r+0x1a8>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d0c5      	beq.n	800438c <_svfiprintf_r+0x130>
 8004400:	9105      	str	r1, [sp, #20]
 8004402:	e7c3      	b.n	800438c <_svfiprintf_r+0x130>
 8004404:	fb0c 2101 	mla	r1, ip, r1, r2
 8004408:	4604      	mov	r4, r0
 800440a:	2301      	movs	r3, #1
 800440c:	e7f0      	b.n	80043f0 <_svfiprintf_r+0x194>
 800440e:	ab03      	add	r3, sp, #12
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	462a      	mov	r2, r5
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <_svfiprintf_r+0x1f8>)
 8004416:	a904      	add	r1, sp, #16
 8004418:	4638      	mov	r0, r7
 800441a:	f3af 8000 	nop.w
 800441e:	1c42      	adds	r2, r0, #1
 8004420:	4606      	mov	r6, r0
 8004422:	d1d6      	bne.n	80043d2 <_svfiprintf_r+0x176>
 8004424:	89ab      	ldrh	r3, [r5, #12]
 8004426:	065b      	lsls	r3, r3, #25
 8004428:	f53f af2c 	bmi.w	8004284 <_svfiprintf_r+0x28>
 800442c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800442e:	b01d      	add	sp, #116	; 0x74
 8004430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004434:	ab03      	add	r3, sp, #12
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	462a      	mov	r2, r5
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <_svfiprintf_r+0x1f8>)
 800443c:	a904      	add	r1, sp, #16
 800443e:	4638      	mov	r0, r7
 8004440:	f000 f87a 	bl	8004538 <_printf_i>
 8004444:	e7eb      	b.n	800441e <_svfiprintf_r+0x1c2>
 8004446:	bf00      	nop
 8004448:	08004a14 	.word	0x08004a14
 800444c:	08004a1e 	.word	0x08004a1e
 8004450:	00000000 	.word	0x00000000
 8004454:	080041a5 	.word	0x080041a5
 8004458:	08004a1a 	.word	0x08004a1a

0800445c <_printf_common>:
 800445c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004460:	4616      	mov	r6, r2
 8004462:	4699      	mov	r9, r3
 8004464:	688a      	ldr	r2, [r1, #8]
 8004466:	690b      	ldr	r3, [r1, #16]
 8004468:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800446c:	4293      	cmp	r3, r2
 800446e:	bfb8      	it	lt
 8004470:	4613      	movlt	r3, r2
 8004472:	6033      	str	r3, [r6, #0]
 8004474:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004478:	4607      	mov	r7, r0
 800447a:	460c      	mov	r4, r1
 800447c:	b10a      	cbz	r2, 8004482 <_printf_common+0x26>
 800447e:	3301      	adds	r3, #1
 8004480:	6033      	str	r3, [r6, #0]
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	0699      	lsls	r1, r3, #26
 8004486:	bf42      	ittt	mi
 8004488:	6833      	ldrmi	r3, [r6, #0]
 800448a:	3302      	addmi	r3, #2
 800448c:	6033      	strmi	r3, [r6, #0]
 800448e:	6825      	ldr	r5, [r4, #0]
 8004490:	f015 0506 	ands.w	r5, r5, #6
 8004494:	d106      	bne.n	80044a4 <_printf_common+0x48>
 8004496:	f104 0a19 	add.w	sl, r4, #25
 800449a:	68e3      	ldr	r3, [r4, #12]
 800449c:	6832      	ldr	r2, [r6, #0]
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	42ab      	cmp	r3, r5
 80044a2:	dc26      	bgt.n	80044f2 <_printf_common+0x96>
 80044a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044a8:	1e13      	subs	r3, r2, #0
 80044aa:	6822      	ldr	r2, [r4, #0]
 80044ac:	bf18      	it	ne
 80044ae:	2301      	movne	r3, #1
 80044b0:	0692      	lsls	r2, r2, #26
 80044b2:	d42b      	bmi.n	800450c <_printf_common+0xb0>
 80044b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044b8:	4649      	mov	r1, r9
 80044ba:	4638      	mov	r0, r7
 80044bc:	47c0      	blx	r8
 80044be:	3001      	adds	r0, #1
 80044c0:	d01e      	beq.n	8004500 <_printf_common+0xa4>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	68e5      	ldr	r5, [r4, #12]
 80044c6:	6832      	ldr	r2, [r6, #0]
 80044c8:	f003 0306 	and.w	r3, r3, #6
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	bf08      	it	eq
 80044d0:	1aad      	subeq	r5, r5, r2
 80044d2:	68a3      	ldr	r3, [r4, #8]
 80044d4:	6922      	ldr	r2, [r4, #16]
 80044d6:	bf0c      	ite	eq
 80044d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044dc:	2500      	movne	r5, #0
 80044de:	4293      	cmp	r3, r2
 80044e0:	bfc4      	itt	gt
 80044e2:	1a9b      	subgt	r3, r3, r2
 80044e4:	18ed      	addgt	r5, r5, r3
 80044e6:	2600      	movs	r6, #0
 80044e8:	341a      	adds	r4, #26
 80044ea:	42b5      	cmp	r5, r6
 80044ec:	d11a      	bne.n	8004524 <_printf_common+0xc8>
 80044ee:	2000      	movs	r0, #0
 80044f0:	e008      	b.n	8004504 <_printf_common+0xa8>
 80044f2:	2301      	movs	r3, #1
 80044f4:	4652      	mov	r2, sl
 80044f6:	4649      	mov	r1, r9
 80044f8:	4638      	mov	r0, r7
 80044fa:	47c0      	blx	r8
 80044fc:	3001      	adds	r0, #1
 80044fe:	d103      	bne.n	8004508 <_printf_common+0xac>
 8004500:	f04f 30ff 	mov.w	r0, #4294967295
 8004504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004508:	3501      	adds	r5, #1
 800450a:	e7c6      	b.n	800449a <_printf_common+0x3e>
 800450c:	18e1      	adds	r1, r4, r3
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	2030      	movs	r0, #48	; 0x30
 8004512:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004516:	4422      	add	r2, r4
 8004518:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800451c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004520:	3302      	adds	r3, #2
 8004522:	e7c7      	b.n	80044b4 <_printf_common+0x58>
 8004524:	2301      	movs	r3, #1
 8004526:	4622      	mov	r2, r4
 8004528:	4649      	mov	r1, r9
 800452a:	4638      	mov	r0, r7
 800452c:	47c0      	blx	r8
 800452e:	3001      	adds	r0, #1
 8004530:	d0e6      	beq.n	8004500 <_printf_common+0xa4>
 8004532:	3601      	adds	r6, #1
 8004534:	e7d9      	b.n	80044ea <_printf_common+0x8e>
	...

08004538 <_printf_i>:
 8004538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800453c:	460c      	mov	r4, r1
 800453e:	4691      	mov	r9, r2
 8004540:	7e27      	ldrb	r7, [r4, #24]
 8004542:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004544:	2f78      	cmp	r7, #120	; 0x78
 8004546:	4680      	mov	r8, r0
 8004548:	469a      	mov	sl, r3
 800454a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800454e:	d807      	bhi.n	8004560 <_printf_i+0x28>
 8004550:	2f62      	cmp	r7, #98	; 0x62
 8004552:	d80a      	bhi.n	800456a <_printf_i+0x32>
 8004554:	2f00      	cmp	r7, #0
 8004556:	f000 80d8 	beq.w	800470a <_printf_i+0x1d2>
 800455a:	2f58      	cmp	r7, #88	; 0x58
 800455c:	f000 80a3 	beq.w	80046a6 <_printf_i+0x16e>
 8004560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004564:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004568:	e03a      	b.n	80045e0 <_printf_i+0xa8>
 800456a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800456e:	2b15      	cmp	r3, #21
 8004570:	d8f6      	bhi.n	8004560 <_printf_i+0x28>
 8004572:	a001      	add	r0, pc, #4	; (adr r0, 8004578 <_printf_i+0x40>)
 8004574:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004578:	080045d1 	.word	0x080045d1
 800457c:	080045e5 	.word	0x080045e5
 8004580:	08004561 	.word	0x08004561
 8004584:	08004561 	.word	0x08004561
 8004588:	08004561 	.word	0x08004561
 800458c:	08004561 	.word	0x08004561
 8004590:	080045e5 	.word	0x080045e5
 8004594:	08004561 	.word	0x08004561
 8004598:	08004561 	.word	0x08004561
 800459c:	08004561 	.word	0x08004561
 80045a0:	08004561 	.word	0x08004561
 80045a4:	080046f1 	.word	0x080046f1
 80045a8:	08004615 	.word	0x08004615
 80045ac:	080046d3 	.word	0x080046d3
 80045b0:	08004561 	.word	0x08004561
 80045b4:	08004561 	.word	0x08004561
 80045b8:	08004713 	.word	0x08004713
 80045bc:	08004561 	.word	0x08004561
 80045c0:	08004615 	.word	0x08004615
 80045c4:	08004561 	.word	0x08004561
 80045c8:	08004561 	.word	0x08004561
 80045cc:	080046db 	.word	0x080046db
 80045d0:	680b      	ldr	r3, [r1, #0]
 80045d2:	1d1a      	adds	r2, r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	600a      	str	r2, [r1, #0]
 80045d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80045dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0a3      	b.n	800472c <_printf_i+0x1f4>
 80045e4:	6825      	ldr	r5, [r4, #0]
 80045e6:	6808      	ldr	r0, [r1, #0]
 80045e8:	062e      	lsls	r6, r5, #24
 80045ea:	f100 0304 	add.w	r3, r0, #4
 80045ee:	d50a      	bpl.n	8004606 <_printf_i+0xce>
 80045f0:	6805      	ldr	r5, [r0, #0]
 80045f2:	600b      	str	r3, [r1, #0]
 80045f4:	2d00      	cmp	r5, #0
 80045f6:	da03      	bge.n	8004600 <_printf_i+0xc8>
 80045f8:	232d      	movs	r3, #45	; 0x2d
 80045fa:	426d      	negs	r5, r5
 80045fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004600:	485e      	ldr	r0, [pc, #376]	; (800477c <_printf_i+0x244>)
 8004602:	230a      	movs	r3, #10
 8004604:	e019      	b.n	800463a <_printf_i+0x102>
 8004606:	f015 0f40 	tst.w	r5, #64	; 0x40
 800460a:	6805      	ldr	r5, [r0, #0]
 800460c:	600b      	str	r3, [r1, #0]
 800460e:	bf18      	it	ne
 8004610:	b22d      	sxthne	r5, r5
 8004612:	e7ef      	b.n	80045f4 <_printf_i+0xbc>
 8004614:	680b      	ldr	r3, [r1, #0]
 8004616:	6825      	ldr	r5, [r4, #0]
 8004618:	1d18      	adds	r0, r3, #4
 800461a:	6008      	str	r0, [r1, #0]
 800461c:	0628      	lsls	r0, r5, #24
 800461e:	d501      	bpl.n	8004624 <_printf_i+0xec>
 8004620:	681d      	ldr	r5, [r3, #0]
 8004622:	e002      	b.n	800462a <_printf_i+0xf2>
 8004624:	0669      	lsls	r1, r5, #25
 8004626:	d5fb      	bpl.n	8004620 <_printf_i+0xe8>
 8004628:	881d      	ldrh	r5, [r3, #0]
 800462a:	4854      	ldr	r0, [pc, #336]	; (800477c <_printf_i+0x244>)
 800462c:	2f6f      	cmp	r7, #111	; 0x6f
 800462e:	bf0c      	ite	eq
 8004630:	2308      	moveq	r3, #8
 8004632:	230a      	movne	r3, #10
 8004634:	2100      	movs	r1, #0
 8004636:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800463a:	6866      	ldr	r6, [r4, #4]
 800463c:	60a6      	str	r6, [r4, #8]
 800463e:	2e00      	cmp	r6, #0
 8004640:	bfa2      	ittt	ge
 8004642:	6821      	ldrge	r1, [r4, #0]
 8004644:	f021 0104 	bicge.w	r1, r1, #4
 8004648:	6021      	strge	r1, [r4, #0]
 800464a:	b90d      	cbnz	r5, 8004650 <_printf_i+0x118>
 800464c:	2e00      	cmp	r6, #0
 800464e:	d04d      	beq.n	80046ec <_printf_i+0x1b4>
 8004650:	4616      	mov	r6, r2
 8004652:	fbb5 f1f3 	udiv	r1, r5, r3
 8004656:	fb03 5711 	mls	r7, r3, r1, r5
 800465a:	5dc7      	ldrb	r7, [r0, r7]
 800465c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004660:	462f      	mov	r7, r5
 8004662:	42bb      	cmp	r3, r7
 8004664:	460d      	mov	r5, r1
 8004666:	d9f4      	bls.n	8004652 <_printf_i+0x11a>
 8004668:	2b08      	cmp	r3, #8
 800466a:	d10b      	bne.n	8004684 <_printf_i+0x14c>
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	07df      	lsls	r7, r3, #31
 8004670:	d508      	bpl.n	8004684 <_printf_i+0x14c>
 8004672:	6923      	ldr	r3, [r4, #16]
 8004674:	6861      	ldr	r1, [r4, #4]
 8004676:	4299      	cmp	r1, r3
 8004678:	bfde      	ittt	le
 800467a:	2330      	movle	r3, #48	; 0x30
 800467c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004680:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004684:	1b92      	subs	r2, r2, r6
 8004686:	6122      	str	r2, [r4, #16]
 8004688:	f8cd a000 	str.w	sl, [sp]
 800468c:	464b      	mov	r3, r9
 800468e:	aa03      	add	r2, sp, #12
 8004690:	4621      	mov	r1, r4
 8004692:	4640      	mov	r0, r8
 8004694:	f7ff fee2 	bl	800445c <_printf_common>
 8004698:	3001      	adds	r0, #1
 800469a:	d14c      	bne.n	8004736 <_printf_i+0x1fe>
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	b004      	add	sp, #16
 80046a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a6:	4835      	ldr	r0, [pc, #212]	; (800477c <_printf_i+0x244>)
 80046a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	680e      	ldr	r6, [r1, #0]
 80046b0:	061f      	lsls	r7, r3, #24
 80046b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80046b6:	600e      	str	r6, [r1, #0]
 80046b8:	d514      	bpl.n	80046e4 <_printf_i+0x1ac>
 80046ba:	07d9      	lsls	r1, r3, #31
 80046bc:	bf44      	itt	mi
 80046be:	f043 0320 	orrmi.w	r3, r3, #32
 80046c2:	6023      	strmi	r3, [r4, #0]
 80046c4:	b91d      	cbnz	r5, 80046ce <_printf_i+0x196>
 80046c6:	6823      	ldr	r3, [r4, #0]
 80046c8:	f023 0320 	bic.w	r3, r3, #32
 80046cc:	6023      	str	r3, [r4, #0]
 80046ce:	2310      	movs	r3, #16
 80046d0:	e7b0      	b.n	8004634 <_printf_i+0xfc>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	f043 0320 	orr.w	r3, r3, #32
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	2378      	movs	r3, #120	; 0x78
 80046dc:	4828      	ldr	r0, [pc, #160]	; (8004780 <_printf_i+0x248>)
 80046de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046e2:	e7e3      	b.n	80046ac <_printf_i+0x174>
 80046e4:	065e      	lsls	r6, r3, #25
 80046e6:	bf48      	it	mi
 80046e8:	b2ad      	uxthmi	r5, r5
 80046ea:	e7e6      	b.n	80046ba <_printf_i+0x182>
 80046ec:	4616      	mov	r6, r2
 80046ee:	e7bb      	b.n	8004668 <_printf_i+0x130>
 80046f0:	680b      	ldr	r3, [r1, #0]
 80046f2:	6826      	ldr	r6, [r4, #0]
 80046f4:	6960      	ldr	r0, [r4, #20]
 80046f6:	1d1d      	adds	r5, r3, #4
 80046f8:	600d      	str	r5, [r1, #0]
 80046fa:	0635      	lsls	r5, r6, #24
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	d501      	bpl.n	8004704 <_printf_i+0x1cc>
 8004700:	6018      	str	r0, [r3, #0]
 8004702:	e002      	b.n	800470a <_printf_i+0x1d2>
 8004704:	0671      	lsls	r1, r6, #25
 8004706:	d5fb      	bpl.n	8004700 <_printf_i+0x1c8>
 8004708:	8018      	strh	r0, [r3, #0]
 800470a:	2300      	movs	r3, #0
 800470c:	6123      	str	r3, [r4, #16]
 800470e:	4616      	mov	r6, r2
 8004710:	e7ba      	b.n	8004688 <_printf_i+0x150>
 8004712:	680b      	ldr	r3, [r1, #0]
 8004714:	1d1a      	adds	r2, r3, #4
 8004716:	600a      	str	r2, [r1, #0]
 8004718:	681e      	ldr	r6, [r3, #0]
 800471a:	6862      	ldr	r2, [r4, #4]
 800471c:	2100      	movs	r1, #0
 800471e:	4630      	mov	r0, r6
 8004720:	f7fb fd66 	bl	80001f0 <memchr>
 8004724:	b108      	cbz	r0, 800472a <_printf_i+0x1f2>
 8004726:	1b80      	subs	r0, r0, r6
 8004728:	6060      	str	r0, [r4, #4]
 800472a:	6863      	ldr	r3, [r4, #4]
 800472c:	6123      	str	r3, [r4, #16]
 800472e:	2300      	movs	r3, #0
 8004730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004734:	e7a8      	b.n	8004688 <_printf_i+0x150>
 8004736:	6923      	ldr	r3, [r4, #16]
 8004738:	4632      	mov	r2, r6
 800473a:	4649      	mov	r1, r9
 800473c:	4640      	mov	r0, r8
 800473e:	47d0      	blx	sl
 8004740:	3001      	adds	r0, #1
 8004742:	d0ab      	beq.n	800469c <_printf_i+0x164>
 8004744:	6823      	ldr	r3, [r4, #0]
 8004746:	079b      	lsls	r3, r3, #30
 8004748:	d413      	bmi.n	8004772 <_printf_i+0x23a>
 800474a:	68e0      	ldr	r0, [r4, #12]
 800474c:	9b03      	ldr	r3, [sp, #12]
 800474e:	4298      	cmp	r0, r3
 8004750:	bfb8      	it	lt
 8004752:	4618      	movlt	r0, r3
 8004754:	e7a4      	b.n	80046a0 <_printf_i+0x168>
 8004756:	2301      	movs	r3, #1
 8004758:	4632      	mov	r2, r6
 800475a:	4649      	mov	r1, r9
 800475c:	4640      	mov	r0, r8
 800475e:	47d0      	blx	sl
 8004760:	3001      	adds	r0, #1
 8004762:	d09b      	beq.n	800469c <_printf_i+0x164>
 8004764:	3501      	adds	r5, #1
 8004766:	68e3      	ldr	r3, [r4, #12]
 8004768:	9903      	ldr	r1, [sp, #12]
 800476a:	1a5b      	subs	r3, r3, r1
 800476c:	42ab      	cmp	r3, r5
 800476e:	dcf2      	bgt.n	8004756 <_printf_i+0x21e>
 8004770:	e7eb      	b.n	800474a <_printf_i+0x212>
 8004772:	2500      	movs	r5, #0
 8004774:	f104 0619 	add.w	r6, r4, #25
 8004778:	e7f5      	b.n	8004766 <_printf_i+0x22e>
 800477a:	bf00      	nop
 800477c:	08004a25 	.word	0x08004a25
 8004780:	08004a36 	.word	0x08004a36

08004784 <memcpy>:
 8004784:	440a      	add	r2, r1
 8004786:	4291      	cmp	r1, r2
 8004788:	f100 33ff 	add.w	r3, r0, #4294967295
 800478c:	d100      	bne.n	8004790 <memcpy+0xc>
 800478e:	4770      	bx	lr
 8004790:	b510      	push	{r4, lr}
 8004792:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004796:	f803 4f01 	strb.w	r4, [r3, #1]!
 800479a:	4291      	cmp	r1, r2
 800479c:	d1f9      	bne.n	8004792 <memcpy+0xe>
 800479e:	bd10      	pop	{r4, pc}

080047a0 <memmove>:
 80047a0:	4288      	cmp	r0, r1
 80047a2:	b510      	push	{r4, lr}
 80047a4:	eb01 0402 	add.w	r4, r1, r2
 80047a8:	d902      	bls.n	80047b0 <memmove+0x10>
 80047aa:	4284      	cmp	r4, r0
 80047ac:	4623      	mov	r3, r4
 80047ae:	d807      	bhi.n	80047c0 <memmove+0x20>
 80047b0:	1e43      	subs	r3, r0, #1
 80047b2:	42a1      	cmp	r1, r4
 80047b4:	d008      	beq.n	80047c8 <memmove+0x28>
 80047b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80047ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80047be:	e7f8      	b.n	80047b2 <memmove+0x12>
 80047c0:	4402      	add	r2, r0
 80047c2:	4601      	mov	r1, r0
 80047c4:	428a      	cmp	r2, r1
 80047c6:	d100      	bne.n	80047ca <memmove+0x2a>
 80047c8:	bd10      	pop	{r4, pc}
 80047ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047d2:	e7f7      	b.n	80047c4 <memmove+0x24>

080047d4 <_free_r>:
 80047d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047d6:	2900      	cmp	r1, #0
 80047d8:	d048      	beq.n	800486c <_free_r+0x98>
 80047da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047de:	9001      	str	r0, [sp, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f1a1 0404 	sub.w	r4, r1, #4
 80047e6:	bfb8      	it	lt
 80047e8:	18e4      	addlt	r4, r4, r3
 80047ea:	f000 f8d3 	bl	8004994 <__malloc_lock>
 80047ee:	4a20      	ldr	r2, [pc, #128]	; (8004870 <_free_r+0x9c>)
 80047f0:	9801      	ldr	r0, [sp, #4]
 80047f2:	6813      	ldr	r3, [r2, #0]
 80047f4:	4615      	mov	r5, r2
 80047f6:	b933      	cbnz	r3, 8004806 <_free_r+0x32>
 80047f8:	6063      	str	r3, [r4, #4]
 80047fa:	6014      	str	r4, [r2, #0]
 80047fc:	b003      	add	sp, #12
 80047fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004802:	f000 b8cd 	b.w	80049a0 <__malloc_unlock>
 8004806:	42a3      	cmp	r3, r4
 8004808:	d90b      	bls.n	8004822 <_free_r+0x4e>
 800480a:	6821      	ldr	r1, [r4, #0]
 800480c:	1862      	adds	r2, r4, r1
 800480e:	4293      	cmp	r3, r2
 8004810:	bf04      	itt	eq
 8004812:	681a      	ldreq	r2, [r3, #0]
 8004814:	685b      	ldreq	r3, [r3, #4]
 8004816:	6063      	str	r3, [r4, #4]
 8004818:	bf04      	itt	eq
 800481a:	1852      	addeq	r2, r2, r1
 800481c:	6022      	streq	r2, [r4, #0]
 800481e:	602c      	str	r4, [r5, #0]
 8004820:	e7ec      	b.n	80047fc <_free_r+0x28>
 8004822:	461a      	mov	r2, r3
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	b10b      	cbz	r3, 800482c <_free_r+0x58>
 8004828:	42a3      	cmp	r3, r4
 800482a:	d9fa      	bls.n	8004822 <_free_r+0x4e>
 800482c:	6811      	ldr	r1, [r2, #0]
 800482e:	1855      	adds	r5, r2, r1
 8004830:	42a5      	cmp	r5, r4
 8004832:	d10b      	bne.n	800484c <_free_r+0x78>
 8004834:	6824      	ldr	r4, [r4, #0]
 8004836:	4421      	add	r1, r4
 8004838:	1854      	adds	r4, r2, r1
 800483a:	42a3      	cmp	r3, r4
 800483c:	6011      	str	r1, [r2, #0]
 800483e:	d1dd      	bne.n	80047fc <_free_r+0x28>
 8004840:	681c      	ldr	r4, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	6053      	str	r3, [r2, #4]
 8004846:	4421      	add	r1, r4
 8004848:	6011      	str	r1, [r2, #0]
 800484a:	e7d7      	b.n	80047fc <_free_r+0x28>
 800484c:	d902      	bls.n	8004854 <_free_r+0x80>
 800484e:	230c      	movs	r3, #12
 8004850:	6003      	str	r3, [r0, #0]
 8004852:	e7d3      	b.n	80047fc <_free_r+0x28>
 8004854:	6825      	ldr	r5, [r4, #0]
 8004856:	1961      	adds	r1, r4, r5
 8004858:	428b      	cmp	r3, r1
 800485a:	bf04      	itt	eq
 800485c:	6819      	ldreq	r1, [r3, #0]
 800485e:	685b      	ldreq	r3, [r3, #4]
 8004860:	6063      	str	r3, [r4, #4]
 8004862:	bf04      	itt	eq
 8004864:	1949      	addeq	r1, r1, r5
 8004866:	6021      	streq	r1, [r4, #0]
 8004868:	6054      	str	r4, [r2, #4]
 800486a:	e7c7      	b.n	80047fc <_free_r+0x28>
 800486c:	b003      	add	sp, #12
 800486e:	bd30      	pop	{r4, r5, pc}
 8004870:	20000090 	.word	0x20000090

08004874 <_malloc_r>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	1ccd      	adds	r5, r1, #3
 8004878:	f025 0503 	bic.w	r5, r5, #3
 800487c:	3508      	adds	r5, #8
 800487e:	2d0c      	cmp	r5, #12
 8004880:	bf38      	it	cc
 8004882:	250c      	movcc	r5, #12
 8004884:	2d00      	cmp	r5, #0
 8004886:	4606      	mov	r6, r0
 8004888:	db01      	blt.n	800488e <_malloc_r+0x1a>
 800488a:	42a9      	cmp	r1, r5
 800488c:	d903      	bls.n	8004896 <_malloc_r+0x22>
 800488e:	230c      	movs	r3, #12
 8004890:	6033      	str	r3, [r6, #0]
 8004892:	2000      	movs	r0, #0
 8004894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004896:	f000 f87d 	bl	8004994 <__malloc_lock>
 800489a:	4921      	ldr	r1, [pc, #132]	; (8004920 <_malloc_r+0xac>)
 800489c:	680a      	ldr	r2, [r1, #0]
 800489e:	4614      	mov	r4, r2
 80048a0:	b99c      	cbnz	r4, 80048ca <_malloc_r+0x56>
 80048a2:	4f20      	ldr	r7, [pc, #128]	; (8004924 <_malloc_r+0xb0>)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	b923      	cbnz	r3, 80048b2 <_malloc_r+0x3e>
 80048a8:	4621      	mov	r1, r4
 80048aa:	4630      	mov	r0, r6
 80048ac:	f000 f862 	bl	8004974 <_sbrk_r>
 80048b0:	6038      	str	r0, [r7, #0]
 80048b2:	4629      	mov	r1, r5
 80048b4:	4630      	mov	r0, r6
 80048b6:	f000 f85d 	bl	8004974 <_sbrk_r>
 80048ba:	1c43      	adds	r3, r0, #1
 80048bc:	d123      	bne.n	8004906 <_malloc_r+0x92>
 80048be:	230c      	movs	r3, #12
 80048c0:	6033      	str	r3, [r6, #0]
 80048c2:	4630      	mov	r0, r6
 80048c4:	f000 f86c 	bl	80049a0 <__malloc_unlock>
 80048c8:	e7e3      	b.n	8004892 <_malloc_r+0x1e>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	1b5b      	subs	r3, r3, r5
 80048ce:	d417      	bmi.n	8004900 <_malloc_r+0x8c>
 80048d0:	2b0b      	cmp	r3, #11
 80048d2:	d903      	bls.n	80048dc <_malloc_r+0x68>
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	441c      	add	r4, r3
 80048d8:	6025      	str	r5, [r4, #0]
 80048da:	e004      	b.n	80048e6 <_malloc_r+0x72>
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	42a2      	cmp	r2, r4
 80048e0:	bf0c      	ite	eq
 80048e2:	600b      	streq	r3, [r1, #0]
 80048e4:	6053      	strne	r3, [r2, #4]
 80048e6:	4630      	mov	r0, r6
 80048e8:	f000 f85a 	bl	80049a0 <__malloc_unlock>
 80048ec:	f104 000b 	add.w	r0, r4, #11
 80048f0:	1d23      	adds	r3, r4, #4
 80048f2:	f020 0007 	bic.w	r0, r0, #7
 80048f6:	1ac2      	subs	r2, r0, r3
 80048f8:	d0cc      	beq.n	8004894 <_malloc_r+0x20>
 80048fa:	1a1b      	subs	r3, r3, r0
 80048fc:	50a3      	str	r3, [r4, r2]
 80048fe:	e7c9      	b.n	8004894 <_malloc_r+0x20>
 8004900:	4622      	mov	r2, r4
 8004902:	6864      	ldr	r4, [r4, #4]
 8004904:	e7cc      	b.n	80048a0 <_malloc_r+0x2c>
 8004906:	1cc4      	adds	r4, r0, #3
 8004908:	f024 0403 	bic.w	r4, r4, #3
 800490c:	42a0      	cmp	r0, r4
 800490e:	d0e3      	beq.n	80048d8 <_malloc_r+0x64>
 8004910:	1a21      	subs	r1, r4, r0
 8004912:	4630      	mov	r0, r6
 8004914:	f000 f82e 	bl	8004974 <_sbrk_r>
 8004918:	3001      	adds	r0, #1
 800491a:	d1dd      	bne.n	80048d8 <_malloc_r+0x64>
 800491c:	e7cf      	b.n	80048be <_malloc_r+0x4a>
 800491e:	bf00      	nop
 8004920:	20000090 	.word	0x20000090
 8004924:	20000094 	.word	0x20000094

08004928 <_realloc_r>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	4607      	mov	r7, r0
 800492c:	4614      	mov	r4, r2
 800492e:	460e      	mov	r6, r1
 8004930:	b921      	cbnz	r1, 800493c <_realloc_r+0x14>
 8004932:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004936:	4611      	mov	r1, r2
 8004938:	f7ff bf9c 	b.w	8004874 <_malloc_r>
 800493c:	b922      	cbnz	r2, 8004948 <_realloc_r+0x20>
 800493e:	f7ff ff49 	bl	80047d4 <_free_r>
 8004942:	4625      	mov	r5, r4
 8004944:	4628      	mov	r0, r5
 8004946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004948:	f000 f830 	bl	80049ac <_malloc_usable_size_r>
 800494c:	42a0      	cmp	r0, r4
 800494e:	d20f      	bcs.n	8004970 <_realloc_r+0x48>
 8004950:	4621      	mov	r1, r4
 8004952:	4638      	mov	r0, r7
 8004954:	f7ff ff8e 	bl	8004874 <_malloc_r>
 8004958:	4605      	mov	r5, r0
 800495a:	2800      	cmp	r0, #0
 800495c:	d0f2      	beq.n	8004944 <_realloc_r+0x1c>
 800495e:	4631      	mov	r1, r6
 8004960:	4622      	mov	r2, r4
 8004962:	f7ff ff0f 	bl	8004784 <memcpy>
 8004966:	4631      	mov	r1, r6
 8004968:	4638      	mov	r0, r7
 800496a:	f7ff ff33 	bl	80047d4 <_free_r>
 800496e:	e7e9      	b.n	8004944 <_realloc_r+0x1c>
 8004970:	4635      	mov	r5, r6
 8004972:	e7e7      	b.n	8004944 <_realloc_r+0x1c>

08004974 <_sbrk_r>:
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4d06      	ldr	r5, [pc, #24]	; (8004990 <_sbrk_r+0x1c>)
 8004978:	2300      	movs	r3, #0
 800497a:	4604      	mov	r4, r0
 800497c:	4608      	mov	r0, r1
 800497e:	602b      	str	r3, [r5, #0]
 8004980:	f7fc fc02 	bl	8001188 <_sbrk>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_sbrk_r+0x1a>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b103      	cbz	r3, 800498e <_sbrk_r+0x1a>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	20000134 	.word	0x20000134

08004994 <__malloc_lock>:
 8004994:	4801      	ldr	r0, [pc, #4]	; (800499c <__malloc_lock+0x8>)
 8004996:	f000 b811 	b.w	80049bc <__retarget_lock_acquire_recursive>
 800499a:	bf00      	nop
 800499c:	2000013c 	.word	0x2000013c

080049a0 <__malloc_unlock>:
 80049a0:	4801      	ldr	r0, [pc, #4]	; (80049a8 <__malloc_unlock+0x8>)
 80049a2:	f000 b80c 	b.w	80049be <__retarget_lock_release_recursive>
 80049a6:	bf00      	nop
 80049a8:	2000013c 	.word	0x2000013c

080049ac <_malloc_usable_size_r>:
 80049ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b0:	1f18      	subs	r0, r3, #4
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bfbc      	itt	lt
 80049b6:	580b      	ldrlt	r3, [r1, r0]
 80049b8:	18c0      	addlt	r0, r0, r3
 80049ba:	4770      	bx	lr

080049bc <__retarget_lock_acquire_recursive>:
 80049bc:	4770      	bx	lr

080049be <__retarget_lock_release_recursive>:
 80049be:	4770      	bx	lr

080049c0 <_init>:
 80049c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c2:	bf00      	nop
 80049c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049c6:	bc08      	pop	{r3}
 80049c8:	469e      	mov	lr, r3
 80049ca:	4770      	bx	lr

080049cc <_fini>:
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	bf00      	nop
 80049d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d2:	bc08      	pop	{r3}
 80049d4:	469e      	mov	lr, r3
 80049d6:	4770      	bx	lr
