
7_InterruptThree.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041fc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800439c  0800439c  0001439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a0  080045a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080045a0  080045a0  000145a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045a8  080045a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045ac  080045ac  000145ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08004620  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004620  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff20  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020eb  00000000  00000000  0002ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  000320b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00032cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ba8  00000000  00000000  00033818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee7b  00000000  00000000  0004b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f96b  00000000  00000000  0005a23b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9ba6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf4  00000000  00000000  000e9bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004384 	.word	0x08004384

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004384 	.word	0x08004384

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057e:	f107 0314 	add.w	r3, r7, #20
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	60da      	str	r2, [r3, #12]
 800058c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
 8000592:	4b2d      	ldr	r3, [pc, #180]	; (8000648 <MX_GPIO_Init+0xd0>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a2c      	ldr	r2, [pc, #176]	; (8000648 <MX_GPIO_Init+0xd0>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b2a      	ldr	r3, [pc, #168]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0304 	and.w	r3, r3, #4
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	4b26      	ldr	r3, [pc, #152]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a25      	ldr	r2, [pc, #148]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a1e      	ldr	r2, [pc, #120]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_GPIO_Init+0xd0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2120      	movs	r1, #32
 8000602:	4812      	ldr	r0, [pc, #72]	; (800064c <MX_GPIO_Init+0xd4>)
 8000604:	f000 fe38 	bl	8001278 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800060c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800060e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	2300      	movs	r3, #0
 8000616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	4619      	mov	r1, r3
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <MX_GPIO_Init+0xd8>)
 8000620:	f000 fca6 	bl	8000f70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000624:	2320      	movs	r3, #32
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	4804      	ldr	r0, [pc, #16]	; (800064c <MX_GPIO_Init+0xd4>)
 800063c:	f000 fc98 	bl	8000f70 <HAL_GPIO_Init>

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40023800 	.word	0x40023800
 800064c:	40020000 	.word	0x40020000
 8000650:	40020800 	.word	0x40020800

08000654 <main>:
  * @brief  The application entry point.
  * @retval int
  */
int timer_val;
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09a      	sub	sp, #104	; 0x68
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fb05 	bl	8000c68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f843 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f7ff ff89 	bl	8000578 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000666:	f000 fa63 	bl	8000b30 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 800066a:	f000 f9ff 	bl	8000a6c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim10);
 800066e:	4817      	ldr	r0, [pc, #92]	; (80006cc <main+0x78>)
 8000670:	f001 fae0 	bl	8001c34 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	printf("\r\nYour name: ");
 8000674:	4816      	ldr	r0, [pc, #88]	; (80006d0 <main+0x7c>)
 8000676:	f002 f8ef 	bl	8002858 <iprintf>
	scanf("%s", buf);
 800067a:	463b      	mov	r3, r7
 800067c:	4619      	mov	r1, r3
 800067e:	4815      	ldr	r0, [pc, #84]	; (80006d4 <main+0x80>)
 8000680:	f002 f902 	bl	8002888 <iscanf>
	printf("\r\nHello, %s!\r\n", buf);
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	4813      	ldr	r0, [pc, #76]	; (80006d8 <main+0x84>)
 800068a:	f002 f8e5 	bl	8002858 <iprintf>
    /* USER CODE END WHILE */
	int timer_val = __HAL_TIM_GET_COUNTER(&htim10);
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <main+0x78>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000694:	667b      	str	r3, [r7, #100]	; 0x64
	if (timer_val<=5000)
 8000696:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000698:	f241 3288 	movw	r2, #5000	; 0x1388
 800069c:	4293      	cmp	r3, r2
 800069e:	dc07      	bgt.n	80006b0 <main+0x5c>
		{HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2120      	movs	r1, #32
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <main+0x88>)
 80006a6:	f000 fde7 	bl	8001278 <HAL_GPIO_WritePin>
		printf("IN");}
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <main+0x8c>)
 80006ac:	f002 f8d4 	bl	8002858 <iprintf>
	if (timer_val>=5000)
 80006b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80006b2:	f241 3287 	movw	r2, #4999	; 0x1387
 80006b6:	4293      	cmp	r3, r2
 80006b8:	dddc      	ble.n	8000674 <main+0x20>
		{HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2120      	movs	r1, #32
 80006be:	4807      	ldr	r0, [pc, #28]	; (80006dc <main+0x88>)
 80006c0:	f000 fdda 	bl	8001278 <HAL_GPIO_WritePin>
		printf("OUT");}
 80006c4:	4807      	ldr	r0, [pc, #28]	; (80006e4 <main+0x90>)
 80006c6:	f002 f8c7 	bl	8002858 <iprintf>
  {
 80006ca:	e7d3      	b.n	8000674 <main+0x20>
 80006cc:	2000009c 	.word	0x2000009c
 80006d0:	0800439c 	.word	0x0800439c
 80006d4:	080043ac 	.word	0x080043ac
 80006d8:	080043b0 	.word	0x080043b0
 80006dc:	40020000 	.word	0x40020000
 80006e0:	080043c0 	.word	0x080043c0
 80006e4:	080043c4 	.word	0x080043c4

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 f8a6 	bl	8002848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <SystemClock_Config+0xcc>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SystemClock_Config+0xd0>)
 8000732:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000758:	2310      	movs	r3, #16
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800075c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000760:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000762:	2304      	movs	r3, #4
 8000764:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000766:	2304      	movs	r3, #4
 8000768:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	4618      	mov	r0, r3
 8000770:	f000 fd9c 	bl	80012ac <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800077a:	f000 f81f 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2302      	movs	r3, #2
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2102      	movs	r1, #2
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fffe 	bl	800179c <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a6:	f000 f809 	bl	80007bc <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>

080007c6 <_isatty>:
  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
}

int _isatty(int fd) {
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	db04      	blt.n	80007de <_isatty+0x18>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b02      	cmp	r3, #2
 80007d8:	dc01      	bgt.n	80007de <_isatty+0x18>
    return 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	e005      	b.n	80007ea <_isatty+0x24>

  errno = EBADF;
 80007de:	f002 f809 	bl	80027f4 <__errno>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2209      	movs	r2, #9
 80007e6:	601a      	str	r2, [r3, #0]
  return 0;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <_write>:

int _write(int fd, char* ptr, int len) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d002      	beq.n	800080c <_write+0x18>
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	2b02      	cmp	r3, #2
 800080a:	d111      	bne.n	8000830 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <_write+0x54>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	b29a      	uxth	r2, r3
 8000814:	f04f 33ff 	mov.w	r3, #4294967295
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	f001 fc80 	bl	800211e <HAL_UART_Transmit>
 800081e:	4603      	mov	r3, r0
 8000820:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000822:	7dfb      	ldrb	r3, [r7, #23]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d101      	bne.n	800082c <_write+0x38>
      return len;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	e008      	b.n	800083e <_write+0x4a>
    else
      return EIO;
 800082c:	2305      	movs	r3, #5
 800082e:	e006      	b.n	800083e <_write+0x4a>
  }
  errno = EBADF;
 8000830:	f001 ffe0 	bl	80027f4 <__errno>
 8000834:	4603      	mov	r3, r0
 8000836:	2209      	movs	r2, #9
 8000838:	601a      	str	r2, [r3, #0]
  return -1;
 800083a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000098 	.word	0x20000098

0800084c <_close>:

int _close(int fd) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	db04      	blt.n	8000864 <_close+0x18>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b02      	cmp	r3, #2
 800085e:	dc01      	bgt.n	8000864 <_close+0x18>
    return 0;
 8000860:	2300      	movs	r3, #0
 8000862:	e006      	b.n	8000872 <_close+0x26>

  errno = EBADF;
 8000864:	f001 ffc6 	bl	80027f4 <__errno>
 8000868:	4603      	mov	r3, r0
 800086a:	2209      	movs	r2, #9
 800086c:	601a      	str	r2, [r3, #0]
  return -1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800087a:	b580      	push	{r7, lr}
 800087c:	b084      	sub	sp, #16
 800087e:	af00      	add	r7, sp, #0
 8000880:	60f8      	str	r0, [r7, #12]
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000886:	f001 ffb5 	bl	80027f4 <__errno>
 800088a:	4603      	mov	r3, r0
 800088c:	2209      	movs	r2, #9
 800088e:	601a      	str	r2, [r3, #0]
  return -1;
 8000890:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000894:	4618      	mov	r0, r3
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <_read>:

int _read(int fd, char* ptr, int len) {
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d110      	bne.n	80008d0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <_read+0x4c>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	2201      	movs	r2, #1
 80008b8:	68b9      	ldr	r1, [r7, #8]
 80008ba:	f001 fcc2 	bl	8002242 <HAL_UART_Receive>
 80008be:	4603      	mov	r3, r0
 80008c0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <_read+0x30>
      return 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e008      	b.n	80008de <_read+0x42>
    else
      return EIO;
 80008cc:	2305      	movs	r3, #5
 80008ce:	e006      	b.n	80008de <_read+0x42>
  }
  errno = EBADF;
 80008d0:	f001 ff90 	bl	80027f4 <__errno>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2209      	movs	r2, #9
 80008d8:	601a      	str	r2, [r3, #0]
  return -1;
 80008da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000098 	.word	0x20000098

080008ec <_fstat>:

int _fstat(int fd, struct stat* st) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	db08      	blt.n	800090e <_fstat+0x22>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	dc05      	bgt.n	800090e <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000908:	605a      	str	r2, [r3, #4]
    return 0;
 800090a:	2300      	movs	r3, #0
 800090c:	e005      	b.n	800091a <_fstat+0x2e>
  }

  errno = EBADF;
 800090e:	f001 ff71 	bl	80027f4 <__errno>
 8000912:	4603      	mov	r3, r0
 8000914:	2209      	movs	r2, #9
 8000916:	601a      	str	r2, [r3, #0]
  return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000962:	2007      	movs	r0, #7
 8000964:	f000 fac2 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <NMI_Handler+0x4>

0800097a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <MemManage_Handler+0x4>

08000986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <UsageFault_Handler+0x4>

08000992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 f9a4 	bl	8000d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80009ce:	f001 f98b 	bl	8001ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000e4 	.word	0x200000e4

080009dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e4:	4a14      	ldr	r2, [pc, #80]	; (8000a38 <_sbrk+0x5c>)
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <_sbrk+0x60>)
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <_sbrk+0x64>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d102      	bne.n	80009fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <_sbrk+0x64>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <_sbrk+0x68>)
 80009fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <_sbrk+0x64>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4413      	add	r3, r2
 8000a06:	693a      	ldr	r2, [r7, #16]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d207      	bcs.n	8000a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a0c:	f001 fef2 	bl	80027f4 <__errno>
 8000a10:	4603      	mov	r3, r0
 8000a12:	220c      	movs	r2, #12
 8000a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e009      	b.n	8000a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <_sbrk+0x64>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a22:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <_sbrk+0x64>)
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a05      	ldr	r2, [pc, #20]	; (8000a40 <_sbrk+0x64>)
 8000a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20020000 	.word	0x20020000
 8000a3c:	00000400 	.word	0x00000400
 8000a40:	2000008c 	.word	0x2000008c
 8000a44:	20000188 	.word	0x20000188

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <MX_TIM10_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim11;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000a70:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_TIM10_Init+0x40>)
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <MX_TIM10_Init+0x44>)
 8000a74:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2800;
 8000a76:	4b0d      	ldr	r3, [pc, #52]	; (8000aac <MX_TIM10_Init+0x40>)
 8000a78:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8000a7c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MX_TIM10_Init+0x40>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 30000;
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_TIM10_Init+0x40>)
 8000a86:	f247 5230 	movw	r2, #30000	; 0x7530
 8000a8a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_TIM10_Init+0x40>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_TIM10_Init+0x40>)
 8000a94:	2280      	movs	r2, #128	; 0x80
 8000a96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_TIM10_Init+0x40>)
 8000a9a:	f001 f87b 	bl	8001b94 <HAL_TIM_Base_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000aa4:	f7ff fe8a 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000009c 	.word	0x2000009c
 8000ab0:	40014400 	.word	0x40014400

08000ab4 <HAL_TIM_Base_MspInit>:
  /* USER CODE END TIM11_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <HAL_TIM_Base_MspInit+0x70>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d10e      	bne.n	8000ae4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <HAL_TIM_Base_MspInit+0x74>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <HAL_TIM_Base_MspInit+0x74>)
 8000ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <HAL_TIM_Base_MspInit+0x74>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000ae2:	e01a      	b.n	8000b1a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM11)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <HAL_TIM_Base_MspInit+0x78>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d115      	bne.n	8000b1a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <HAL_TIM_Base_MspInit+0x74>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <HAL_TIM_Base_MspInit+0x74>)
 8000af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_TIM_Base_MspInit+0x74>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	201a      	movs	r0, #26
 8000b10:	f000 f9f7 	bl	8000f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000b14:	201a      	movs	r0, #26
 8000b16:	f000 fa10 	bl	8000f3a <HAL_NVIC_EnableIRQ>
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40014400 	.word	0x40014400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40014800 	.word	0x40014800

08000b30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_USART2_UART_Init+0x50>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b68:	f001 fa8c 	bl	8002084 <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b72:	f7ff fe23 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000012c 	.word	0x2000012c
 8000b80:	40004400 	.word	0x40004400

08000b84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <HAL_UART_MspInit+0x84>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d12b      	bne.n	8000bfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a10      	ldr	r2, [pc, #64]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_UART_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bde:	230c      	movs	r3, #12
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bee:	2307      	movs	r3, #7
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4805      	ldr	r0, [pc, #20]	; (8000c10 <HAL_UART_MspInit+0x8c>)
 8000bfa:	f000 f9b9 	bl	8000f70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000

08000c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c1a:	490e      	ldr	r1, [pc, #56]	; (8000c54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c1c:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c30:	4c0b      	ldr	r4, [pc, #44]	; (8000c60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c3e:	f7ff ff03 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c42:	f001 fddd 	bl	8002800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c46:	f7ff fd05 	bl	8000654 <main>
  bx  lr    
 8000c4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c58:	080045b0 	.word	0x080045b0
  ldr r2, =_sbss
 8000c5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c60:	20000184 	.word	0x20000184

08000c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c64:	e7fe      	b.n	8000c64 <ADC_IRQHandler>
	...

08000c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a0d      	ldr	r2, [pc, #52]	; (8000ca8 <HAL_Init+0x40>)
 8000c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_Init+0x40>)
 8000c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <HAL_Init+0x40>)
 8000c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f92b 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 f808 	bl	8000cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c9c:	f7ff fe42 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023c00 	.word	0x40023c00

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_InitTick+0x54>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_InitTick+0x58>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f943 	bl	8000f56 <HAL_SYSTICK_Config>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e00e      	b.n	8000cf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d80a      	bhi.n	8000cf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	f000 f90b 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cec:	4a06      	ldr	r2, [pc, #24]	; (8000d08 <HAL_InitTick+0x5c>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e000      	b.n	8000cf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000008 	.word	0x20000008
 8000d08:	20000004 	.word	0x20000004

08000d0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_IncTick+0x20>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x24>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <HAL_IncTick+0x24>)
 8000d1e:	6013      	str	r3, [r2, #0]
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000008 	.word	0x20000008
 8000d30:	20000170 	.word	0x20000170

08000d34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return uwTick;
 8000d38:	4b03      	ldr	r3, [pc, #12]	; (8000d48 <HAL_GetTick+0x14>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000170 	.word	0x20000170

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	; (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	; (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff29 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f14:	f7ff ff3e 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	6978      	ldr	r0, [r7, #20]
 8000f20:	f7ff ff8e 	bl	8000e40 <NVIC_EncodePriority>
 8000f24:	4602      	mov	r2, r0
 8000f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff5d 	bl	8000dec <__NVIC_SetPriority>
}
 8000f32:	bf00      	nop
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff31 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ffa2 	bl	8000ea8 <SysTick_Config>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	e159      	b.n	8001240 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	f040 8148 	bne.w	800123a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d005      	beq.n	8000fc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d130      	bne.n	8001024 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	68da      	ldr	r2, [r3, #12]
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	091b      	lsrs	r3, r3, #4
 800100e:	f003 0201 	and.w	r2, r3, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b03      	cmp	r3, #3
 800102e:	d017      	beq.n	8001060 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d123      	bne.n	80010b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	08da      	lsrs	r2, r3, #3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3208      	adds	r2, #8
 8001074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001078:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	691a      	ldr	r2, [r3, #16]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	08da      	lsrs	r2, r3, #3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3208      	adds	r2, #8
 80010ae:	69b9      	ldr	r1, [r7, #24]
 80010b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0203 	and.w	r2, r3, #3
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 80a2 	beq.w	800123a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b57      	ldr	r3, [pc, #348]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a56      	ldr	r2, [pc, #344]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 8001100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b54      	ldr	r3, [pc, #336]	; (8001258 <HAL_GPIO_Init+0x2e8>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001112:	4a52      	ldr	r2, [pc, #328]	; (800125c <HAL_GPIO_Init+0x2ec>)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	3302      	adds	r3, #2
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0303 	and.w	r3, r3, #3
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4013      	ands	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a49      	ldr	r2, [pc, #292]	; (8001260 <HAL_GPIO_Init+0x2f0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x202>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a48      	ldr	r2, [pc, #288]	; (8001264 <HAL_GPIO_Init+0x2f4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x1fe>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a47      	ldr	r2, [pc, #284]	; (8001268 <HAL_GPIO_Init+0x2f8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x1fa>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a46      	ldr	r2, [pc, #280]	; (800126c <HAL_GPIO_Init+0x2fc>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x1f6>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a45      	ldr	r2, [pc, #276]	; (8001270 <HAL_GPIO_Init+0x300>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x1f2>
 800115e:	2304      	movs	r3, #4
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x204>
 8001162:	2307      	movs	r3, #7
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x204>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x204>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x204>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x204>
 8001172:	2300      	movs	r3, #0
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001184:	4935      	ldr	r1, [pc, #212]	; (800125c <HAL_GPIO_Init+0x2ec>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <HAL_GPIO_Init+0x304>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b6:	4a2f      	ldr	r2, [pc, #188]	; (8001274 <HAL_GPIO_Init+0x304>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_GPIO_Init+0x304>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e0:	4a24      	ldr	r2, [pc, #144]	; (8001274 <HAL_GPIO_Init+0x304>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <HAL_GPIO_Init+0x304>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120a:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <HAL_GPIO_Init+0x304>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_GPIO_Init+0x304>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001234:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <HAL_GPIO_Init+0x304>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3301      	adds	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	f67f aea2 	bls.w	8000f8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40013800 	.word	0x40013800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40013c00 	.word	0x40013c00

08001278 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	807b      	strh	r3, [r7, #2]
 8001284:	4613      	mov	r3, r2
 8001286:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001288:	787b      	ldrb	r3, [r7, #1]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800128e:	887a      	ldrh	r2, [r7, #2]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001294:	e003      	b.n	800129e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001296:	887b      	ldrh	r3, [r7, #2]
 8001298:	041a      	lsls	r2, r3, #16
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	619a      	str	r2, [r3, #24]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d101      	bne.n	80012be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e264      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d075      	beq.n	80013b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ca:	4ba3      	ldr	r3, [pc, #652]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d00c      	beq.n	80012f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	4ba0      	ldr	r3, [pc, #640]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d112      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e2:	4b9d      	ldr	r3, [pc, #628]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012ee:	d10b      	bne.n	8001308 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	4b99      	ldr	r3, [pc, #612]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d05b      	beq.n	80013b4 <HAL_RCC_OscConfig+0x108>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d157      	bne.n	80013b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e23f      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001310:	d106      	bne.n	8001320 <HAL_RCC_OscConfig+0x74>
 8001312:	4b91      	ldr	r3, [pc, #580]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a90      	ldr	r2, [pc, #576]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e01d      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x98>
 800132a:	4b8b      	ldr	r3, [pc, #556]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a8a      	ldr	r2, [pc, #552]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b88      	ldr	r3, [pc, #544]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a87      	ldr	r2, [pc, #540]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e00b      	b.n	800135c <HAL_RCC_OscConfig+0xb0>
 8001344:	4b84      	ldr	r3, [pc, #528]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a83      	ldr	r2, [pc, #524]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 800134a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134e:	6013      	str	r3, [r2, #0]
 8001350:	4b81      	ldr	r3, [pc, #516]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a80      	ldr	r2, [pc, #512]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fce6 	bl	8000d34 <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fce2 	bl	8000d34 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	; 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e204      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137e:	4b76      	ldr	r3, [pc, #472]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f0      	beq.n	800136c <HAL_RCC_OscConfig+0xc0>
 800138a:	e014      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fcd2 	bl	8000d34 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fcce 	bl	8000d34 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	; 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e1f0      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a6:	4b6c      	ldr	r3, [pc, #432]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0xe8>
 80013b2:	e000      	b.n	80013b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d063      	beq.n	800148a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013c2:	4b65      	ldr	r3, [pc, #404]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 030c 	and.w	r3, r3, #12
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00b      	beq.n	80013e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ce:	4b62      	ldr	r3, [pc, #392]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d11c      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d116      	bne.n	8001414 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e6:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d005      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d001      	beq.n	80013fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e1c4      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fe:	4b56      	ldr	r3, [pc, #344]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	4952      	ldr	r1, [pc, #328]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 800140e:	4313      	orrs	r3, r2
 8001410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	e03a      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d020      	beq.n	800145e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800141c:	4b4f      	ldr	r3, [pc, #316]	; (800155c <HAL_RCC_OscConfig+0x2b0>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001422:	f7ff fc87 	bl	8000d34 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff fc83 	bl	8000d34 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e1a5      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143c:	4b46      	ldr	r3, [pc, #280]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0f0      	beq.n	800142a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001448:	4b43      	ldr	r3, [pc, #268]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4940      	ldr	r1, [pc, #256]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001458:	4313      	orrs	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
 800145c:	e015      	b.n	800148a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800145e:	4b3f      	ldr	r3, [pc, #252]	; (800155c <HAL_RCC_OscConfig+0x2b0>)
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fc66 	bl	8000d34 <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146c:	f7ff fc62 	bl	8000d34 <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e184      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1f0      	bne.n	800146c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	2b00      	cmp	r3, #0
 8001494:	d030      	beq.n	80014f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d016      	beq.n	80014cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149e:	4b30      	ldr	r3, [pc, #192]	; (8001560 <HAL_RCC_OscConfig+0x2b4>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a4:	f7ff fc46 	bl	8000d34 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ac:	f7ff fc42 	bl	8000d34 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e164      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014be:	4b26      	ldr	r3, [pc, #152]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x200>
 80014ca:	e015      	b.n	80014f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014cc:	4b24      	ldr	r3, [pc, #144]	; (8001560 <HAL_RCC_OscConfig+0x2b4>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d2:	f7ff fc2f 	bl	8000d34 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014da:	f7ff fc2b 	bl	8000d34 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e14d      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 80014ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1f0      	bne.n	80014da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80a0 	beq.w	8001646 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4b13      	ldr	r3, [pc, #76]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10f      	bne.n	8001536 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a0e      	ldr	r2, [pc, #56]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001532:	2301      	movs	r3, #1
 8001534:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_RCC_OscConfig+0x2b8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d121      	bne.n	8001586 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_RCC_OscConfig+0x2b8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_RCC_OscConfig+0x2b8>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154e:	f7ff fbf1 	bl	8000d34 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	e011      	b.n	800157a <HAL_RCC_OscConfig+0x2ce>
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	42470000 	.word	0x42470000
 8001560:	42470e80 	.word	0x42470e80
 8001564:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001568:	f7ff fbe4 	bl	8000d34 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e106      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157a:	4b85      	ldr	r3, [pc, #532]	; (8001790 <HAL_RCC_OscConfig+0x4e4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d106      	bne.n	800159c <HAL_RCC_OscConfig+0x2f0>
 800158e:	4b81      	ldr	r3, [pc, #516]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001592:	4a80      	ldr	r2, [pc, #512]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6713      	str	r3, [r2, #112]	; 0x70
 800159a:	e01c      	b.n	80015d6 <HAL_RCC_OscConfig+0x32a>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d10c      	bne.n	80015be <HAL_RCC_OscConfig+0x312>
 80015a4:	4b7b      	ldr	r3, [pc, #492]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a7a      	ldr	r2, [pc, #488]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70
 80015b0:	4b78      	ldr	r3, [pc, #480]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 80015b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b4:	4a77      	ldr	r2, [pc, #476]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6713      	str	r3, [r2, #112]	; 0x70
 80015bc:	e00b      	b.n	80015d6 <HAL_RCC_OscConfig+0x32a>
 80015be:	4b75      	ldr	r3, [pc, #468]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a74      	ldr	r2, [pc, #464]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ca:	4b72      	ldr	r3, [pc, #456]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 80015cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ce:	4a71      	ldr	r2, [pc, #452]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 80015d0:	f023 0304 	bic.w	r3, r3, #4
 80015d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d015      	beq.n	800160a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015de:	f7ff fba9 	bl	8000d34 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	e00a      	b.n	80015fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff fba5 	bl	8000d34 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e0c5      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	4b65      	ldr	r3, [pc, #404]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ee      	beq.n	80015e6 <HAL_RCC_OscConfig+0x33a>
 8001608:	e014      	b.n	8001634 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160a:	f7ff fb93 	bl	8000d34 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff fb8f 	bl	8000d34 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e0af      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	4b5a      	ldr	r3, [pc, #360]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 800162a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ee      	bne.n	8001612 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d105      	bne.n	8001646 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163a:	4b56      	ldr	r3, [pc, #344]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a55      	ldr	r2, [pc, #340]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 8001640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 809b 	beq.w	8001786 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001650:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d05c      	beq.n	8001716 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d141      	bne.n	80016e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001664:	4b4c      	ldr	r3, [pc, #304]	; (8001798 <HAL_RCC_OscConfig+0x4ec>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fb63 	bl	8000d34 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001672:	f7ff fb5f 	bl	8000d34 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e081      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001684:	4b43      	ldr	r3, [pc, #268]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	019b      	lsls	r3, r3, #6
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	085b      	lsrs	r3, r3, #1
 80016a8:	3b01      	subs	r3, #1
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	061b      	lsls	r3, r3, #24
 80016b4:	4937      	ldr	r1, [pc, #220]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ba:	4b37      	ldr	r3, [pc, #220]	; (8001798 <HAL_RCC_OscConfig+0x4ec>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c0:	f7ff fb38 	bl	8000d34 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c8:	f7ff fb34 	bl	8000d34 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e056      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016da:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x41c>
 80016e6:	e04e      	b.n	8001786 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <HAL_RCC_OscConfig+0x4ec>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fb21 	bl	8000d34 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff fb1d 	bl	8000d34 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e03f      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x44a>
 8001714:	e037      	b.n	8001786 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e032      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <HAL_RCC_OscConfig+0x4e8>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d028      	beq.n	8001782 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d121      	bne.n	8001782 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001748:	429a      	cmp	r2, r3
 800174a:	d11a      	bne.n	8001782 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001752:	4013      	ands	r3, r2
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001758:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800175a:	4293      	cmp	r3, r2
 800175c:	d111      	bne.n	8001782 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	3b01      	subs	r3, #1
 800176c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d107      	bne.n	8001782 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d001      	beq.n	8001786 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40007000 	.word	0x40007000
 8001794:	40023800 	.word	0x40023800
 8001798:	42470060 	.word	0x42470060

0800179c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0cc      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d90c      	bls.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017be:	4b65      	ldr	r3, [pc, #404]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017c6:	4b63      	ldr	r3, [pc, #396]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d001      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0b8      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d020      	beq.n	8001826 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017f0:	4b59      	ldr	r3, [pc, #356]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4a58      	ldr	r2, [pc, #352]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0308 	and.w	r3, r3, #8
 8001804:	2b00      	cmp	r3, #0
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001808:	4b53      	ldr	r3, [pc, #332]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	4a52      	ldr	r2, [pc, #328]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800180e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001812:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001814:	4b50      	ldr	r3, [pc, #320]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	494d      	ldr	r1, [pc, #308]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d044      	beq.n	80018bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d119      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e07f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d003      	beq.n	800185a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001856:	2b03      	cmp	r3, #3
 8001858:	d107      	bne.n	800186a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185a:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d109      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e06f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e067      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800187a:	4b37      	ldr	r3, [pc, #220]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 0203 	bic.w	r2, r3, #3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4934      	ldr	r1, [pc, #208]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800188c:	f7ff fa52 	bl	8000d34 <HAL_GetTick>
 8001890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	e00a      	b.n	80018aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff fa4e 	bl	8000d34 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e04f      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 020c 	and.w	r2, r3, #12
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d1eb      	bne.n	8001894 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0307 	and.w	r3, r3, #7
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d20c      	bcs.n	80018e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e032      	b.n	800194a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d008      	beq.n	8001902 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	4916      	ldr	r1, [pc, #88]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	2b00      	cmp	r3, #0
 800190c:	d009      	beq.n	8001922 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800190e:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	490e      	ldr	r1, [pc, #56]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	4313      	orrs	r3, r2
 8001920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001922:	f000 f821 	bl	8001968 <HAL_RCC_GetSysClockFreq>
 8001926:	4602      	mov	r2, r0
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	490a      	ldr	r1, [pc, #40]	; (800195c <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	5ccb      	ldrb	r3, [r1, r3]
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	4a09      	ldr	r2, [pc, #36]	; (8001960 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_RCC_ClockConfig+0x1c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff f9b2 	bl	8000cac <HAL_InitTick>

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023c00 	.word	0x40023c00
 8001958:	40023800 	.word	0x40023800
 800195c:	080043d4 	.word	0x080043d4
 8001960:	20000000 	.word	0x20000000
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001968:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800196c:	b084      	sub	sp, #16
 800196e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	2300      	movs	r3, #0
 800197a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001980:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b08      	cmp	r3, #8
 800198a:	d00d      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x40>
 800198c:	2b08      	cmp	r3, #8
 800198e:	f200 80bd 	bhi.w	8001b0c <HAL_RCC_GetSysClockFreq+0x1a4>
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x34>
 8001996:	2b04      	cmp	r3, #4
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800199a:	e0b7      	b.n	8001b0c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b61      	ldr	r3, [pc, #388]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800199e:	60bb      	str	r3, [r7, #8]
       break;
 80019a0:	e0b7      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019a2:	4b61      	ldr	r3, [pc, #388]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019a4:	60bb      	str	r3, [r7, #8]
      break;
 80019a6:	e0b4      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a8:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b2:	4b5b      	ldr	r3, [pc, #364]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d04d      	beq.n	8001a5a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	4b58      	ldr	r3, [pc, #352]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	099b      	lsrs	r3, r3, #6
 80019c4:	461a      	mov	r2, r3
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	ea02 0800 	and.w	r8, r2, r0
 80019d6:	ea03 0901 	and.w	r9, r3, r1
 80019da:	4640      	mov	r0, r8
 80019dc:	4649      	mov	r1, r9
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	014b      	lsls	r3, r1, #5
 80019e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019ec:	0142      	lsls	r2, r0, #5
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	ebb0 0008 	subs.w	r0, r0, r8
 80019f6:	eb61 0109 	sbc.w	r1, r1, r9
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	f04f 0300 	mov.w	r3, #0
 8001a02:	018b      	lsls	r3, r1, #6
 8001a04:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001a08:	0182      	lsls	r2, r0, #6
 8001a0a:	1a12      	subs	r2, r2, r0
 8001a0c:	eb63 0301 	sbc.w	r3, r3, r1
 8001a10:	f04f 0000 	mov.w	r0, #0
 8001a14:	f04f 0100 	mov.w	r1, #0
 8001a18:	00d9      	lsls	r1, r3, #3
 8001a1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001a1e:	00d0      	lsls	r0, r2, #3
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	eb12 0208 	adds.w	r2, r2, r8
 8001a28:	eb43 0309 	adc.w	r3, r3, r9
 8001a2c:	f04f 0000 	mov.w	r0, #0
 8001a30:	f04f 0100 	mov.w	r1, #0
 8001a34:	0259      	lsls	r1, r3, #9
 8001a36:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001a3a:	0250      	lsls	r0, r2, #9
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	461a      	mov	r2, r3
 8001a48:	f04f 0300 	mov.w	r3, #0
 8001a4c:	f7fe fc18 	bl	8000280 <__aeabi_uldivmod>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4613      	mov	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	e04a      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5a:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	099b      	lsrs	r3, r3, #6
 8001a60:	461a      	mov	r2, r3
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	ea02 0400 	and.w	r4, r2, r0
 8001a72:	ea03 0501 	and.w	r5, r3, r1
 8001a76:	4620      	mov	r0, r4
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	014b      	lsls	r3, r1, #5
 8001a84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a88:	0142      	lsls	r2, r0, #5
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	1b00      	subs	r0, r0, r4
 8001a90:	eb61 0105 	sbc.w	r1, r1, r5
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	018b      	lsls	r3, r1, #6
 8001a9e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aa2:	0182      	lsls	r2, r0, #6
 8001aa4:	1a12      	subs	r2, r2, r0
 8001aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aaa:	f04f 0000 	mov.w	r0, #0
 8001aae:	f04f 0100 	mov.w	r1, #0
 8001ab2:	00d9      	lsls	r1, r3, #3
 8001ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ab8:	00d0      	lsls	r0, r2, #3
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	1912      	adds	r2, r2, r4
 8001ac0:	eb45 0303 	adc.w	r3, r5, r3
 8001ac4:	f04f 0000 	mov.w	r0, #0
 8001ac8:	f04f 0100 	mov.w	r1, #0
 8001acc:	0299      	lsls	r1, r3, #10
 8001ace:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ad2:	0290      	lsls	r0, r2, #10
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	f7fe fbcc 	bl	8000280 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	0c1b      	lsrs	r3, r3, #16
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	3301      	adds	r3, #1
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	60bb      	str	r3, [r7, #8]
      break;
 8001b0a:	e002      	b.n	8001b12 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001b0e:	60bb      	str	r3, [r7, #8]
      break;
 8001b10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b12:	68bb      	ldr	r3, [r7, #8]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	00f42400 	.word	0x00f42400
 8001b28:	007a1200 	.word	0x007a1200

08001b2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b48:	f7ff fff0 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0a9b      	lsrs	r3, r3, #10
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	080043e4 	.word	0x080043e4

08001b6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b70:	f7ff ffdc 	bl	8001b2c <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0b5b      	lsrs	r3, r3, #13
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4903      	ldr	r1, [pc, #12]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	080043e4 	.word	0x080043e4

08001b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e041      	b.n	8001c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7fe ff7a 	bl	8000ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3304      	adds	r3, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4610      	mov	r0, r2
 8001bd4:	f000 f9c2 	bl	8001f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d001      	beq.n	8001c4c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e03c      	b.n	8001cc6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1e      	ldr	r2, [pc, #120]	; (8001cd4 <HAL_TIM_Base_Start+0xa0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d018      	beq.n	8001c90 <HAL_TIM_Base_Start+0x5c>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c66:	d013      	beq.n	8001c90 <HAL_TIM_Base_Start+0x5c>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1a      	ldr	r2, [pc, #104]	; (8001cd8 <HAL_TIM_Base_Start+0xa4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00e      	beq.n	8001c90 <HAL_TIM_Base_Start+0x5c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_TIM_Base_Start+0xa8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_TIM_Base_Start+0x5c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_TIM_Base_Start+0xac>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_TIM_Base_Start+0x5c>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <HAL_TIM_Base_Start+0xb0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d111      	bne.n	8001cb4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d010      	beq.n	8001cc4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb2:	e007      	b.n	8001cc4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	40000400 	.word	0x40000400
 8001cdc:	40000800 	.word	0x40000800
 8001ce0:	40000c00 	.word	0x40000c00
 8001ce4:	40014000 	.word	0x40014000

08001ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d122      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d11b      	bne.n	8001d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f06f 0202 	mvn.w	r2, #2
 8001d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8f8 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001d30:	e005      	b.n	8001d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 f8ea 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f8fb 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0304 	and.w	r3, r3, #4
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d122      	bne.n	8001d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d11b      	bne.n	8001d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f06f 0204 	mvn.w	r2, #4
 8001d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f8ce 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001d84:	e005      	b.n	8001d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f8c0 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f000 f8d1 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d122      	bne.n	8001dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d11b      	bne.n	8001dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0208 	mvn.w	r2, #8
 8001dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8a4 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e005      	b.n	8001de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f896 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f8a7 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	f003 0310 	and.w	r3, r3, #16
 8001df6:	2b10      	cmp	r3, #16
 8001df8:	d122      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	f003 0310 	and.w	r3, r3, #16
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d11b      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f06f 0210 	mvn.w	r2, #16
 8001e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2208      	movs	r2, #8
 8001e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f87a 	bl	8001f20 <HAL_TIM_IC_CaptureCallback>
 8001e2c:	e005      	b.n	8001e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f86c 	bl	8001f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f87d 	bl	8001f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d10e      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d107      	bne.n	8001e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0201 	mvn.w	r2, #1
 8001e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f846 	bl	8001ef8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b80      	cmp	r3, #128	; 0x80
 8001e78:	d10e      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	d107      	bne.n	8001e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8ec 	bl	8002070 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea2:	2b40      	cmp	r3, #64	; 0x40
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb0:	2b40      	cmp	r3, #64	; 0x40
 8001eb2:	d107      	bne.n	8001ec4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f842 	bl	8001f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d10e      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b20      	cmp	r3, #32
 8001ede:	d107      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0220 	mvn.w	r2, #32
 8001ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8b6 	bl	800205c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a34      	ldr	r2, [pc, #208]	; (8002040 <TIM_Base_SetConfig+0xe4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d00f      	beq.n	8001f94 <TIM_Base_SetConfig+0x38>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f7a:	d00b      	beq.n	8001f94 <TIM_Base_SetConfig+0x38>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a31      	ldr	r2, [pc, #196]	; (8002044 <TIM_Base_SetConfig+0xe8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <TIM_Base_SetConfig+0x38>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a30      	ldr	r2, [pc, #192]	; (8002048 <TIM_Base_SetConfig+0xec>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <TIM_Base_SetConfig+0x38>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a2f      	ldr	r2, [pc, #188]	; (800204c <TIM_Base_SetConfig+0xf0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d108      	bne.n	8001fa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a25      	ldr	r2, [pc, #148]	; (8002040 <TIM_Base_SetConfig+0xe4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01b      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb4:	d017      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a22      	ldr	r2, [pc, #136]	; (8002044 <TIM_Base_SetConfig+0xe8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a21      	ldr	r2, [pc, #132]	; (8002048 <TIM_Base_SetConfig+0xec>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00f      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a20      	ldr	r2, [pc, #128]	; (800204c <TIM_Base_SetConfig+0xf0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00b      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a1f      	ldr	r2, [pc, #124]	; (8002050 <TIM_Base_SetConfig+0xf4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d007      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1e      	ldr	r2, [pc, #120]	; (8002054 <TIM_Base_SetConfig+0xf8>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d003      	beq.n	8001fe6 <TIM_Base_SetConfig+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <TIM_Base_SetConfig+0xfc>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d108      	bne.n	8001ff8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <TIM_Base_SetConfig+0xe4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d103      	bne.n	800202c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	691a      	ldr	r2, [r3, #16]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	615a      	str	r2, [r3, #20]
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40010000 	.word	0x40010000
 8002044:	40000400 	.word	0x40000400
 8002048:	40000800 	.word	0x40000800
 800204c:	40000c00 	.word	0x40000c00
 8002050:	40014000 	.word	0x40014000
 8002054:	40014400 	.word	0x40014400
 8002058:	40014800 	.word	0x40014800

0800205c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d101      	bne.n	8002096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e03f      	b.n	8002116 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d106      	bne.n	80020b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7fe fd6a 	bl	8000b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2224      	movs	r2, #36	; 0x24
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 f9cb 	bl	8002464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	691a      	ldr	r2, [r3, #16]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b08a      	sub	sp, #40	; 0x28
 8002122:	af02      	add	r7, sp, #8
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4613      	mov	r3, r2
 800212c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b20      	cmp	r3, #32
 800213c:	d17c      	bne.n	8002238 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_UART_Transmit+0x2c>
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e075      	b.n	800223a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002154:	2b01      	cmp	r3, #1
 8002156:	d101      	bne.n	800215c <HAL_UART_Transmit+0x3e>
 8002158:	2302      	movs	r3, #2
 800215a:	e06e      	b.n	800223a <HAL_UART_Transmit+0x11c>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2221      	movs	r2, #33	; 0x21
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002172:	f7fe fddf 	bl	8000d34 <HAL_GetTick>
 8002176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	88fa      	ldrh	r2, [r7, #6]
 8002182:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218c:	d108      	bne.n	80021a0 <HAL_UART_Transmit+0x82>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d104      	bne.n	80021a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	61bb      	str	r3, [r7, #24]
 800219e:	e003      	b.n	80021a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021b0:	e02a      	b.n	8002208 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2200      	movs	r2, #0
 80021ba:	2180      	movs	r1, #128	; 0x80
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f8e2 	bl	8002386 <UART_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e036      	b.n	800223a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10b      	bne.n	80021ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	3302      	adds	r3, #2
 80021e6:	61bb      	str	r3, [r7, #24]
 80021e8:	e007      	b.n	80021fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	781a      	ldrb	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	3301      	adds	r3, #1
 80021f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1cf      	bne.n	80021b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2200      	movs	r2, #0
 800221a:	2140      	movs	r1, #64	; 0x40
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 f8b2 	bl	8002386 <UART_WaitOnFlagUntilTimeout>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e006      	b.n	800223a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e000      	b.n	800223a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002238:	2302      	movs	r3, #2
  }
}
 800223a:	4618      	mov	r0, r3
 800223c:	3720      	adds	r7, #32
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b08a      	sub	sp, #40	; 0x28
 8002246:	af02      	add	r7, sp, #8
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	603b      	str	r3, [r7, #0]
 800224e:	4613      	mov	r3, r2
 8002250:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b20      	cmp	r3, #32
 8002260:	f040 808c 	bne.w	800237c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d002      	beq.n	8002270 <HAL_UART_Receive+0x2e>
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e084      	b.n	800237e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_UART_Receive+0x40>
 800227e:	2302      	movs	r3, #2
 8002280:	e07d      	b.n	800237e <HAL_UART_Receive+0x13c>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2200      	movs	r2, #0
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2222      	movs	r2, #34	; 0x22
 8002294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2200      	movs	r2, #0
 800229c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800229e:	f7fe fd49 	bl	8000d34 <HAL_GetTick>
 80022a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	88fa      	ldrh	r2, [r7, #6]
 80022a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	88fa      	ldrh	r2, [r7, #6]
 80022ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b8:	d108      	bne.n	80022cc <HAL_UART_Receive+0x8a>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d104      	bne.n	80022cc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	e003      	b.n	80022d4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80022dc:	e043      	b.n	8002366 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2200      	movs	r2, #0
 80022e6:	2120      	movs	r1, #32
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 f84c 	bl	8002386 <UART_WaitOnFlagUntilTimeout>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e042      	b.n	800237e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10c      	bne.n	8002318 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	b29b      	uxth	r3, r3
 8002306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800230a:	b29a      	uxth	r2, r3
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	3302      	adds	r3, #2
 8002314:	61bb      	str	r3, [r7, #24]
 8002316:	e01f      	b.n	8002358 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002320:	d007      	beq.n	8002332 <HAL_UART_Receive+0xf0>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10a      	bne.n	8002340 <HAL_UART_Receive+0xfe>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e008      	b.n	8002352 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800234c:	b2da      	uxtb	r2, r3
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3301      	adds	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1b6      	bne.n	80022de <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2220      	movs	r2, #32
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002378:	2300      	movs	r3, #0
 800237a:	e000      	b.n	800237e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800237c:	2302      	movs	r3, #2
  }
}
 800237e:	4618      	mov	r0, r3
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b090      	sub	sp, #64	; 0x40
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	4613      	mov	r3, r2
 8002394:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002396:	e050      	b.n	800243a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800239a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239e:	d04c      	beq.n	800243a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80023a6:	f7fe fcc5 	bl	8000d34 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d241      	bcs.n	800243a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	330c      	adds	r3, #12
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	e853 3f00 	ldrex	r3, [r3]
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80023cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	330c      	adds	r3, #12
 80023d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023d6:	637a      	str	r2, [r7, #52]	; 0x34
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023de:	e841 2300 	strex	r3, r2, [r1]
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1e5      	bne.n	80023b6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	3314      	adds	r3, #20
 80023f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	e853 3f00 	ldrex	r3, [r3]
 80023f8:	613b      	str	r3, [r7, #16]
   return(result);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	63bb      	str	r3, [r7, #56]	; 0x38
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	3314      	adds	r3, #20
 8002408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800240a:	623a      	str	r2, [r7, #32]
 800240c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240e:	69f9      	ldr	r1, [r7, #28]
 8002410:	6a3a      	ldr	r2, [r7, #32]
 8002412:	e841 2300 	strex	r3, r2, [r1]
 8002416:	61bb      	str	r3, [r7, #24]
   return(result);
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1e5      	bne.n	80023ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2220      	movs	r2, #32
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2220      	movs	r2, #32
 800242a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e00f      	b.n	800245a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	4013      	ands	r3, r2
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	429a      	cmp	r2, r3
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	429a      	cmp	r2, r3
 8002456:	d09f      	beq.n	8002398 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3740      	adds	r7, #64	; 0x40
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002468:	b09f      	sub	sp, #124	; 0x7c
 800246a:	af00      	add	r7, sp, #0
 800246c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800246e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247a:	68d9      	ldr	r1, [r3, #12]
 800247c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	ea40 0301 	orr.w	r3, r0, r1
 8002484:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	431a      	orrs	r2, r3
 8002490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	431a      	orrs	r2, r3
 8002496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4313      	orrs	r3, r2
 800249c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800249e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80024a8:	f021 010c 	bic.w	r1, r1, #12
 80024ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024b2:	430b      	orrs	r3, r1
 80024b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80024c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c2:	6999      	ldr	r1, [r3, #24]
 80024c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	ea40 0301 	orr.w	r3, r0, r1
 80024cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	4bc5      	ldr	r3, [pc, #788]	; (80027e8 <UART_SetConfig+0x384>)
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d004      	beq.n	80024e2 <UART_SetConfig+0x7e>
 80024d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4bc3      	ldr	r3, [pc, #780]	; (80027ec <UART_SetConfig+0x388>)
 80024de:	429a      	cmp	r2, r3
 80024e0:	d103      	bne.n	80024ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80024e2:	f7ff fb43 	bl	8001b6c <HAL_RCC_GetPCLK2Freq>
 80024e6:	6778      	str	r0, [r7, #116]	; 0x74
 80024e8:	e002      	b.n	80024f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024ea:	f7ff fb2b 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
 80024ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024f8:	f040 80b6 	bne.w	8002668 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024fe:	461c      	mov	r4, r3
 8002500:	f04f 0500 	mov.w	r5, #0
 8002504:	4622      	mov	r2, r4
 8002506:	462b      	mov	r3, r5
 8002508:	1891      	adds	r1, r2, r2
 800250a:	6439      	str	r1, [r7, #64]	; 0x40
 800250c:	415b      	adcs	r3, r3
 800250e:	647b      	str	r3, [r7, #68]	; 0x44
 8002510:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002514:	1912      	adds	r2, r2, r4
 8002516:	eb45 0303 	adc.w	r3, r5, r3
 800251a:	f04f 0000 	mov.w	r0, #0
 800251e:	f04f 0100 	mov.w	r1, #0
 8002522:	00d9      	lsls	r1, r3, #3
 8002524:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002528:	00d0      	lsls	r0, r2, #3
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	1911      	adds	r1, r2, r4
 8002530:	6639      	str	r1, [r7, #96]	; 0x60
 8002532:	416b      	adcs	r3, r5
 8002534:	667b      	str	r3, [r7, #100]	; 0x64
 8002536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	461a      	mov	r2, r3
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	1891      	adds	r1, r2, r2
 8002542:	63b9      	str	r1, [r7, #56]	; 0x38
 8002544:	415b      	adcs	r3, r3
 8002546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002548:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800254c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002550:	f7fd fe96 	bl	8000280 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4ba5      	ldr	r3, [pc, #660]	; (80027f0 <UART_SetConfig+0x38c>)
 800255a:	fba3 2302 	umull	r2, r3, r3, r2
 800255e:	095b      	lsrs	r3, r3, #5
 8002560:	011e      	lsls	r6, r3, #4
 8002562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002564:	461c      	mov	r4, r3
 8002566:	f04f 0500 	mov.w	r5, #0
 800256a:	4622      	mov	r2, r4
 800256c:	462b      	mov	r3, r5
 800256e:	1891      	adds	r1, r2, r2
 8002570:	6339      	str	r1, [r7, #48]	; 0x30
 8002572:	415b      	adcs	r3, r3
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
 8002576:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800257a:	1912      	adds	r2, r2, r4
 800257c:	eb45 0303 	adc.w	r3, r5, r3
 8002580:	f04f 0000 	mov.w	r0, #0
 8002584:	f04f 0100 	mov.w	r1, #0
 8002588:	00d9      	lsls	r1, r3, #3
 800258a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800258e:	00d0      	lsls	r0, r2, #3
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	1911      	adds	r1, r2, r4
 8002596:	65b9      	str	r1, [r7, #88]	; 0x58
 8002598:	416b      	adcs	r3, r5
 800259a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800259c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	461a      	mov	r2, r3
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	1891      	adds	r1, r2, r2
 80025a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80025aa:	415b      	adcs	r3, r3
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80025b6:	f7fd fe63 	bl	8000280 <__aeabi_uldivmod>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4b8c      	ldr	r3, [pc, #560]	; (80027f0 <UART_SetConfig+0x38c>)
 80025c0:	fba3 1302 	umull	r1, r3, r3, r2
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	2164      	movs	r1, #100	; 0x64
 80025c8:	fb01 f303 	mul.w	r3, r1, r3
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	3332      	adds	r3, #50	; 0x32
 80025d2:	4a87      	ldr	r2, [pc, #540]	; (80027f0 <UART_SetConfig+0x38c>)
 80025d4:	fba2 2303 	umull	r2, r3, r2, r3
 80025d8:	095b      	lsrs	r3, r3, #5
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80025e0:	441e      	add	r6, r3
 80025e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e4:	4618      	mov	r0, r3
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	1894      	adds	r4, r2, r2
 80025f0:	623c      	str	r4, [r7, #32]
 80025f2:	415b      	adcs	r3, r3
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025fa:	1812      	adds	r2, r2, r0
 80025fc:	eb41 0303 	adc.w	r3, r1, r3
 8002600:	f04f 0400 	mov.w	r4, #0
 8002604:	f04f 0500 	mov.w	r5, #0
 8002608:	00dd      	lsls	r5, r3, #3
 800260a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800260e:	00d4      	lsls	r4, r2, #3
 8002610:	4622      	mov	r2, r4
 8002612:	462b      	mov	r3, r5
 8002614:	1814      	adds	r4, r2, r0
 8002616:	653c      	str	r4, [r7, #80]	; 0x50
 8002618:	414b      	adcs	r3, r1
 800261a:	657b      	str	r3, [r7, #84]	; 0x54
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	461a      	mov	r2, r3
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	1891      	adds	r1, r2, r2
 8002628:	61b9      	str	r1, [r7, #24]
 800262a:	415b      	adcs	r3, r3
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002632:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002636:	f7fd fe23 	bl	8000280 <__aeabi_uldivmod>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4b6c      	ldr	r3, [pc, #432]	; (80027f0 <UART_SetConfig+0x38c>)
 8002640:	fba3 1302 	umull	r1, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	2164      	movs	r1, #100	; 0x64
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	3332      	adds	r3, #50	; 0x32
 8002652:	4a67      	ldr	r2, [pc, #412]	; (80027f0 <UART_SetConfig+0x38c>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	f003 0207 	and.w	r2, r3, #7
 800265e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4432      	add	r2, r6
 8002664:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002666:	e0b9      	b.n	80027dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800266a:	461c      	mov	r4, r3
 800266c:	f04f 0500 	mov.w	r5, #0
 8002670:	4622      	mov	r2, r4
 8002672:	462b      	mov	r3, r5
 8002674:	1891      	adds	r1, r2, r2
 8002676:	6139      	str	r1, [r7, #16]
 8002678:	415b      	adcs	r3, r3
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002680:	1912      	adds	r2, r2, r4
 8002682:	eb45 0303 	adc.w	r3, r5, r3
 8002686:	f04f 0000 	mov.w	r0, #0
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	00d9      	lsls	r1, r3, #3
 8002690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002694:	00d0      	lsls	r0, r2, #3
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	eb12 0804 	adds.w	r8, r2, r4
 800269e:	eb43 0905 	adc.w	r9, r3, r5
 80026a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f04f 0100 	mov.w	r1, #0
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	008b      	lsls	r3, r1, #2
 80026b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026ba:	0082      	lsls	r2, r0, #2
 80026bc:	4640      	mov	r0, r8
 80026be:	4649      	mov	r1, r9
 80026c0:	f7fd fdde 	bl	8000280 <__aeabi_uldivmod>
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4b49      	ldr	r3, [pc, #292]	; (80027f0 <UART_SetConfig+0x38c>)
 80026ca:	fba3 2302 	umull	r2, r3, r3, r2
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	011e      	lsls	r6, r3, #4
 80026d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d4:	4618      	mov	r0, r3
 80026d6:	f04f 0100 	mov.w	r1, #0
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	1894      	adds	r4, r2, r2
 80026e0:	60bc      	str	r4, [r7, #8]
 80026e2:	415b      	adcs	r3, r3
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ea:	1812      	adds	r2, r2, r0
 80026ec:	eb41 0303 	adc.w	r3, r1, r3
 80026f0:	f04f 0400 	mov.w	r4, #0
 80026f4:	f04f 0500 	mov.w	r5, #0
 80026f8:	00dd      	lsls	r5, r3, #3
 80026fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026fe:	00d4      	lsls	r4, r2, #3
 8002700:	4622      	mov	r2, r4
 8002702:	462b      	mov	r3, r5
 8002704:	1814      	adds	r4, r2, r0
 8002706:	64bc      	str	r4, [r7, #72]	; 0x48
 8002708:	414b      	adcs	r3, r1
 800270a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800270c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4618      	mov	r0, r3
 8002712:	f04f 0100 	mov.w	r1, #0
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	008b      	lsls	r3, r1, #2
 8002720:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002724:	0082      	lsls	r2, r0, #2
 8002726:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800272a:	f7fd fda9 	bl	8000280 <__aeabi_uldivmod>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <UART_SetConfig+0x38c>)
 8002734:	fba3 1302 	umull	r1, r3, r3, r2
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	2164      	movs	r1, #100	; 0x64
 800273c:	fb01 f303 	mul.w	r3, r1, r3
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	3332      	adds	r3, #50	; 0x32
 8002746:	4a2a      	ldr	r2, [pc, #168]	; (80027f0 <UART_SetConfig+0x38c>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002752:	441e      	add	r6, r3
 8002754:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002756:	4618      	mov	r0, r3
 8002758:	f04f 0100 	mov.w	r1, #0
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	1894      	adds	r4, r2, r2
 8002762:	603c      	str	r4, [r7, #0]
 8002764:	415b      	adcs	r3, r3
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800276c:	1812      	adds	r2, r2, r0
 800276e:	eb41 0303 	adc.w	r3, r1, r3
 8002772:	f04f 0400 	mov.w	r4, #0
 8002776:	f04f 0500 	mov.w	r5, #0
 800277a:	00dd      	lsls	r5, r3, #3
 800277c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002780:	00d4      	lsls	r4, r2, #3
 8002782:	4622      	mov	r2, r4
 8002784:	462b      	mov	r3, r5
 8002786:	eb12 0a00 	adds.w	sl, r2, r0
 800278a:	eb43 0b01 	adc.w	fp, r3, r1
 800278e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4618      	mov	r0, r3
 8002794:	f04f 0100 	mov.w	r1, #0
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	008b      	lsls	r3, r1, #2
 80027a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027a6:	0082      	lsls	r2, r0, #2
 80027a8:	4650      	mov	r0, sl
 80027aa:	4659      	mov	r1, fp
 80027ac:	f7fd fd68 	bl	8000280 <__aeabi_uldivmod>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <UART_SetConfig+0x38c>)
 80027b6:	fba3 1302 	umull	r1, r3, r3, r2
 80027ba:	095b      	lsrs	r3, r3, #5
 80027bc:	2164      	movs	r1, #100	; 0x64
 80027be:	fb01 f303 	mul.w	r3, r1, r3
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	3332      	adds	r3, #50	; 0x32
 80027c8:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <UART_SetConfig+0x38c>)
 80027ca:	fba2 2303 	umull	r2, r3, r2, r3
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	f003 020f 	and.w	r2, r3, #15
 80027d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4432      	add	r2, r6
 80027da:	609a      	str	r2, [r3, #8]
}
 80027dc:	bf00      	nop
 80027de:	377c      	adds	r7, #124	; 0x7c
 80027e0:	46bd      	mov	sp, r7
 80027e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027e6:	bf00      	nop
 80027e8:	40011000 	.word	0x40011000
 80027ec:	40011400 	.word	0x40011400
 80027f0:	51eb851f 	.word	0x51eb851f

080027f4 <__errno>:
 80027f4:	4b01      	ldr	r3, [pc, #4]	; (80027fc <__errno+0x8>)
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	2000000c 	.word	0x2000000c

08002800 <__libc_init_array>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	4d0d      	ldr	r5, [pc, #52]	; (8002838 <__libc_init_array+0x38>)
 8002804:	4c0d      	ldr	r4, [pc, #52]	; (800283c <__libc_init_array+0x3c>)
 8002806:	1b64      	subs	r4, r4, r5
 8002808:	10a4      	asrs	r4, r4, #2
 800280a:	2600      	movs	r6, #0
 800280c:	42a6      	cmp	r6, r4
 800280e:	d109      	bne.n	8002824 <__libc_init_array+0x24>
 8002810:	4d0b      	ldr	r5, [pc, #44]	; (8002840 <__libc_init_array+0x40>)
 8002812:	4c0c      	ldr	r4, [pc, #48]	; (8002844 <__libc_init_array+0x44>)
 8002814:	f001 fdb6 	bl	8004384 <_init>
 8002818:	1b64      	subs	r4, r4, r5
 800281a:	10a4      	asrs	r4, r4, #2
 800281c:	2600      	movs	r6, #0
 800281e:	42a6      	cmp	r6, r4
 8002820:	d105      	bne.n	800282e <__libc_init_array+0x2e>
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	f855 3b04 	ldr.w	r3, [r5], #4
 8002828:	4798      	blx	r3
 800282a:	3601      	adds	r6, #1
 800282c:	e7ee      	b.n	800280c <__libc_init_array+0xc>
 800282e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002832:	4798      	blx	r3
 8002834:	3601      	adds	r6, #1
 8002836:	e7f2      	b.n	800281e <__libc_init_array+0x1e>
 8002838:	080045a8 	.word	0x080045a8
 800283c:	080045a8 	.word	0x080045a8
 8002840:	080045a8 	.word	0x080045a8
 8002844:	080045ac 	.word	0x080045ac

08002848 <memset>:
 8002848:	4402      	add	r2, r0
 800284a:	4603      	mov	r3, r0
 800284c:	4293      	cmp	r3, r2
 800284e:	d100      	bne.n	8002852 <memset+0xa>
 8002850:	4770      	bx	lr
 8002852:	f803 1b01 	strb.w	r1, [r3], #1
 8002856:	e7f9      	b.n	800284c <memset+0x4>

08002858 <iprintf>:
 8002858:	b40f      	push	{r0, r1, r2, r3}
 800285a:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <iprintf+0x2c>)
 800285c:	b513      	push	{r0, r1, r4, lr}
 800285e:	681c      	ldr	r4, [r3, #0]
 8002860:	b124      	cbz	r4, 800286c <iprintf+0x14>
 8002862:	69a3      	ldr	r3, [r4, #24]
 8002864:	b913      	cbnz	r3, 800286c <iprintf+0x14>
 8002866:	4620      	mov	r0, r4
 8002868:	f000 f952 	bl	8002b10 <__sinit>
 800286c:	ab05      	add	r3, sp, #20
 800286e:	9a04      	ldr	r2, [sp, #16]
 8002870:	68a1      	ldr	r1, [r4, #8]
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	4620      	mov	r0, r4
 8002876:	f000 fb41 	bl	8002efc <_vfiprintf_r>
 800287a:	b002      	add	sp, #8
 800287c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002880:	b004      	add	sp, #16
 8002882:	4770      	bx	lr
 8002884:	2000000c 	.word	0x2000000c

08002888 <iscanf>:
 8002888:	b40f      	push	{r0, r1, r2, r3}
 800288a:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <iscanf+0x2c>)
 800288c:	b513      	push	{r0, r1, r4, lr}
 800288e:	681c      	ldr	r4, [r3, #0]
 8002890:	b124      	cbz	r4, 800289c <iscanf+0x14>
 8002892:	69a3      	ldr	r3, [r4, #24]
 8002894:	b913      	cbnz	r3, 800289c <iscanf+0x14>
 8002896:	4620      	mov	r0, r4
 8002898:	f000 f93a 	bl	8002b10 <__sinit>
 800289c:	ab05      	add	r3, sp, #20
 800289e:	9a04      	ldr	r2, [sp, #16]
 80028a0:	6861      	ldr	r1, [r4, #4]
 80028a2:	9301      	str	r3, [sp, #4]
 80028a4:	4620      	mov	r0, r4
 80028a6:	f000 ff91 	bl	80037cc <_vfiscanf_r>
 80028aa:	b002      	add	sp, #8
 80028ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028b0:	b004      	add	sp, #16
 80028b2:	4770      	bx	lr
 80028b4:	2000000c 	.word	0x2000000c

080028b8 <__sflush_r>:
 80028b8:	898a      	ldrh	r2, [r1, #12]
 80028ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028be:	4605      	mov	r5, r0
 80028c0:	0710      	lsls	r0, r2, #28
 80028c2:	460c      	mov	r4, r1
 80028c4:	d458      	bmi.n	8002978 <__sflush_r+0xc0>
 80028c6:	684b      	ldr	r3, [r1, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	dc05      	bgt.n	80028d8 <__sflush_r+0x20>
 80028cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	dc02      	bgt.n	80028d8 <__sflush_r+0x20>
 80028d2:	2000      	movs	r0, #0
 80028d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028da:	2e00      	cmp	r6, #0
 80028dc:	d0f9      	beq.n	80028d2 <__sflush_r+0x1a>
 80028de:	2300      	movs	r3, #0
 80028e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028e4:	682f      	ldr	r7, [r5, #0]
 80028e6:	602b      	str	r3, [r5, #0]
 80028e8:	d032      	beq.n	8002950 <__sflush_r+0x98>
 80028ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028ec:	89a3      	ldrh	r3, [r4, #12]
 80028ee:	075a      	lsls	r2, r3, #29
 80028f0:	d505      	bpl.n	80028fe <__sflush_r+0x46>
 80028f2:	6863      	ldr	r3, [r4, #4]
 80028f4:	1ac0      	subs	r0, r0, r3
 80028f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028f8:	b10b      	cbz	r3, 80028fe <__sflush_r+0x46>
 80028fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028fc:	1ac0      	subs	r0, r0, r3
 80028fe:	2300      	movs	r3, #0
 8002900:	4602      	mov	r2, r0
 8002902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002904:	6a21      	ldr	r1, [r4, #32]
 8002906:	4628      	mov	r0, r5
 8002908:	47b0      	blx	r6
 800290a:	1c43      	adds	r3, r0, #1
 800290c:	89a3      	ldrh	r3, [r4, #12]
 800290e:	d106      	bne.n	800291e <__sflush_r+0x66>
 8002910:	6829      	ldr	r1, [r5, #0]
 8002912:	291d      	cmp	r1, #29
 8002914:	d82c      	bhi.n	8002970 <__sflush_r+0xb8>
 8002916:	4a2a      	ldr	r2, [pc, #168]	; (80029c0 <__sflush_r+0x108>)
 8002918:	40ca      	lsrs	r2, r1
 800291a:	07d6      	lsls	r6, r2, #31
 800291c:	d528      	bpl.n	8002970 <__sflush_r+0xb8>
 800291e:	2200      	movs	r2, #0
 8002920:	6062      	str	r2, [r4, #4]
 8002922:	04d9      	lsls	r1, r3, #19
 8002924:	6922      	ldr	r2, [r4, #16]
 8002926:	6022      	str	r2, [r4, #0]
 8002928:	d504      	bpl.n	8002934 <__sflush_r+0x7c>
 800292a:	1c42      	adds	r2, r0, #1
 800292c:	d101      	bne.n	8002932 <__sflush_r+0x7a>
 800292e:	682b      	ldr	r3, [r5, #0]
 8002930:	b903      	cbnz	r3, 8002934 <__sflush_r+0x7c>
 8002932:	6560      	str	r0, [r4, #84]	; 0x54
 8002934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002936:	602f      	str	r7, [r5, #0]
 8002938:	2900      	cmp	r1, #0
 800293a:	d0ca      	beq.n	80028d2 <__sflush_r+0x1a>
 800293c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002940:	4299      	cmp	r1, r3
 8002942:	d002      	beq.n	800294a <__sflush_r+0x92>
 8002944:	4628      	mov	r0, r5
 8002946:	f000 fa05 	bl	8002d54 <_free_r>
 800294a:	2000      	movs	r0, #0
 800294c:	6360      	str	r0, [r4, #52]	; 0x34
 800294e:	e7c1      	b.n	80028d4 <__sflush_r+0x1c>
 8002950:	6a21      	ldr	r1, [r4, #32]
 8002952:	2301      	movs	r3, #1
 8002954:	4628      	mov	r0, r5
 8002956:	47b0      	blx	r6
 8002958:	1c41      	adds	r1, r0, #1
 800295a:	d1c7      	bne.n	80028ec <__sflush_r+0x34>
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d0c4      	beq.n	80028ec <__sflush_r+0x34>
 8002962:	2b1d      	cmp	r3, #29
 8002964:	d001      	beq.n	800296a <__sflush_r+0xb2>
 8002966:	2b16      	cmp	r3, #22
 8002968:	d101      	bne.n	800296e <__sflush_r+0xb6>
 800296a:	602f      	str	r7, [r5, #0]
 800296c:	e7b1      	b.n	80028d2 <__sflush_r+0x1a>
 800296e:	89a3      	ldrh	r3, [r4, #12]
 8002970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002974:	81a3      	strh	r3, [r4, #12]
 8002976:	e7ad      	b.n	80028d4 <__sflush_r+0x1c>
 8002978:	690f      	ldr	r7, [r1, #16]
 800297a:	2f00      	cmp	r7, #0
 800297c:	d0a9      	beq.n	80028d2 <__sflush_r+0x1a>
 800297e:	0793      	lsls	r3, r2, #30
 8002980:	680e      	ldr	r6, [r1, #0]
 8002982:	bf08      	it	eq
 8002984:	694b      	ldreq	r3, [r1, #20]
 8002986:	600f      	str	r7, [r1, #0]
 8002988:	bf18      	it	ne
 800298a:	2300      	movne	r3, #0
 800298c:	eba6 0807 	sub.w	r8, r6, r7
 8002990:	608b      	str	r3, [r1, #8]
 8002992:	f1b8 0f00 	cmp.w	r8, #0
 8002996:	dd9c      	ble.n	80028d2 <__sflush_r+0x1a>
 8002998:	6a21      	ldr	r1, [r4, #32]
 800299a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800299c:	4643      	mov	r3, r8
 800299e:	463a      	mov	r2, r7
 80029a0:	4628      	mov	r0, r5
 80029a2:	47b0      	blx	r6
 80029a4:	2800      	cmp	r0, #0
 80029a6:	dc06      	bgt.n	80029b6 <__sflush_r+0xfe>
 80029a8:	89a3      	ldrh	r3, [r4, #12]
 80029aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029ae:	81a3      	strh	r3, [r4, #12]
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	e78e      	b.n	80028d4 <__sflush_r+0x1c>
 80029b6:	4407      	add	r7, r0
 80029b8:	eba8 0800 	sub.w	r8, r8, r0
 80029bc:	e7e9      	b.n	8002992 <__sflush_r+0xda>
 80029be:	bf00      	nop
 80029c0:	20400001 	.word	0x20400001

080029c4 <_fflush_r>:
 80029c4:	b538      	push	{r3, r4, r5, lr}
 80029c6:	690b      	ldr	r3, [r1, #16]
 80029c8:	4605      	mov	r5, r0
 80029ca:	460c      	mov	r4, r1
 80029cc:	b913      	cbnz	r3, 80029d4 <_fflush_r+0x10>
 80029ce:	2500      	movs	r5, #0
 80029d0:	4628      	mov	r0, r5
 80029d2:	bd38      	pop	{r3, r4, r5, pc}
 80029d4:	b118      	cbz	r0, 80029de <_fflush_r+0x1a>
 80029d6:	6983      	ldr	r3, [r0, #24]
 80029d8:	b90b      	cbnz	r3, 80029de <_fflush_r+0x1a>
 80029da:	f000 f899 	bl	8002b10 <__sinit>
 80029de:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <_fflush_r+0x6c>)
 80029e0:	429c      	cmp	r4, r3
 80029e2:	d11b      	bne.n	8002a1c <_fflush_r+0x58>
 80029e4:	686c      	ldr	r4, [r5, #4]
 80029e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0ef      	beq.n	80029ce <_fflush_r+0xa>
 80029ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029f0:	07d0      	lsls	r0, r2, #31
 80029f2:	d404      	bmi.n	80029fe <_fflush_r+0x3a>
 80029f4:	0599      	lsls	r1, r3, #22
 80029f6:	d402      	bmi.n	80029fe <_fflush_r+0x3a>
 80029f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029fa:	f000 f944 	bl	8002c86 <__retarget_lock_acquire_recursive>
 80029fe:	4628      	mov	r0, r5
 8002a00:	4621      	mov	r1, r4
 8002a02:	f7ff ff59 	bl	80028b8 <__sflush_r>
 8002a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a08:	07da      	lsls	r2, r3, #31
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	d4e0      	bmi.n	80029d0 <_fflush_r+0xc>
 8002a0e:	89a3      	ldrh	r3, [r4, #12]
 8002a10:	059b      	lsls	r3, r3, #22
 8002a12:	d4dd      	bmi.n	80029d0 <_fflush_r+0xc>
 8002a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a16:	f000 f937 	bl	8002c88 <__retarget_lock_release_recursive>
 8002a1a:	e7d9      	b.n	80029d0 <_fflush_r+0xc>
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <_fflush_r+0x70>)
 8002a1e:	429c      	cmp	r4, r3
 8002a20:	d101      	bne.n	8002a26 <_fflush_r+0x62>
 8002a22:	68ac      	ldr	r4, [r5, #8]
 8002a24:	e7df      	b.n	80029e6 <_fflush_r+0x22>
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <_fflush_r+0x74>)
 8002a28:	429c      	cmp	r4, r3
 8002a2a:	bf08      	it	eq
 8002a2c:	68ec      	ldreq	r4, [r5, #12]
 8002a2e:	e7da      	b.n	80029e6 <_fflush_r+0x22>
 8002a30:	08004410 	.word	0x08004410
 8002a34:	08004430 	.word	0x08004430
 8002a38:	080043f0 	.word	0x080043f0

08002a3c <fflush>:
 8002a3c:	4601      	mov	r1, r0
 8002a3e:	b920      	cbnz	r0, 8002a4a <fflush+0xe>
 8002a40:	4b04      	ldr	r3, [pc, #16]	; (8002a54 <fflush+0x18>)
 8002a42:	4905      	ldr	r1, [pc, #20]	; (8002a58 <fflush+0x1c>)
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	f000 b8fe 	b.w	8002c46 <_fwalk_reent>
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <fflush+0x20>)
 8002a4c:	6818      	ldr	r0, [r3, #0]
 8002a4e:	f7ff bfb9 	b.w	80029c4 <_fflush_r>
 8002a52:	bf00      	nop
 8002a54:	080043ec 	.word	0x080043ec
 8002a58:	080029c5 	.word	0x080029c5
 8002a5c:	2000000c 	.word	0x2000000c

08002a60 <std>:
 8002a60:	2300      	movs	r3, #0
 8002a62:	b510      	push	{r4, lr}
 8002a64:	4604      	mov	r4, r0
 8002a66:	e9c0 3300 	strd	r3, r3, [r0]
 8002a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002a6e:	6083      	str	r3, [r0, #8]
 8002a70:	8181      	strh	r1, [r0, #12]
 8002a72:	6643      	str	r3, [r0, #100]	; 0x64
 8002a74:	81c2      	strh	r2, [r0, #14]
 8002a76:	6183      	str	r3, [r0, #24]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	2208      	movs	r2, #8
 8002a7c:	305c      	adds	r0, #92	; 0x5c
 8002a7e:	f7ff fee3 	bl	8002848 <memset>
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <std+0x38>)
 8002a84:	6263      	str	r3, [r4, #36]	; 0x24
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <std+0x3c>)
 8002a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <std+0x40>)
 8002a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a8e:	4b05      	ldr	r3, [pc, #20]	; (8002aa4 <std+0x44>)
 8002a90:	6224      	str	r4, [r4, #32]
 8002a92:	6323      	str	r3, [r4, #48]	; 0x30
 8002a94:	bd10      	pop	{r4, pc}
 8002a96:	bf00      	nop
 8002a98:	08003c71 	.word	0x08003c71
 8002a9c:	08003c93 	.word	0x08003c93
 8002aa0:	08003ccb 	.word	0x08003ccb
 8002aa4:	08003cef 	.word	0x08003cef

08002aa8 <_cleanup_r>:
 8002aa8:	4901      	ldr	r1, [pc, #4]	; (8002ab0 <_cleanup_r+0x8>)
 8002aaa:	f000 b8cc 	b.w	8002c46 <_fwalk_reent>
 8002aae:	bf00      	nop
 8002ab0:	080029c5 	.word	0x080029c5

08002ab4 <__sfmoreglue>:
 8002ab4:	b570      	push	{r4, r5, r6, lr}
 8002ab6:	1e4a      	subs	r2, r1, #1
 8002ab8:	2568      	movs	r5, #104	; 0x68
 8002aba:	4355      	muls	r5, r2
 8002abc:	460e      	mov	r6, r1
 8002abe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ac2:	f000 f997 	bl	8002df4 <_malloc_r>
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	b140      	cbz	r0, 8002adc <__sfmoreglue+0x28>
 8002aca:	2100      	movs	r1, #0
 8002acc:	e9c0 1600 	strd	r1, r6, [r0]
 8002ad0:	300c      	adds	r0, #12
 8002ad2:	60a0      	str	r0, [r4, #8]
 8002ad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002ad8:	f7ff feb6 	bl	8002848 <memset>
 8002adc:	4620      	mov	r0, r4
 8002ade:	bd70      	pop	{r4, r5, r6, pc}

08002ae0 <__sfp_lock_acquire>:
 8002ae0:	4801      	ldr	r0, [pc, #4]	; (8002ae8 <__sfp_lock_acquire+0x8>)
 8002ae2:	f000 b8d0 	b.w	8002c86 <__retarget_lock_acquire_recursive>
 8002ae6:	bf00      	nop
 8002ae8:	2000017c 	.word	0x2000017c

08002aec <__sfp_lock_release>:
 8002aec:	4801      	ldr	r0, [pc, #4]	; (8002af4 <__sfp_lock_release+0x8>)
 8002aee:	f000 b8cb 	b.w	8002c88 <__retarget_lock_release_recursive>
 8002af2:	bf00      	nop
 8002af4:	2000017c 	.word	0x2000017c

08002af8 <__sinit_lock_acquire>:
 8002af8:	4801      	ldr	r0, [pc, #4]	; (8002b00 <__sinit_lock_acquire+0x8>)
 8002afa:	f000 b8c4 	b.w	8002c86 <__retarget_lock_acquire_recursive>
 8002afe:	bf00      	nop
 8002b00:	20000177 	.word	0x20000177

08002b04 <__sinit_lock_release>:
 8002b04:	4801      	ldr	r0, [pc, #4]	; (8002b0c <__sinit_lock_release+0x8>)
 8002b06:	f000 b8bf 	b.w	8002c88 <__retarget_lock_release_recursive>
 8002b0a:	bf00      	nop
 8002b0c:	20000177 	.word	0x20000177

08002b10 <__sinit>:
 8002b10:	b510      	push	{r4, lr}
 8002b12:	4604      	mov	r4, r0
 8002b14:	f7ff fff0 	bl	8002af8 <__sinit_lock_acquire>
 8002b18:	69a3      	ldr	r3, [r4, #24]
 8002b1a:	b11b      	cbz	r3, 8002b24 <__sinit+0x14>
 8002b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b20:	f7ff bff0 	b.w	8002b04 <__sinit_lock_release>
 8002b24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002b28:	6523      	str	r3, [r4, #80]	; 0x50
 8002b2a:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <__sinit+0x68>)
 8002b2c:	4a13      	ldr	r2, [pc, #76]	; (8002b7c <__sinit+0x6c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	62a2      	str	r2, [r4, #40]	; 0x28
 8002b32:	42a3      	cmp	r3, r4
 8002b34:	bf04      	itt	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	61a3      	streq	r3, [r4, #24]
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f000 f820 	bl	8002b80 <__sfp>
 8002b40:	6060      	str	r0, [r4, #4]
 8002b42:	4620      	mov	r0, r4
 8002b44:	f000 f81c 	bl	8002b80 <__sfp>
 8002b48:	60a0      	str	r0, [r4, #8]
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	f000 f818 	bl	8002b80 <__sfp>
 8002b50:	2200      	movs	r2, #0
 8002b52:	60e0      	str	r0, [r4, #12]
 8002b54:	2104      	movs	r1, #4
 8002b56:	6860      	ldr	r0, [r4, #4]
 8002b58:	f7ff ff82 	bl	8002a60 <std>
 8002b5c:	68a0      	ldr	r0, [r4, #8]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	2109      	movs	r1, #9
 8002b62:	f7ff ff7d 	bl	8002a60 <std>
 8002b66:	68e0      	ldr	r0, [r4, #12]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	2112      	movs	r1, #18
 8002b6c:	f7ff ff78 	bl	8002a60 <std>
 8002b70:	2301      	movs	r3, #1
 8002b72:	61a3      	str	r3, [r4, #24]
 8002b74:	e7d2      	b.n	8002b1c <__sinit+0xc>
 8002b76:	bf00      	nop
 8002b78:	080043ec 	.word	0x080043ec
 8002b7c:	08002aa9 	.word	0x08002aa9

08002b80 <__sfp>:
 8002b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b82:	4607      	mov	r7, r0
 8002b84:	f7ff ffac 	bl	8002ae0 <__sfp_lock_acquire>
 8002b88:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <__sfp+0x84>)
 8002b8a:	681e      	ldr	r6, [r3, #0]
 8002b8c:	69b3      	ldr	r3, [r6, #24]
 8002b8e:	b913      	cbnz	r3, 8002b96 <__sfp+0x16>
 8002b90:	4630      	mov	r0, r6
 8002b92:	f7ff ffbd 	bl	8002b10 <__sinit>
 8002b96:	3648      	adds	r6, #72	; 0x48
 8002b98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	d503      	bpl.n	8002ba8 <__sfp+0x28>
 8002ba0:	6833      	ldr	r3, [r6, #0]
 8002ba2:	b30b      	cbz	r3, 8002be8 <__sfp+0x68>
 8002ba4:	6836      	ldr	r6, [r6, #0]
 8002ba6:	e7f7      	b.n	8002b98 <__sfp+0x18>
 8002ba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002bac:	b9d5      	cbnz	r5, 8002be4 <__sfp+0x64>
 8002bae:	4b16      	ldr	r3, [pc, #88]	; (8002c08 <__sfp+0x88>)
 8002bb0:	60e3      	str	r3, [r4, #12]
 8002bb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002bb6:	6665      	str	r5, [r4, #100]	; 0x64
 8002bb8:	f000 f864 	bl	8002c84 <__retarget_lock_init_recursive>
 8002bbc:	f7ff ff96 	bl	8002aec <__sfp_lock_release>
 8002bc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002bc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002bc8:	6025      	str	r5, [r4, #0]
 8002bca:	61a5      	str	r5, [r4, #24]
 8002bcc:	2208      	movs	r2, #8
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002bd4:	f7ff fe38 	bl	8002848 <memset>
 8002bd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002bdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002be0:	4620      	mov	r0, r4
 8002be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002be4:	3468      	adds	r4, #104	; 0x68
 8002be6:	e7d9      	b.n	8002b9c <__sfp+0x1c>
 8002be8:	2104      	movs	r1, #4
 8002bea:	4638      	mov	r0, r7
 8002bec:	f7ff ff62 	bl	8002ab4 <__sfmoreglue>
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	6030      	str	r0, [r6, #0]
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d1d5      	bne.n	8002ba4 <__sfp+0x24>
 8002bf8:	f7ff ff78 	bl	8002aec <__sfp_lock_release>
 8002bfc:	230c      	movs	r3, #12
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	e7ee      	b.n	8002be0 <__sfp+0x60>
 8002c02:	bf00      	nop
 8002c04:	080043ec 	.word	0x080043ec
 8002c08:	ffff0001 	.word	0xffff0001

08002c0c <_fwalk>:
 8002c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c10:	460f      	mov	r7, r1
 8002c12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c16:	2600      	movs	r6, #0
 8002c18:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8002c1c:	f1b8 0801 	subs.w	r8, r8, #1
 8002c20:	d505      	bpl.n	8002c2e <_fwalk+0x22>
 8002c22:	6824      	ldr	r4, [r4, #0]
 8002c24:	2c00      	cmp	r4, #0
 8002c26:	d1f7      	bne.n	8002c18 <_fwalk+0xc>
 8002c28:	4630      	mov	r0, r6
 8002c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c2e:	89ab      	ldrh	r3, [r5, #12]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d906      	bls.n	8002c42 <_fwalk+0x36>
 8002c34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	d002      	beq.n	8002c42 <_fwalk+0x36>
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	47b8      	blx	r7
 8002c40:	4306      	orrs	r6, r0
 8002c42:	3568      	adds	r5, #104	; 0x68
 8002c44:	e7ea      	b.n	8002c1c <_fwalk+0x10>

08002c46 <_fwalk_reent>:
 8002c46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c4a:	4606      	mov	r6, r0
 8002c4c:	4688      	mov	r8, r1
 8002c4e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002c52:	2700      	movs	r7, #0
 8002c54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002c58:	f1b9 0901 	subs.w	r9, r9, #1
 8002c5c:	d505      	bpl.n	8002c6a <_fwalk_reent+0x24>
 8002c5e:	6824      	ldr	r4, [r4, #0]
 8002c60:	2c00      	cmp	r4, #0
 8002c62:	d1f7      	bne.n	8002c54 <_fwalk_reent+0xe>
 8002c64:	4638      	mov	r0, r7
 8002c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c6a:	89ab      	ldrh	r3, [r5, #12]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d907      	bls.n	8002c80 <_fwalk_reent+0x3a>
 8002c70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c74:	3301      	adds	r3, #1
 8002c76:	d003      	beq.n	8002c80 <_fwalk_reent+0x3a>
 8002c78:	4629      	mov	r1, r5
 8002c7a:	4630      	mov	r0, r6
 8002c7c:	47c0      	blx	r8
 8002c7e:	4307      	orrs	r7, r0
 8002c80:	3568      	adds	r5, #104	; 0x68
 8002c82:	e7e9      	b.n	8002c58 <_fwalk_reent+0x12>

08002c84 <__retarget_lock_init_recursive>:
 8002c84:	4770      	bx	lr

08002c86 <__retarget_lock_acquire_recursive>:
 8002c86:	4770      	bx	lr

08002c88 <__retarget_lock_release_recursive>:
 8002c88:	4770      	bx	lr

08002c8a <__swhatbuf_r>:
 8002c8a:	b570      	push	{r4, r5, r6, lr}
 8002c8c:	460e      	mov	r6, r1
 8002c8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c92:	2900      	cmp	r1, #0
 8002c94:	b096      	sub	sp, #88	; 0x58
 8002c96:	4614      	mov	r4, r2
 8002c98:	461d      	mov	r5, r3
 8002c9a:	da07      	bge.n	8002cac <__swhatbuf_r+0x22>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	602b      	str	r3, [r5, #0]
 8002ca0:	89b3      	ldrh	r3, [r6, #12]
 8002ca2:	061a      	lsls	r2, r3, #24
 8002ca4:	d410      	bmi.n	8002cc8 <__swhatbuf_r+0x3e>
 8002ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002caa:	e00e      	b.n	8002cca <__swhatbuf_r+0x40>
 8002cac:	466a      	mov	r2, sp
 8002cae:	f001 fadb 	bl	8004268 <_fstat_r>
 8002cb2:	2800      	cmp	r0, #0
 8002cb4:	dbf2      	blt.n	8002c9c <__swhatbuf_r+0x12>
 8002cb6:	9a01      	ldr	r2, [sp, #4]
 8002cb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002cbc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002cc0:	425a      	negs	r2, r3
 8002cc2:	415a      	adcs	r2, r3
 8002cc4:	602a      	str	r2, [r5, #0]
 8002cc6:	e7ee      	b.n	8002ca6 <__swhatbuf_r+0x1c>
 8002cc8:	2340      	movs	r3, #64	; 0x40
 8002cca:	2000      	movs	r0, #0
 8002ccc:	6023      	str	r3, [r4, #0]
 8002cce:	b016      	add	sp, #88	; 0x58
 8002cd0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cd4 <__smakebuf_r>:
 8002cd4:	898b      	ldrh	r3, [r1, #12]
 8002cd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cd8:	079d      	lsls	r5, r3, #30
 8002cda:	4606      	mov	r6, r0
 8002cdc:	460c      	mov	r4, r1
 8002cde:	d507      	bpl.n	8002cf0 <__smakebuf_r+0x1c>
 8002ce0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ce4:	6023      	str	r3, [r4, #0]
 8002ce6:	6123      	str	r3, [r4, #16]
 8002ce8:	2301      	movs	r3, #1
 8002cea:	6163      	str	r3, [r4, #20]
 8002cec:	b002      	add	sp, #8
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
 8002cf0:	ab01      	add	r3, sp, #4
 8002cf2:	466a      	mov	r2, sp
 8002cf4:	f7ff ffc9 	bl	8002c8a <__swhatbuf_r>
 8002cf8:	9900      	ldr	r1, [sp, #0]
 8002cfa:	4605      	mov	r5, r0
 8002cfc:	4630      	mov	r0, r6
 8002cfe:	f000 f879 	bl	8002df4 <_malloc_r>
 8002d02:	b948      	cbnz	r0, 8002d18 <__smakebuf_r+0x44>
 8002d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d08:	059a      	lsls	r2, r3, #22
 8002d0a:	d4ef      	bmi.n	8002cec <__smakebuf_r+0x18>
 8002d0c:	f023 0303 	bic.w	r3, r3, #3
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	81a3      	strh	r3, [r4, #12]
 8002d16:	e7e3      	b.n	8002ce0 <__smakebuf_r+0xc>
 8002d18:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <__smakebuf_r+0x7c>)
 8002d1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d1c:	89a3      	ldrh	r3, [r4, #12]
 8002d1e:	6020      	str	r0, [r4, #0]
 8002d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d24:	81a3      	strh	r3, [r4, #12]
 8002d26:	9b00      	ldr	r3, [sp, #0]
 8002d28:	6163      	str	r3, [r4, #20]
 8002d2a:	9b01      	ldr	r3, [sp, #4]
 8002d2c:	6120      	str	r0, [r4, #16]
 8002d2e:	b15b      	cbz	r3, 8002d48 <__smakebuf_r+0x74>
 8002d30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d34:	4630      	mov	r0, r6
 8002d36:	f001 faa9 	bl	800428c <_isatty_r>
 8002d3a:	b128      	cbz	r0, 8002d48 <__smakebuf_r+0x74>
 8002d3c:	89a3      	ldrh	r3, [r4, #12]
 8002d3e:	f023 0303 	bic.w	r3, r3, #3
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	81a3      	strh	r3, [r4, #12]
 8002d48:	89a0      	ldrh	r0, [r4, #12]
 8002d4a:	4305      	orrs	r5, r0
 8002d4c:	81a5      	strh	r5, [r4, #12]
 8002d4e:	e7cd      	b.n	8002cec <__smakebuf_r+0x18>
 8002d50:	08002aa9 	.word	0x08002aa9

08002d54 <_free_r>:
 8002d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d56:	2900      	cmp	r1, #0
 8002d58:	d048      	beq.n	8002dec <_free_r+0x98>
 8002d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d5e:	9001      	str	r0, [sp, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f1a1 0404 	sub.w	r4, r1, #4
 8002d66:	bfb8      	it	lt
 8002d68:	18e4      	addlt	r4, r4, r3
 8002d6a:	f001 fabf 	bl	80042ec <__malloc_lock>
 8002d6e:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <_free_r+0x9c>)
 8002d70:	9801      	ldr	r0, [sp, #4]
 8002d72:	6813      	ldr	r3, [r2, #0]
 8002d74:	4615      	mov	r5, r2
 8002d76:	b933      	cbnz	r3, 8002d86 <_free_r+0x32>
 8002d78:	6063      	str	r3, [r4, #4]
 8002d7a:	6014      	str	r4, [r2, #0]
 8002d7c:	b003      	add	sp, #12
 8002d7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d82:	f001 bab9 	b.w	80042f8 <__malloc_unlock>
 8002d86:	42a3      	cmp	r3, r4
 8002d88:	d90b      	bls.n	8002da2 <_free_r+0x4e>
 8002d8a:	6821      	ldr	r1, [r4, #0]
 8002d8c:	1862      	adds	r2, r4, r1
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	bf04      	itt	eq
 8002d92:	681a      	ldreq	r2, [r3, #0]
 8002d94:	685b      	ldreq	r3, [r3, #4]
 8002d96:	6063      	str	r3, [r4, #4]
 8002d98:	bf04      	itt	eq
 8002d9a:	1852      	addeq	r2, r2, r1
 8002d9c:	6022      	streq	r2, [r4, #0]
 8002d9e:	602c      	str	r4, [r5, #0]
 8002da0:	e7ec      	b.n	8002d7c <_free_r+0x28>
 8002da2:	461a      	mov	r2, r3
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	b10b      	cbz	r3, 8002dac <_free_r+0x58>
 8002da8:	42a3      	cmp	r3, r4
 8002daa:	d9fa      	bls.n	8002da2 <_free_r+0x4e>
 8002dac:	6811      	ldr	r1, [r2, #0]
 8002dae:	1855      	adds	r5, r2, r1
 8002db0:	42a5      	cmp	r5, r4
 8002db2:	d10b      	bne.n	8002dcc <_free_r+0x78>
 8002db4:	6824      	ldr	r4, [r4, #0]
 8002db6:	4421      	add	r1, r4
 8002db8:	1854      	adds	r4, r2, r1
 8002dba:	42a3      	cmp	r3, r4
 8002dbc:	6011      	str	r1, [r2, #0]
 8002dbe:	d1dd      	bne.n	8002d7c <_free_r+0x28>
 8002dc0:	681c      	ldr	r4, [r3, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	6053      	str	r3, [r2, #4]
 8002dc6:	4421      	add	r1, r4
 8002dc8:	6011      	str	r1, [r2, #0]
 8002dca:	e7d7      	b.n	8002d7c <_free_r+0x28>
 8002dcc:	d902      	bls.n	8002dd4 <_free_r+0x80>
 8002dce:	230c      	movs	r3, #12
 8002dd0:	6003      	str	r3, [r0, #0]
 8002dd2:	e7d3      	b.n	8002d7c <_free_r+0x28>
 8002dd4:	6825      	ldr	r5, [r4, #0]
 8002dd6:	1961      	adds	r1, r4, r5
 8002dd8:	428b      	cmp	r3, r1
 8002dda:	bf04      	itt	eq
 8002ddc:	6819      	ldreq	r1, [r3, #0]
 8002dde:	685b      	ldreq	r3, [r3, #4]
 8002de0:	6063      	str	r3, [r4, #4]
 8002de2:	bf04      	itt	eq
 8002de4:	1949      	addeq	r1, r1, r5
 8002de6:	6021      	streq	r1, [r4, #0]
 8002de8:	6054      	str	r4, [r2, #4]
 8002dea:	e7c7      	b.n	8002d7c <_free_r+0x28>
 8002dec:	b003      	add	sp, #12
 8002dee:	bd30      	pop	{r4, r5, pc}
 8002df0:	20000090 	.word	0x20000090

08002df4 <_malloc_r>:
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df6:	1ccd      	adds	r5, r1, #3
 8002df8:	f025 0503 	bic.w	r5, r5, #3
 8002dfc:	3508      	adds	r5, #8
 8002dfe:	2d0c      	cmp	r5, #12
 8002e00:	bf38      	it	cc
 8002e02:	250c      	movcc	r5, #12
 8002e04:	2d00      	cmp	r5, #0
 8002e06:	4606      	mov	r6, r0
 8002e08:	db01      	blt.n	8002e0e <_malloc_r+0x1a>
 8002e0a:	42a9      	cmp	r1, r5
 8002e0c:	d903      	bls.n	8002e16 <_malloc_r+0x22>
 8002e0e:	230c      	movs	r3, #12
 8002e10:	6033      	str	r3, [r6, #0]
 8002e12:	2000      	movs	r0, #0
 8002e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e16:	f001 fa69 	bl	80042ec <__malloc_lock>
 8002e1a:	4921      	ldr	r1, [pc, #132]	; (8002ea0 <_malloc_r+0xac>)
 8002e1c:	680a      	ldr	r2, [r1, #0]
 8002e1e:	4614      	mov	r4, r2
 8002e20:	b99c      	cbnz	r4, 8002e4a <_malloc_r+0x56>
 8002e22:	4f20      	ldr	r7, [pc, #128]	; (8002ea4 <_malloc_r+0xb0>)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	b923      	cbnz	r3, 8002e32 <_malloc_r+0x3e>
 8002e28:	4621      	mov	r1, r4
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	f000 fed6 	bl	8003bdc <_sbrk_r>
 8002e30:	6038      	str	r0, [r7, #0]
 8002e32:	4629      	mov	r1, r5
 8002e34:	4630      	mov	r0, r6
 8002e36:	f000 fed1 	bl	8003bdc <_sbrk_r>
 8002e3a:	1c43      	adds	r3, r0, #1
 8002e3c:	d123      	bne.n	8002e86 <_malloc_r+0x92>
 8002e3e:	230c      	movs	r3, #12
 8002e40:	6033      	str	r3, [r6, #0]
 8002e42:	4630      	mov	r0, r6
 8002e44:	f001 fa58 	bl	80042f8 <__malloc_unlock>
 8002e48:	e7e3      	b.n	8002e12 <_malloc_r+0x1e>
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	1b5b      	subs	r3, r3, r5
 8002e4e:	d417      	bmi.n	8002e80 <_malloc_r+0x8c>
 8002e50:	2b0b      	cmp	r3, #11
 8002e52:	d903      	bls.n	8002e5c <_malloc_r+0x68>
 8002e54:	6023      	str	r3, [r4, #0]
 8002e56:	441c      	add	r4, r3
 8002e58:	6025      	str	r5, [r4, #0]
 8002e5a:	e004      	b.n	8002e66 <_malloc_r+0x72>
 8002e5c:	6863      	ldr	r3, [r4, #4]
 8002e5e:	42a2      	cmp	r2, r4
 8002e60:	bf0c      	ite	eq
 8002e62:	600b      	streq	r3, [r1, #0]
 8002e64:	6053      	strne	r3, [r2, #4]
 8002e66:	4630      	mov	r0, r6
 8002e68:	f001 fa46 	bl	80042f8 <__malloc_unlock>
 8002e6c:	f104 000b 	add.w	r0, r4, #11
 8002e70:	1d23      	adds	r3, r4, #4
 8002e72:	f020 0007 	bic.w	r0, r0, #7
 8002e76:	1ac2      	subs	r2, r0, r3
 8002e78:	d0cc      	beq.n	8002e14 <_malloc_r+0x20>
 8002e7a:	1a1b      	subs	r3, r3, r0
 8002e7c:	50a3      	str	r3, [r4, r2]
 8002e7e:	e7c9      	b.n	8002e14 <_malloc_r+0x20>
 8002e80:	4622      	mov	r2, r4
 8002e82:	6864      	ldr	r4, [r4, #4]
 8002e84:	e7cc      	b.n	8002e20 <_malloc_r+0x2c>
 8002e86:	1cc4      	adds	r4, r0, #3
 8002e88:	f024 0403 	bic.w	r4, r4, #3
 8002e8c:	42a0      	cmp	r0, r4
 8002e8e:	d0e3      	beq.n	8002e58 <_malloc_r+0x64>
 8002e90:	1a21      	subs	r1, r4, r0
 8002e92:	4630      	mov	r0, r6
 8002e94:	f000 fea2 	bl	8003bdc <_sbrk_r>
 8002e98:	3001      	adds	r0, #1
 8002e9a:	d1dd      	bne.n	8002e58 <_malloc_r+0x64>
 8002e9c:	e7cf      	b.n	8002e3e <_malloc_r+0x4a>
 8002e9e:	bf00      	nop
 8002ea0:	20000090 	.word	0x20000090
 8002ea4:	20000094 	.word	0x20000094

08002ea8 <__sfputc_r>:
 8002ea8:	6893      	ldr	r3, [r2, #8]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	b410      	push	{r4}
 8002eb0:	6093      	str	r3, [r2, #8]
 8002eb2:	da08      	bge.n	8002ec6 <__sfputc_r+0x1e>
 8002eb4:	6994      	ldr	r4, [r2, #24]
 8002eb6:	42a3      	cmp	r3, r4
 8002eb8:	db01      	blt.n	8002ebe <__sfputc_r+0x16>
 8002eba:	290a      	cmp	r1, #10
 8002ebc:	d103      	bne.n	8002ec6 <__sfputc_r+0x1e>
 8002ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ec2:	f001 b8ef 	b.w	80040a4 <__swbuf_r>
 8002ec6:	6813      	ldr	r3, [r2, #0]
 8002ec8:	1c58      	adds	r0, r3, #1
 8002eca:	6010      	str	r0, [r2, #0]
 8002ecc:	7019      	strb	r1, [r3, #0]
 8002ece:	4608      	mov	r0, r1
 8002ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <__sfputs_r>:
 8002ed6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ed8:	4606      	mov	r6, r0
 8002eda:	460f      	mov	r7, r1
 8002edc:	4614      	mov	r4, r2
 8002ede:	18d5      	adds	r5, r2, r3
 8002ee0:	42ac      	cmp	r4, r5
 8002ee2:	d101      	bne.n	8002ee8 <__sfputs_r+0x12>
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	e007      	b.n	8002ef8 <__sfputs_r+0x22>
 8002ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eec:	463a      	mov	r2, r7
 8002eee:	4630      	mov	r0, r6
 8002ef0:	f7ff ffda 	bl	8002ea8 <__sfputc_r>
 8002ef4:	1c43      	adds	r3, r0, #1
 8002ef6:	d1f3      	bne.n	8002ee0 <__sfputs_r+0xa>
 8002ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002efc <_vfiprintf_r>:
 8002efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f00:	460d      	mov	r5, r1
 8002f02:	b09d      	sub	sp, #116	; 0x74
 8002f04:	4614      	mov	r4, r2
 8002f06:	4698      	mov	r8, r3
 8002f08:	4606      	mov	r6, r0
 8002f0a:	b118      	cbz	r0, 8002f14 <_vfiprintf_r+0x18>
 8002f0c:	6983      	ldr	r3, [r0, #24]
 8002f0e:	b90b      	cbnz	r3, 8002f14 <_vfiprintf_r+0x18>
 8002f10:	f7ff fdfe 	bl	8002b10 <__sinit>
 8002f14:	4b89      	ldr	r3, [pc, #548]	; (800313c <_vfiprintf_r+0x240>)
 8002f16:	429d      	cmp	r5, r3
 8002f18:	d11b      	bne.n	8002f52 <_vfiprintf_r+0x56>
 8002f1a:	6875      	ldr	r5, [r6, #4]
 8002f1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f1e:	07d9      	lsls	r1, r3, #31
 8002f20:	d405      	bmi.n	8002f2e <_vfiprintf_r+0x32>
 8002f22:	89ab      	ldrh	r3, [r5, #12]
 8002f24:	059a      	lsls	r2, r3, #22
 8002f26:	d402      	bmi.n	8002f2e <_vfiprintf_r+0x32>
 8002f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f2a:	f7ff feac 	bl	8002c86 <__retarget_lock_acquire_recursive>
 8002f2e:	89ab      	ldrh	r3, [r5, #12]
 8002f30:	071b      	lsls	r3, r3, #28
 8002f32:	d501      	bpl.n	8002f38 <_vfiprintf_r+0x3c>
 8002f34:	692b      	ldr	r3, [r5, #16]
 8002f36:	b9eb      	cbnz	r3, 8002f74 <_vfiprintf_r+0x78>
 8002f38:	4629      	mov	r1, r5
 8002f3a:	4630      	mov	r0, r6
 8002f3c:	f001 f916 	bl	800416c <__swsetup_r>
 8002f40:	b1c0      	cbz	r0, 8002f74 <_vfiprintf_r+0x78>
 8002f42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f44:	07dc      	lsls	r4, r3, #31
 8002f46:	d50e      	bpl.n	8002f66 <_vfiprintf_r+0x6a>
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	b01d      	add	sp, #116	; 0x74
 8002f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f52:	4b7b      	ldr	r3, [pc, #492]	; (8003140 <_vfiprintf_r+0x244>)
 8002f54:	429d      	cmp	r5, r3
 8002f56:	d101      	bne.n	8002f5c <_vfiprintf_r+0x60>
 8002f58:	68b5      	ldr	r5, [r6, #8]
 8002f5a:	e7df      	b.n	8002f1c <_vfiprintf_r+0x20>
 8002f5c:	4b79      	ldr	r3, [pc, #484]	; (8003144 <_vfiprintf_r+0x248>)
 8002f5e:	429d      	cmp	r5, r3
 8002f60:	bf08      	it	eq
 8002f62:	68f5      	ldreq	r5, [r6, #12]
 8002f64:	e7da      	b.n	8002f1c <_vfiprintf_r+0x20>
 8002f66:	89ab      	ldrh	r3, [r5, #12]
 8002f68:	0598      	lsls	r0, r3, #22
 8002f6a:	d4ed      	bmi.n	8002f48 <_vfiprintf_r+0x4c>
 8002f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f6e:	f7ff fe8b 	bl	8002c88 <__retarget_lock_release_recursive>
 8002f72:	e7e9      	b.n	8002f48 <_vfiprintf_r+0x4c>
 8002f74:	2300      	movs	r3, #0
 8002f76:	9309      	str	r3, [sp, #36]	; 0x24
 8002f78:	2320      	movs	r3, #32
 8002f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f82:	2330      	movs	r3, #48	; 0x30
 8002f84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003148 <_vfiprintf_r+0x24c>
 8002f88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f8c:	f04f 0901 	mov.w	r9, #1
 8002f90:	4623      	mov	r3, r4
 8002f92:	469a      	mov	sl, r3
 8002f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f98:	b10a      	cbz	r2, 8002f9e <_vfiprintf_r+0xa2>
 8002f9a:	2a25      	cmp	r2, #37	; 0x25
 8002f9c:	d1f9      	bne.n	8002f92 <_vfiprintf_r+0x96>
 8002f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8002fa2:	d00b      	beq.n	8002fbc <_vfiprintf_r+0xc0>
 8002fa4:	465b      	mov	r3, fp
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	4629      	mov	r1, r5
 8002faa:	4630      	mov	r0, r6
 8002fac:	f7ff ff93 	bl	8002ed6 <__sfputs_r>
 8002fb0:	3001      	adds	r0, #1
 8002fb2:	f000 80aa 	beq.w	800310a <_vfiprintf_r+0x20e>
 8002fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fb8:	445a      	add	r2, fp
 8002fba:	9209      	str	r2, [sp, #36]	; 0x24
 8002fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80a2 	beq.w	800310a <_vfiprintf_r+0x20e>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fd0:	f10a 0a01 	add.w	sl, sl, #1
 8002fd4:	9304      	str	r3, [sp, #16]
 8002fd6:	9307      	str	r3, [sp, #28]
 8002fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8002fde:	4654      	mov	r4, sl
 8002fe0:	2205      	movs	r2, #5
 8002fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fe6:	4858      	ldr	r0, [pc, #352]	; (8003148 <_vfiprintf_r+0x24c>)
 8002fe8:	f7fd f8fa 	bl	80001e0 <memchr>
 8002fec:	9a04      	ldr	r2, [sp, #16]
 8002fee:	b9d8      	cbnz	r0, 8003028 <_vfiprintf_r+0x12c>
 8002ff0:	06d1      	lsls	r1, r2, #27
 8002ff2:	bf44      	itt	mi
 8002ff4:	2320      	movmi	r3, #32
 8002ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ffa:	0713      	lsls	r3, r2, #28
 8002ffc:	bf44      	itt	mi
 8002ffe:	232b      	movmi	r3, #43	; 0x2b
 8003000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003004:	f89a 3000 	ldrb.w	r3, [sl]
 8003008:	2b2a      	cmp	r3, #42	; 0x2a
 800300a:	d015      	beq.n	8003038 <_vfiprintf_r+0x13c>
 800300c:	9a07      	ldr	r2, [sp, #28]
 800300e:	4654      	mov	r4, sl
 8003010:	2000      	movs	r0, #0
 8003012:	f04f 0c0a 	mov.w	ip, #10
 8003016:	4621      	mov	r1, r4
 8003018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800301c:	3b30      	subs	r3, #48	; 0x30
 800301e:	2b09      	cmp	r3, #9
 8003020:	d94e      	bls.n	80030c0 <_vfiprintf_r+0x1c4>
 8003022:	b1b0      	cbz	r0, 8003052 <_vfiprintf_r+0x156>
 8003024:	9207      	str	r2, [sp, #28]
 8003026:	e014      	b.n	8003052 <_vfiprintf_r+0x156>
 8003028:	eba0 0308 	sub.w	r3, r0, r8
 800302c:	fa09 f303 	lsl.w	r3, r9, r3
 8003030:	4313      	orrs	r3, r2
 8003032:	9304      	str	r3, [sp, #16]
 8003034:	46a2      	mov	sl, r4
 8003036:	e7d2      	b.n	8002fde <_vfiprintf_r+0xe2>
 8003038:	9b03      	ldr	r3, [sp, #12]
 800303a:	1d19      	adds	r1, r3, #4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	9103      	str	r1, [sp, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	bfbb      	ittet	lt
 8003044:	425b      	neglt	r3, r3
 8003046:	f042 0202 	orrlt.w	r2, r2, #2
 800304a:	9307      	strge	r3, [sp, #28]
 800304c:	9307      	strlt	r3, [sp, #28]
 800304e:	bfb8      	it	lt
 8003050:	9204      	strlt	r2, [sp, #16]
 8003052:	7823      	ldrb	r3, [r4, #0]
 8003054:	2b2e      	cmp	r3, #46	; 0x2e
 8003056:	d10c      	bne.n	8003072 <_vfiprintf_r+0x176>
 8003058:	7863      	ldrb	r3, [r4, #1]
 800305a:	2b2a      	cmp	r3, #42	; 0x2a
 800305c:	d135      	bne.n	80030ca <_vfiprintf_r+0x1ce>
 800305e:	9b03      	ldr	r3, [sp, #12]
 8003060:	1d1a      	adds	r2, r3, #4
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	9203      	str	r2, [sp, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	bfb8      	it	lt
 800306a:	f04f 33ff 	movlt.w	r3, #4294967295
 800306e:	3402      	adds	r4, #2
 8003070:	9305      	str	r3, [sp, #20]
 8003072:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003158 <_vfiprintf_r+0x25c>
 8003076:	7821      	ldrb	r1, [r4, #0]
 8003078:	2203      	movs	r2, #3
 800307a:	4650      	mov	r0, sl
 800307c:	f7fd f8b0 	bl	80001e0 <memchr>
 8003080:	b140      	cbz	r0, 8003094 <_vfiprintf_r+0x198>
 8003082:	2340      	movs	r3, #64	; 0x40
 8003084:	eba0 000a 	sub.w	r0, r0, sl
 8003088:	fa03 f000 	lsl.w	r0, r3, r0
 800308c:	9b04      	ldr	r3, [sp, #16]
 800308e:	4303      	orrs	r3, r0
 8003090:	3401      	adds	r4, #1
 8003092:	9304      	str	r3, [sp, #16]
 8003094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003098:	482c      	ldr	r0, [pc, #176]	; (800314c <_vfiprintf_r+0x250>)
 800309a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800309e:	2206      	movs	r2, #6
 80030a0:	f7fd f89e 	bl	80001e0 <memchr>
 80030a4:	2800      	cmp	r0, #0
 80030a6:	d03f      	beq.n	8003128 <_vfiprintf_r+0x22c>
 80030a8:	4b29      	ldr	r3, [pc, #164]	; (8003150 <_vfiprintf_r+0x254>)
 80030aa:	bb1b      	cbnz	r3, 80030f4 <_vfiprintf_r+0x1f8>
 80030ac:	9b03      	ldr	r3, [sp, #12]
 80030ae:	3307      	adds	r3, #7
 80030b0:	f023 0307 	bic.w	r3, r3, #7
 80030b4:	3308      	adds	r3, #8
 80030b6:	9303      	str	r3, [sp, #12]
 80030b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030ba:	443b      	add	r3, r7
 80030bc:	9309      	str	r3, [sp, #36]	; 0x24
 80030be:	e767      	b.n	8002f90 <_vfiprintf_r+0x94>
 80030c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80030c4:	460c      	mov	r4, r1
 80030c6:	2001      	movs	r0, #1
 80030c8:	e7a5      	b.n	8003016 <_vfiprintf_r+0x11a>
 80030ca:	2300      	movs	r3, #0
 80030cc:	3401      	adds	r4, #1
 80030ce:	9305      	str	r3, [sp, #20]
 80030d0:	4619      	mov	r1, r3
 80030d2:	f04f 0c0a 	mov.w	ip, #10
 80030d6:	4620      	mov	r0, r4
 80030d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030dc:	3a30      	subs	r2, #48	; 0x30
 80030de:	2a09      	cmp	r2, #9
 80030e0:	d903      	bls.n	80030ea <_vfiprintf_r+0x1ee>
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0c5      	beq.n	8003072 <_vfiprintf_r+0x176>
 80030e6:	9105      	str	r1, [sp, #20]
 80030e8:	e7c3      	b.n	8003072 <_vfiprintf_r+0x176>
 80030ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80030ee:	4604      	mov	r4, r0
 80030f0:	2301      	movs	r3, #1
 80030f2:	e7f0      	b.n	80030d6 <_vfiprintf_r+0x1da>
 80030f4:	ab03      	add	r3, sp, #12
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	462a      	mov	r2, r5
 80030fa:	4b16      	ldr	r3, [pc, #88]	; (8003154 <_vfiprintf_r+0x258>)
 80030fc:	a904      	add	r1, sp, #16
 80030fe:	4630      	mov	r0, r6
 8003100:	f3af 8000 	nop.w
 8003104:	4607      	mov	r7, r0
 8003106:	1c78      	adds	r0, r7, #1
 8003108:	d1d6      	bne.n	80030b8 <_vfiprintf_r+0x1bc>
 800310a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800310c:	07d9      	lsls	r1, r3, #31
 800310e:	d405      	bmi.n	800311c <_vfiprintf_r+0x220>
 8003110:	89ab      	ldrh	r3, [r5, #12]
 8003112:	059a      	lsls	r2, r3, #22
 8003114:	d402      	bmi.n	800311c <_vfiprintf_r+0x220>
 8003116:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003118:	f7ff fdb6 	bl	8002c88 <__retarget_lock_release_recursive>
 800311c:	89ab      	ldrh	r3, [r5, #12]
 800311e:	065b      	lsls	r3, r3, #25
 8003120:	f53f af12 	bmi.w	8002f48 <_vfiprintf_r+0x4c>
 8003124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003126:	e711      	b.n	8002f4c <_vfiprintf_r+0x50>
 8003128:	ab03      	add	r3, sp, #12
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	462a      	mov	r2, r5
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <_vfiprintf_r+0x258>)
 8003130:	a904      	add	r1, sp, #16
 8003132:	4630      	mov	r0, r6
 8003134:	f000 f880 	bl	8003238 <_printf_i>
 8003138:	e7e4      	b.n	8003104 <_vfiprintf_r+0x208>
 800313a:	bf00      	nop
 800313c:	08004410 	.word	0x08004410
 8003140:	08004430 	.word	0x08004430
 8003144:	080043f0 	.word	0x080043f0
 8003148:	08004450 	.word	0x08004450
 800314c:	0800445a 	.word	0x0800445a
 8003150:	00000000 	.word	0x00000000
 8003154:	08002ed7 	.word	0x08002ed7
 8003158:	08004456 	.word	0x08004456

0800315c <_printf_common>:
 800315c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003160:	4616      	mov	r6, r2
 8003162:	4699      	mov	r9, r3
 8003164:	688a      	ldr	r2, [r1, #8]
 8003166:	690b      	ldr	r3, [r1, #16]
 8003168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800316c:	4293      	cmp	r3, r2
 800316e:	bfb8      	it	lt
 8003170:	4613      	movlt	r3, r2
 8003172:	6033      	str	r3, [r6, #0]
 8003174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003178:	4607      	mov	r7, r0
 800317a:	460c      	mov	r4, r1
 800317c:	b10a      	cbz	r2, 8003182 <_printf_common+0x26>
 800317e:	3301      	adds	r3, #1
 8003180:	6033      	str	r3, [r6, #0]
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	0699      	lsls	r1, r3, #26
 8003186:	bf42      	ittt	mi
 8003188:	6833      	ldrmi	r3, [r6, #0]
 800318a:	3302      	addmi	r3, #2
 800318c:	6033      	strmi	r3, [r6, #0]
 800318e:	6825      	ldr	r5, [r4, #0]
 8003190:	f015 0506 	ands.w	r5, r5, #6
 8003194:	d106      	bne.n	80031a4 <_printf_common+0x48>
 8003196:	f104 0a19 	add.w	sl, r4, #25
 800319a:	68e3      	ldr	r3, [r4, #12]
 800319c:	6832      	ldr	r2, [r6, #0]
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	42ab      	cmp	r3, r5
 80031a2:	dc26      	bgt.n	80031f2 <_printf_common+0x96>
 80031a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80031a8:	1e13      	subs	r3, r2, #0
 80031aa:	6822      	ldr	r2, [r4, #0]
 80031ac:	bf18      	it	ne
 80031ae:	2301      	movne	r3, #1
 80031b0:	0692      	lsls	r2, r2, #26
 80031b2:	d42b      	bmi.n	800320c <_printf_common+0xb0>
 80031b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80031b8:	4649      	mov	r1, r9
 80031ba:	4638      	mov	r0, r7
 80031bc:	47c0      	blx	r8
 80031be:	3001      	adds	r0, #1
 80031c0:	d01e      	beq.n	8003200 <_printf_common+0xa4>
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	68e5      	ldr	r5, [r4, #12]
 80031c6:	6832      	ldr	r2, [r6, #0]
 80031c8:	f003 0306 	and.w	r3, r3, #6
 80031cc:	2b04      	cmp	r3, #4
 80031ce:	bf08      	it	eq
 80031d0:	1aad      	subeq	r5, r5, r2
 80031d2:	68a3      	ldr	r3, [r4, #8]
 80031d4:	6922      	ldr	r2, [r4, #16]
 80031d6:	bf0c      	ite	eq
 80031d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031dc:	2500      	movne	r5, #0
 80031de:	4293      	cmp	r3, r2
 80031e0:	bfc4      	itt	gt
 80031e2:	1a9b      	subgt	r3, r3, r2
 80031e4:	18ed      	addgt	r5, r5, r3
 80031e6:	2600      	movs	r6, #0
 80031e8:	341a      	adds	r4, #26
 80031ea:	42b5      	cmp	r5, r6
 80031ec:	d11a      	bne.n	8003224 <_printf_common+0xc8>
 80031ee:	2000      	movs	r0, #0
 80031f0:	e008      	b.n	8003204 <_printf_common+0xa8>
 80031f2:	2301      	movs	r3, #1
 80031f4:	4652      	mov	r2, sl
 80031f6:	4649      	mov	r1, r9
 80031f8:	4638      	mov	r0, r7
 80031fa:	47c0      	blx	r8
 80031fc:	3001      	adds	r0, #1
 80031fe:	d103      	bne.n	8003208 <_printf_common+0xac>
 8003200:	f04f 30ff 	mov.w	r0, #4294967295
 8003204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003208:	3501      	adds	r5, #1
 800320a:	e7c6      	b.n	800319a <_printf_common+0x3e>
 800320c:	18e1      	adds	r1, r4, r3
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	2030      	movs	r0, #48	; 0x30
 8003212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003216:	4422      	add	r2, r4
 8003218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800321c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003220:	3302      	adds	r3, #2
 8003222:	e7c7      	b.n	80031b4 <_printf_common+0x58>
 8003224:	2301      	movs	r3, #1
 8003226:	4622      	mov	r2, r4
 8003228:	4649      	mov	r1, r9
 800322a:	4638      	mov	r0, r7
 800322c:	47c0      	blx	r8
 800322e:	3001      	adds	r0, #1
 8003230:	d0e6      	beq.n	8003200 <_printf_common+0xa4>
 8003232:	3601      	adds	r6, #1
 8003234:	e7d9      	b.n	80031ea <_printf_common+0x8e>
	...

08003238 <_printf_i>:
 8003238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800323c:	460c      	mov	r4, r1
 800323e:	4691      	mov	r9, r2
 8003240:	7e27      	ldrb	r7, [r4, #24]
 8003242:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003244:	2f78      	cmp	r7, #120	; 0x78
 8003246:	4680      	mov	r8, r0
 8003248:	469a      	mov	sl, r3
 800324a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800324e:	d807      	bhi.n	8003260 <_printf_i+0x28>
 8003250:	2f62      	cmp	r7, #98	; 0x62
 8003252:	d80a      	bhi.n	800326a <_printf_i+0x32>
 8003254:	2f00      	cmp	r7, #0
 8003256:	f000 80d8 	beq.w	800340a <_printf_i+0x1d2>
 800325a:	2f58      	cmp	r7, #88	; 0x58
 800325c:	f000 80a3 	beq.w	80033a6 <_printf_i+0x16e>
 8003260:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003268:	e03a      	b.n	80032e0 <_printf_i+0xa8>
 800326a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800326e:	2b15      	cmp	r3, #21
 8003270:	d8f6      	bhi.n	8003260 <_printf_i+0x28>
 8003272:	a001      	add	r0, pc, #4	; (adr r0, 8003278 <_printf_i+0x40>)
 8003274:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003278:	080032d1 	.word	0x080032d1
 800327c:	080032e5 	.word	0x080032e5
 8003280:	08003261 	.word	0x08003261
 8003284:	08003261 	.word	0x08003261
 8003288:	08003261 	.word	0x08003261
 800328c:	08003261 	.word	0x08003261
 8003290:	080032e5 	.word	0x080032e5
 8003294:	08003261 	.word	0x08003261
 8003298:	08003261 	.word	0x08003261
 800329c:	08003261 	.word	0x08003261
 80032a0:	08003261 	.word	0x08003261
 80032a4:	080033f1 	.word	0x080033f1
 80032a8:	08003315 	.word	0x08003315
 80032ac:	080033d3 	.word	0x080033d3
 80032b0:	08003261 	.word	0x08003261
 80032b4:	08003261 	.word	0x08003261
 80032b8:	08003413 	.word	0x08003413
 80032bc:	08003261 	.word	0x08003261
 80032c0:	08003315 	.word	0x08003315
 80032c4:	08003261 	.word	0x08003261
 80032c8:	08003261 	.word	0x08003261
 80032cc:	080033db 	.word	0x080033db
 80032d0:	680b      	ldr	r3, [r1, #0]
 80032d2:	1d1a      	adds	r2, r3, #4
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	600a      	str	r2, [r1, #0]
 80032d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80032dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0a3      	b.n	800342c <_printf_i+0x1f4>
 80032e4:	6825      	ldr	r5, [r4, #0]
 80032e6:	6808      	ldr	r0, [r1, #0]
 80032e8:	062e      	lsls	r6, r5, #24
 80032ea:	f100 0304 	add.w	r3, r0, #4
 80032ee:	d50a      	bpl.n	8003306 <_printf_i+0xce>
 80032f0:	6805      	ldr	r5, [r0, #0]
 80032f2:	600b      	str	r3, [r1, #0]
 80032f4:	2d00      	cmp	r5, #0
 80032f6:	da03      	bge.n	8003300 <_printf_i+0xc8>
 80032f8:	232d      	movs	r3, #45	; 0x2d
 80032fa:	426d      	negs	r5, r5
 80032fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003300:	485e      	ldr	r0, [pc, #376]	; (800347c <_printf_i+0x244>)
 8003302:	230a      	movs	r3, #10
 8003304:	e019      	b.n	800333a <_printf_i+0x102>
 8003306:	f015 0f40 	tst.w	r5, #64	; 0x40
 800330a:	6805      	ldr	r5, [r0, #0]
 800330c:	600b      	str	r3, [r1, #0]
 800330e:	bf18      	it	ne
 8003310:	b22d      	sxthne	r5, r5
 8003312:	e7ef      	b.n	80032f4 <_printf_i+0xbc>
 8003314:	680b      	ldr	r3, [r1, #0]
 8003316:	6825      	ldr	r5, [r4, #0]
 8003318:	1d18      	adds	r0, r3, #4
 800331a:	6008      	str	r0, [r1, #0]
 800331c:	0628      	lsls	r0, r5, #24
 800331e:	d501      	bpl.n	8003324 <_printf_i+0xec>
 8003320:	681d      	ldr	r5, [r3, #0]
 8003322:	e002      	b.n	800332a <_printf_i+0xf2>
 8003324:	0669      	lsls	r1, r5, #25
 8003326:	d5fb      	bpl.n	8003320 <_printf_i+0xe8>
 8003328:	881d      	ldrh	r5, [r3, #0]
 800332a:	4854      	ldr	r0, [pc, #336]	; (800347c <_printf_i+0x244>)
 800332c:	2f6f      	cmp	r7, #111	; 0x6f
 800332e:	bf0c      	ite	eq
 8003330:	2308      	moveq	r3, #8
 8003332:	230a      	movne	r3, #10
 8003334:	2100      	movs	r1, #0
 8003336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800333a:	6866      	ldr	r6, [r4, #4]
 800333c:	60a6      	str	r6, [r4, #8]
 800333e:	2e00      	cmp	r6, #0
 8003340:	bfa2      	ittt	ge
 8003342:	6821      	ldrge	r1, [r4, #0]
 8003344:	f021 0104 	bicge.w	r1, r1, #4
 8003348:	6021      	strge	r1, [r4, #0]
 800334a:	b90d      	cbnz	r5, 8003350 <_printf_i+0x118>
 800334c:	2e00      	cmp	r6, #0
 800334e:	d04d      	beq.n	80033ec <_printf_i+0x1b4>
 8003350:	4616      	mov	r6, r2
 8003352:	fbb5 f1f3 	udiv	r1, r5, r3
 8003356:	fb03 5711 	mls	r7, r3, r1, r5
 800335a:	5dc7      	ldrb	r7, [r0, r7]
 800335c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003360:	462f      	mov	r7, r5
 8003362:	42bb      	cmp	r3, r7
 8003364:	460d      	mov	r5, r1
 8003366:	d9f4      	bls.n	8003352 <_printf_i+0x11a>
 8003368:	2b08      	cmp	r3, #8
 800336a:	d10b      	bne.n	8003384 <_printf_i+0x14c>
 800336c:	6823      	ldr	r3, [r4, #0]
 800336e:	07df      	lsls	r7, r3, #31
 8003370:	d508      	bpl.n	8003384 <_printf_i+0x14c>
 8003372:	6923      	ldr	r3, [r4, #16]
 8003374:	6861      	ldr	r1, [r4, #4]
 8003376:	4299      	cmp	r1, r3
 8003378:	bfde      	ittt	le
 800337a:	2330      	movle	r3, #48	; 0x30
 800337c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003380:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003384:	1b92      	subs	r2, r2, r6
 8003386:	6122      	str	r2, [r4, #16]
 8003388:	f8cd a000 	str.w	sl, [sp]
 800338c:	464b      	mov	r3, r9
 800338e:	aa03      	add	r2, sp, #12
 8003390:	4621      	mov	r1, r4
 8003392:	4640      	mov	r0, r8
 8003394:	f7ff fee2 	bl	800315c <_printf_common>
 8003398:	3001      	adds	r0, #1
 800339a:	d14c      	bne.n	8003436 <_printf_i+0x1fe>
 800339c:	f04f 30ff 	mov.w	r0, #4294967295
 80033a0:	b004      	add	sp, #16
 80033a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a6:	4835      	ldr	r0, [pc, #212]	; (800347c <_printf_i+0x244>)
 80033a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	680e      	ldr	r6, [r1, #0]
 80033b0:	061f      	lsls	r7, r3, #24
 80033b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80033b6:	600e      	str	r6, [r1, #0]
 80033b8:	d514      	bpl.n	80033e4 <_printf_i+0x1ac>
 80033ba:	07d9      	lsls	r1, r3, #31
 80033bc:	bf44      	itt	mi
 80033be:	f043 0320 	orrmi.w	r3, r3, #32
 80033c2:	6023      	strmi	r3, [r4, #0]
 80033c4:	b91d      	cbnz	r5, 80033ce <_printf_i+0x196>
 80033c6:	6823      	ldr	r3, [r4, #0]
 80033c8:	f023 0320 	bic.w	r3, r3, #32
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	2310      	movs	r3, #16
 80033d0:	e7b0      	b.n	8003334 <_printf_i+0xfc>
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	f043 0320 	orr.w	r3, r3, #32
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	2378      	movs	r3, #120	; 0x78
 80033dc:	4828      	ldr	r0, [pc, #160]	; (8003480 <_printf_i+0x248>)
 80033de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033e2:	e7e3      	b.n	80033ac <_printf_i+0x174>
 80033e4:	065e      	lsls	r6, r3, #25
 80033e6:	bf48      	it	mi
 80033e8:	b2ad      	uxthmi	r5, r5
 80033ea:	e7e6      	b.n	80033ba <_printf_i+0x182>
 80033ec:	4616      	mov	r6, r2
 80033ee:	e7bb      	b.n	8003368 <_printf_i+0x130>
 80033f0:	680b      	ldr	r3, [r1, #0]
 80033f2:	6826      	ldr	r6, [r4, #0]
 80033f4:	6960      	ldr	r0, [r4, #20]
 80033f6:	1d1d      	adds	r5, r3, #4
 80033f8:	600d      	str	r5, [r1, #0]
 80033fa:	0635      	lsls	r5, r6, #24
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	d501      	bpl.n	8003404 <_printf_i+0x1cc>
 8003400:	6018      	str	r0, [r3, #0]
 8003402:	e002      	b.n	800340a <_printf_i+0x1d2>
 8003404:	0671      	lsls	r1, r6, #25
 8003406:	d5fb      	bpl.n	8003400 <_printf_i+0x1c8>
 8003408:	8018      	strh	r0, [r3, #0]
 800340a:	2300      	movs	r3, #0
 800340c:	6123      	str	r3, [r4, #16]
 800340e:	4616      	mov	r6, r2
 8003410:	e7ba      	b.n	8003388 <_printf_i+0x150>
 8003412:	680b      	ldr	r3, [r1, #0]
 8003414:	1d1a      	adds	r2, r3, #4
 8003416:	600a      	str	r2, [r1, #0]
 8003418:	681e      	ldr	r6, [r3, #0]
 800341a:	6862      	ldr	r2, [r4, #4]
 800341c:	2100      	movs	r1, #0
 800341e:	4630      	mov	r0, r6
 8003420:	f7fc fede 	bl	80001e0 <memchr>
 8003424:	b108      	cbz	r0, 800342a <_printf_i+0x1f2>
 8003426:	1b80      	subs	r0, r0, r6
 8003428:	6060      	str	r0, [r4, #4]
 800342a:	6863      	ldr	r3, [r4, #4]
 800342c:	6123      	str	r3, [r4, #16]
 800342e:	2300      	movs	r3, #0
 8003430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003434:	e7a8      	b.n	8003388 <_printf_i+0x150>
 8003436:	6923      	ldr	r3, [r4, #16]
 8003438:	4632      	mov	r2, r6
 800343a:	4649      	mov	r1, r9
 800343c:	4640      	mov	r0, r8
 800343e:	47d0      	blx	sl
 8003440:	3001      	adds	r0, #1
 8003442:	d0ab      	beq.n	800339c <_printf_i+0x164>
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	079b      	lsls	r3, r3, #30
 8003448:	d413      	bmi.n	8003472 <_printf_i+0x23a>
 800344a:	68e0      	ldr	r0, [r4, #12]
 800344c:	9b03      	ldr	r3, [sp, #12]
 800344e:	4298      	cmp	r0, r3
 8003450:	bfb8      	it	lt
 8003452:	4618      	movlt	r0, r3
 8003454:	e7a4      	b.n	80033a0 <_printf_i+0x168>
 8003456:	2301      	movs	r3, #1
 8003458:	4632      	mov	r2, r6
 800345a:	4649      	mov	r1, r9
 800345c:	4640      	mov	r0, r8
 800345e:	47d0      	blx	sl
 8003460:	3001      	adds	r0, #1
 8003462:	d09b      	beq.n	800339c <_printf_i+0x164>
 8003464:	3501      	adds	r5, #1
 8003466:	68e3      	ldr	r3, [r4, #12]
 8003468:	9903      	ldr	r1, [sp, #12]
 800346a:	1a5b      	subs	r3, r3, r1
 800346c:	42ab      	cmp	r3, r5
 800346e:	dcf2      	bgt.n	8003456 <_printf_i+0x21e>
 8003470:	e7eb      	b.n	800344a <_printf_i+0x212>
 8003472:	2500      	movs	r5, #0
 8003474:	f104 0619 	add.w	r6, r4, #25
 8003478:	e7f5      	b.n	8003466 <_printf_i+0x22e>
 800347a:	bf00      	nop
 800347c:	08004461 	.word	0x08004461
 8003480:	08004472 	.word	0x08004472

08003484 <__svfiscanf_r>:
 8003484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003488:	461d      	mov	r5, r3
 800348a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800348c:	07df      	lsls	r7, r3, #31
 800348e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003492:	4606      	mov	r6, r0
 8003494:	460c      	mov	r4, r1
 8003496:	4692      	mov	sl, r2
 8003498:	d405      	bmi.n	80034a6 <__svfiscanf_r+0x22>
 800349a:	898b      	ldrh	r3, [r1, #12]
 800349c:	0598      	lsls	r0, r3, #22
 800349e:	d402      	bmi.n	80034a6 <__svfiscanf_r+0x22>
 80034a0:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80034a2:	f7ff fbf0 	bl	8002c86 <__retarget_lock_acquire_recursive>
 80034a6:	2300      	movs	r3, #0
 80034a8:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80034ac:	4bae      	ldr	r3, [pc, #696]	; (8003768 <__svfiscanf_r+0x2e4>)
 80034ae:	93a0      	str	r3, [sp, #640]	; 0x280
 80034b0:	f10d 0804 	add.w	r8, sp, #4
 80034b4:	4bad      	ldr	r3, [pc, #692]	; (800376c <__svfiscanf_r+0x2e8>)
 80034b6:	4fae      	ldr	r7, [pc, #696]	; (8003770 <__svfiscanf_r+0x2ec>)
 80034b8:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 8003774 <__svfiscanf_r+0x2f0>
 80034bc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80034c0:	93a1      	str	r3, [sp, #644]	; 0x284
 80034c2:	9500      	str	r5, [sp, #0]
 80034c4:	f89a b000 	ldrb.w	fp, [sl]
 80034c8:	f1bb 0f00 	cmp.w	fp, #0
 80034cc:	f000 8170 	beq.w	80037b0 <__svfiscanf_r+0x32c>
 80034d0:	f81b 3007 	ldrb.w	r3, [fp, r7]
 80034d4:	f013 0308 	ands.w	r3, r3, #8
 80034d8:	f10a 0501 	add.w	r5, sl, #1
 80034dc:	d019      	beq.n	8003512 <__svfiscanf_r+0x8e>
 80034de:	6863      	ldr	r3, [r4, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	dd0f      	ble.n	8003504 <__svfiscanf_r+0x80>
 80034e4:	6823      	ldr	r3, [r4, #0]
 80034e6:	781a      	ldrb	r2, [r3, #0]
 80034e8:	5cba      	ldrb	r2, [r7, r2]
 80034ea:	0711      	lsls	r1, r2, #28
 80034ec:	d401      	bmi.n	80034f2 <__svfiscanf_r+0x6e>
 80034ee:	46aa      	mov	sl, r5
 80034f0:	e7e8      	b.n	80034c4 <__svfiscanf_r+0x40>
 80034f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80034f4:	3201      	adds	r2, #1
 80034f6:	9245      	str	r2, [sp, #276]	; 0x114
 80034f8:	6862      	ldr	r2, [r4, #4]
 80034fa:	3301      	adds	r3, #1
 80034fc:	3a01      	subs	r2, #1
 80034fe:	6062      	str	r2, [r4, #4]
 8003500:	6023      	str	r3, [r4, #0]
 8003502:	e7ec      	b.n	80034de <__svfiscanf_r+0x5a>
 8003504:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003506:	4621      	mov	r1, r4
 8003508:	4630      	mov	r0, r6
 800350a:	4798      	blx	r3
 800350c:	2800      	cmp	r0, #0
 800350e:	d0e9      	beq.n	80034e4 <__svfiscanf_r+0x60>
 8003510:	e7ed      	b.n	80034ee <__svfiscanf_r+0x6a>
 8003512:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8003516:	f040 8086 	bne.w	8003626 <__svfiscanf_r+0x1a2>
 800351a:	9341      	str	r3, [sp, #260]	; 0x104
 800351c:	9343      	str	r3, [sp, #268]	; 0x10c
 800351e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8003522:	2b2a      	cmp	r3, #42	; 0x2a
 8003524:	bf02      	ittt	eq
 8003526:	2310      	moveq	r3, #16
 8003528:	9341      	streq	r3, [sp, #260]	; 0x104
 800352a:	f10a 0502 	addeq.w	r5, sl, #2
 800352e:	220a      	movs	r2, #10
 8003530:	46aa      	mov	sl, r5
 8003532:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8003536:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800353a:	2b09      	cmp	r3, #9
 800353c:	d91e      	bls.n	800357c <__svfiscanf_r+0xf8>
 800353e:	488d      	ldr	r0, [pc, #564]	; (8003774 <__svfiscanf_r+0x2f0>)
 8003540:	2203      	movs	r2, #3
 8003542:	f7fc fe4d 	bl	80001e0 <memchr>
 8003546:	b140      	cbz	r0, 800355a <__svfiscanf_r+0xd6>
 8003548:	2301      	movs	r3, #1
 800354a:	eba0 0009 	sub.w	r0, r0, r9
 800354e:	fa03 f000 	lsl.w	r0, r3, r0
 8003552:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003554:	4318      	orrs	r0, r3
 8003556:	9041      	str	r0, [sp, #260]	; 0x104
 8003558:	4655      	mov	r5, sl
 800355a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800355e:	2b78      	cmp	r3, #120	; 0x78
 8003560:	d807      	bhi.n	8003572 <__svfiscanf_r+0xee>
 8003562:	2b57      	cmp	r3, #87	; 0x57
 8003564:	d811      	bhi.n	800358a <__svfiscanf_r+0x106>
 8003566:	2b25      	cmp	r3, #37	; 0x25
 8003568:	d05d      	beq.n	8003626 <__svfiscanf_r+0x1a2>
 800356a:	d857      	bhi.n	800361c <__svfiscanf_r+0x198>
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80d6 	beq.w	800371e <__svfiscanf_r+0x29a>
 8003572:	2303      	movs	r3, #3
 8003574:	9347      	str	r3, [sp, #284]	; 0x11c
 8003576:	230a      	movs	r3, #10
 8003578:	9342      	str	r3, [sp, #264]	; 0x108
 800357a:	e08b      	b.n	8003694 <__svfiscanf_r+0x210>
 800357c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800357e:	fb02 1303 	mla	r3, r2, r3, r1
 8003582:	3b30      	subs	r3, #48	; 0x30
 8003584:	9343      	str	r3, [sp, #268]	; 0x10c
 8003586:	4655      	mov	r5, sl
 8003588:	e7d2      	b.n	8003530 <__svfiscanf_r+0xac>
 800358a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800358e:	2a20      	cmp	r2, #32
 8003590:	d8ef      	bhi.n	8003572 <__svfiscanf_r+0xee>
 8003592:	a101      	add	r1, pc, #4	; (adr r1, 8003598 <__svfiscanf_r+0x114>)
 8003594:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003598:	0800367f 	.word	0x0800367f
 800359c:	08003573 	.word	0x08003573
 80035a0:	08003573 	.word	0x08003573
 80035a4:	080036dd 	.word	0x080036dd
 80035a8:	08003573 	.word	0x08003573
 80035ac:	08003573 	.word	0x08003573
 80035b0:	08003573 	.word	0x08003573
 80035b4:	08003573 	.word	0x08003573
 80035b8:	08003573 	.word	0x08003573
 80035bc:	08003573 	.word	0x08003573
 80035c0:	08003573 	.word	0x08003573
 80035c4:	080036f3 	.word	0x080036f3
 80035c8:	080036c9 	.word	0x080036c9
 80035cc:	08003623 	.word	0x08003623
 80035d0:	08003623 	.word	0x08003623
 80035d4:	08003623 	.word	0x08003623
 80035d8:	08003573 	.word	0x08003573
 80035dc:	080036cd 	.word	0x080036cd
 80035e0:	08003573 	.word	0x08003573
 80035e4:	08003573 	.word	0x08003573
 80035e8:	08003573 	.word	0x08003573
 80035ec:	08003573 	.word	0x08003573
 80035f0:	08003703 	.word	0x08003703
 80035f4:	080036d5 	.word	0x080036d5
 80035f8:	08003677 	.word	0x08003677
 80035fc:	08003573 	.word	0x08003573
 8003600:	08003573 	.word	0x08003573
 8003604:	080036ff 	.word	0x080036ff
 8003608:	08003573 	.word	0x08003573
 800360c:	080036c9 	.word	0x080036c9
 8003610:	08003573 	.word	0x08003573
 8003614:	08003573 	.word	0x08003573
 8003618:	0800367f 	.word	0x0800367f
 800361c:	3b45      	subs	r3, #69	; 0x45
 800361e:	2b02      	cmp	r3, #2
 8003620:	d8a7      	bhi.n	8003572 <__svfiscanf_r+0xee>
 8003622:	2305      	movs	r3, #5
 8003624:	e035      	b.n	8003692 <__svfiscanf_r+0x20e>
 8003626:	6863      	ldr	r3, [r4, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	dd0d      	ble.n	8003648 <__svfiscanf_r+0x1c4>
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	781a      	ldrb	r2, [r3, #0]
 8003630:	455a      	cmp	r2, fp
 8003632:	f040 80bd 	bne.w	80037b0 <__svfiscanf_r+0x32c>
 8003636:	3301      	adds	r3, #1
 8003638:	6862      	ldr	r2, [r4, #4]
 800363a:	6023      	str	r3, [r4, #0]
 800363c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800363e:	3a01      	subs	r2, #1
 8003640:	3301      	adds	r3, #1
 8003642:	6062      	str	r2, [r4, #4]
 8003644:	9345      	str	r3, [sp, #276]	; 0x114
 8003646:	e752      	b.n	80034ee <__svfiscanf_r+0x6a>
 8003648:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800364a:	4621      	mov	r1, r4
 800364c:	4630      	mov	r0, r6
 800364e:	4798      	blx	r3
 8003650:	2800      	cmp	r0, #0
 8003652:	d0eb      	beq.n	800362c <__svfiscanf_r+0x1a8>
 8003654:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003656:	07da      	lsls	r2, r3, #31
 8003658:	f140 80a2 	bpl.w	80037a0 <__svfiscanf_r+0x31c>
 800365c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800365e:	2800      	cmp	r0, #0
 8003660:	d066      	beq.n	8003730 <__svfiscanf_r+0x2ac>
 8003662:	89a3      	ldrh	r3, [r4, #12]
 8003664:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003668:	bf18      	it	ne
 800366a:	f04f 30ff 	movne.w	r0, #4294967295
 800366e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003676:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003678:	f042 0220 	orr.w	r2, r2, #32
 800367c:	9241      	str	r2, [sp, #260]	; 0x104
 800367e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003684:	9241      	str	r2, [sp, #260]	; 0x104
 8003686:	2210      	movs	r2, #16
 8003688:	2b6f      	cmp	r3, #111	; 0x6f
 800368a:	9242      	str	r2, [sp, #264]	; 0x108
 800368c:	bf34      	ite	cc
 800368e:	2303      	movcc	r3, #3
 8003690:	2304      	movcs	r3, #4
 8003692:	9347      	str	r3, [sp, #284]	; 0x11c
 8003694:	6863      	ldr	r3, [r4, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	dd4d      	ble.n	8003736 <__svfiscanf_r+0x2b2>
 800369a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800369c:	065b      	lsls	r3, r3, #25
 800369e:	d404      	bmi.n	80036aa <__svfiscanf_r+0x226>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	781a      	ldrb	r2, [r3, #0]
 80036a4:	5cba      	ldrb	r2, [r7, r2]
 80036a6:	0710      	lsls	r0, r2, #28
 80036a8:	d44c      	bmi.n	8003744 <__svfiscanf_r+0x2c0>
 80036aa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	dc63      	bgt.n	8003778 <__svfiscanf_r+0x2f4>
 80036b0:	466b      	mov	r3, sp
 80036b2:	4622      	mov	r2, r4
 80036b4:	a941      	add	r1, sp, #260	; 0x104
 80036b6:	4630      	mov	r0, r6
 80036b8:	f000 f8b0 	bl	800381c <_scanf_chars>
 80036bc:	2801      	cmp	r0, #1
 80036be:	d077      	beq.n	80037b0 <__svfiscanf_r+0x32c>
 80036c0:	2802      	cmp	r0, #2
 80036c2:	f47f af14 	bne.w	80034ee <__svfiscanf_r+0x6a>
 80036c6:	e7c5      	b.n	8003654 <__svfiscanf_r+0x1d0>
 80036c8:	220a      	movs	r2, #10
 80036ca:	e7dd      	b.n	8003688 <__svfiscanf_r+0x204>
 80036cc:	2300      	movs	r3, #0
 80036ce:	9342      	str	r3, [sp, #264]	; 0x108
 80036d0:	2303      	movs	r3, #3
 80036d2:	e7de      	b.n	8003692 <__svfiscanf_r+0x20e>
 80036d4:	2308      	movs	r3, #8
 80036d6:	9342      	str	r3, [sp, #264]	; 0x108
 80036d8:	2304      	movs	r3, #4
 80036da:	e7da      	b.n	8003692 <__svfiscanf_r+0x20e>
 80036dc:	4629      	mov	r1, r5
 80036de:	4640      	mov	r0, r8
 80036e0:	f000 fa8c 	bl	8003bfc <__sccl>
 80036e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80036e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ea:	9341      	str	r3, [sp, #260]	; 0x104
 80036ec:	4605      	mov	r5, r0
 80036ee:	2301      	movs	r3, #1
 80036f0:	e7cf      	b.n	8003692 <__svfiscanf_r+0x20e>
 80036f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80036f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f8:	9341      	str	r3, [sp, #260]	; 0x104
 80036fa:	2300      	movs	r3, #0
 80036fc:	e7c9      	b.n	8003692 <__svfiscanf_r+0x20e>
 80036fe:	2302      	movs	r3, #2
 8003700:	e7c7      	b.n	8003692 <__svfiscanf_r+0x20e>
 8003702:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003704:	06c3      	lsls	r3, r0, #27
 8003706:	f53f aef2 	bmi.w	80034ee <__svfiscanf_r+0x6a>
 800370a:	9b00      	ldr	r3, [sp, #0]
 800370c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800370e:	1d19      	adds	r1, r3, #4
 8003710:	9100      	str	r1, [sp, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	07c0      	lsls	r0, r0, #31
 8003716:	bf4c      	ite	mi
 8003718:	801a      	strhmi	r2, [r3, #0]
 800371a:	601a      	strpl	r2, [r3, #0]
 800371c:	e6e7      	b.n	80034ee <__svfiscanf_r+0x6a>
 800371e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003720:	07d8      	lsls	r0, r3, #31
 8003722:	d405      	bmi.n	8003730 <__svfiscanf_r+0x2ac>
 8003724:	89a3      	ldrh	r3, [r4, #12]
 8003726:	0599      	lsls	r1, r3, #22
 8003728:	d402      	bmi.n	8003730 <__svfiscanf_r+0x2ac>
 800372a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800372c:	f7ff faac 	bl	8002c88 <__retarget_lock_release_recursive>
 8003730:	f04f 30ff 	mov.w	r0, #4294967295
 8003734:	e79b      	b.n	800366e <__svfiscanf_r+0x1ea>
 8003736:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003738:	4621      	mov	r1, r4
 800373a:	4630      	mov	r0, r6
 800373c:	4798      	blx	r3
 800373e:	2800      	cmp	r0, #0
 8003740:	d0ab      	beq.n	800369a <__svfiscanf_r+0x216>
 8003742:	e787      	b.n	8003654 <__svfiscanf_r+0x1d0>
 8003744:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003746:	3201      	adds	r2, #1
 8003748:	9245      	str	r2, [sp, #276]	; 0x114
 800374a:	6862      	ldr	r2, [r4, #4]
 800374c:	3a01      	subs	r2, #1
 800374e:	2a00      	cmp	r2, #0
 8003750:	6062      	str	r2, [r4, #4]
 8003752:	dd02      	ble.n	800375a <__svfiscanf_r+0x2d6>
 8003754:	3301      	adds	r3, #1
 8003756:	6023      	str	r3, [r4, #0]
 8003758:	e7a2      	b.n	80036a0 <__svfiscanf_r+0x21c>
 800375a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800375c:	4621      	mov	r1, r4
 800375e:	4630      	mov	r0, r6
 8003760:	4798      	blx	r3
 8003762:	2800      	cmp	r0, #0
 8003764:	d09c      	beq.n	80036a0 <__svfiscanf_r+0x21c>
 8003766:	e775      	b.n	8003654 <__svfiscanf_r+0x1d0>
 8003768:	08003f75 	.word	0x08003f75
 800376c:	08003ac9 	.word	0x08003ac9
 8003770:	0800449f 	.word	0x0800449f
 8003774:	08004456 	.word	0x08004456
 8003778:	2b04      	cmp	r3, #4
 800377a:	dc06      	bgt.n	800378a <__svfiscanf_r+0x306>
 800377c:	466b      	mov	r3, sp
 800377e:	4622      	mov	r2, r4
 8003780:	a941      	add	r1, sp, #260	; 0x104
 8003782:	4630      	mov	r0, r6
 8003784:	f000 f8a2 	bl	80038cc <_scanf_i>
 8003788:	e798      	b.n	80036bc <__svfiscanf_r+0x238>
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <__svfiscanf_r+0x344>)
 800378c:	2b00      	cmp	r3, #0
 800378e:	f43f aeae 	beq.w	80034ee <__svfiscanf_r+0x6a>
 8003792:	466b      	mov	r3, sp
 8003794:	4622      	mov	r2, r4
 8003796:	a941      	add	r1, sp, #260	; 0x104
 8003798:	4630      	mov	r0, r6
 800379a:	f3af 8000 	nop.w
 800379e:	e78d      	b.n	80036bc <__svfiscanf_r+0x238>
 80037a0:	89a3      	ldrh	r3, [r4, #12]
 80037a2:	0599      	lsls	r1, r3, #22
 80037a4:	f53f af5a 	bmi.w	800365c <__svfiscanf_r+0x1d8>
 80037a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037aa:	f7ff fa6d 	bl	8002c88 <__retarget_lock_release_recursive>
 80037ae:	e755      	b.n	800365c <__svfiscanf_r+0x1d8>
 80037b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037b2:	07da      	lsls	r2, r3, #31
 80037b4:	d405      	bmi.n	80037c2 <__svfiscanf_r+0x33e>
 80037b6:	89a3      	ldrh	r3, [r4, #12]
 80037b8:	059b      	lsls	r3, r3, #22
 80037ba:	d402      	bmi.n	80037c2 <__svfiscanf_r+0x33e>
 80037bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037be:	f7ff fa63 	bl	8002c88 <__retarget_lock_release_recursive>
 80037c2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80037c4:	e753      	b.n	800366e <__svfiscanf_r+0x1ea>
 80037c6:	bf00      	nop
 80037c8:	00000000 	.word	0x00000000

080037cc <_vfiscanf_r>:
 80037cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80037ce:	460c      	mov	r4, r1
 80037d0:	4605      	mov	r5, r0
 80037d2:	b138      	cbz	r0, 80037e4 <_vfiscanf_r+0x18>
 80037d4:	6981      	ldr	r1, [r0, #24]
 80037d6:	b929      	cbnz	r1, 80037e4 <_vfiscanf_r+0x18>
 80037d8:	e9cd 2300 	strd	r2, r3, [sp]
 80037dc:	f7ff f998 	bl	8002b10 <__sinit>
 80037e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037e4:	490a      	ldr	r1, [pc, #40]	; (8003810 <_vfiscanf_r+0x44>)
 80037e6:	428c      	cmp	r4, r1
 80037e8:	d107      	bne.n	80037fa <_vfiscanf_r+0x2e>
 80037ea:	686c      	ldr	r4, [r5, #4]
 80037ec:	4621      	mov	r1, r4
 80037ee:	4628      	mov	r0, r5
 80037f0:	b003      	add	sp, #12
 80037f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037f6:	f7ff be45 	b.w	8003484 <__svfiscanf_r>
 80037fa:	4906      	ldr	r1, [pc, #24]	; (8003814 <_vfiscanf_r+0x48>)
 80037fc:	428c      	cmp	r4, r1
 80037fe:	d101      	bne.n	8003804 <_vfiscanf_r+0x38>
 8003800:	68ac      	ldr	r4, [r5, #8]
 8003802:	e7f3      	b.n	80037ec <_vfiscanf_r+0x20>
 8003804:	4904      	ldr	r1, [pc, #16]	; (8003818 <_vfiscanf_r+0x4c>)
 8003806:	428c      	cmp	r4, r1
 8003808:	bf08      	it	eq
 800380a:	68ec      	ldreq	r4, [r5, #12]
 800380c:	e7ee      	b.n	80037ec <_vfiscanf_r+0x20>
 800380e:	bf00      	nop
 8003810:	08004410 	.word	0x08004410
 8003814:	08004430 	.word	0x08004430
 8003818:	080043f0 	.word	0x080043f0

0800381c <_scanf_chars>:
 800381c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003820:	4615      	mov	r5, r2
 8003822:	688a      	ldr	r2, [r1, #8]
 8003824:	4680      	mov	r8, r0
 8003826:	460c      	mov	r4, r1
 8003828:	b932      	cbnz	r2, 8003838 <_scanf_chars+0x1c>
 800382a:	698a      	ldr	r2, [r1, #24]
 800382c:	2a00      	cmp	r2, #0
 800382e:	bf0c      	ite	eq
 8003830:	2201      	moveq	r2, #1
 8003832:	f04f 32ff 	movne.w	r2, #4294967295
 8003836:	608a      	str	r2, [r1, #8]
 8003838:	6822      	ldr	r2, [r4, #0]
 800383a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80038c8 <_scanf_chars+0xac>
 800383e:	06d1      	lsls	r1, r2, #27
 8003840:	bf5f      	itttt	pl
 8003842:	681a      	ldrpl	r2, [r3, #0]
 8003844:	1d11      	addpl	r1, r2, #4
 8003846:	6019      	strpl	r1, [r3, #0]
 8003848:	6816      	ldrpl	r6, [r2, #0]
 800384a:	2700      	movs	r7, #0
 800384c:	69a0      	ldr	r0, [r4, #24]
 800384e:	b188      	cbz	r0, 8003874 <_scanf_chars+0x58>
 8003850:	2801      	cmp	r0, #1
 8003852:	d107      	bne.n	8003864 <_scanf_chars+0x48>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	781a      	ldrb	r2, [r3, #0]
 8003858:	6963      	ldr	r3, [r4, #20]
 800385a:	5c9b      	ldrb	r3, [r3, r2]
 800385c:	b953      	cbnz	r3, 8003874 <_scanf_chars+0x58>
 800385e:	bb27      	cbnz	r7, 80038aa <_scanf_chars+0x8e>
 8003860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003864:	2802      	cmp	r0, #2
 8003866:	d120      	bne.n	80038aa <_scanf_chars+0x8e>
 8003868:	682b      	ldr	r3, [r5, #0]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8003870:	071b      	lsls	r3, r3, #28
 8003872:	d41a      	bmi.n	80038aa <_scanf_chars+0x8e>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	06da      	lsls	r2, r3, #27
 8003878:	bf5e      	ittt	pl
 800387a:	682b      	ldrpl	r3, [r5, #0]
 800387c:	781b      	ldrbpl	r3, [r3, #0]
 800387e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003882:	682a      	ldr	r2, [r5, #0]
 8003884:	686b      	ldr	r3, [r5, #4]
 8003886:	3201      	adds	r2, #1
 8003888:	602a      	str	r2, [r5, #0]
 800388a:	68a2      	ldr	r2, [r4, #8]
 800388c:	3b01      	subs	r3, #1
 800388e:	3a01      	subs	r2, #1
 8003890:	606b      	str	r3, [r5, #4]
 8003892:	3701      	adds	r7, #1
 8003894:	60a2      	str	r2, [r4, #8]
 8003896:	b142      	cbz	r2, 80038aa <_scanf_chars+0x8e>
 8003898:	2b00      	cmp	r3, #0
 800389a:	dcd7      	bgt.n	800384c <_scanf_chars+0x30>
 800389c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80038a0:	4629      	mov	r1, r5
 80038a2:	4640      	mov	r0, r8
 80038a4:	4798      	blx	r3
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d0d0      	beq.n	800384c <_scanf_chars+0x30>
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	f013 0310 	ands.w	r3, r3, #16
 80038b0:	d105      	bne.n	80038be <_scanf_chars+0xa2>
 80038b2:	68e2      	ldr	r2, [r4, #12]
 80038b4:	3201      	adds	r2, #1
 80038b6:	60e2      	str	r2, [r4, #12]
 80038b8:	69a2      	ldr	r2, [r4, #24]
 80038ba:	b102      	cbz	r2, 80038be <_scanf_chars+0xa2>
 80038bc:	7033      	strb	r3, [r6, #0]
 80038be:	6923      	ldr	r3, [r4, #16]
 80038c0:	441f      	add	r7, r3
 80038c2:	6127      	str	r7, [r4, #16]
 80038c4:	2000      	movs	r0, #0
 80038c6:	e7cb      	b.n	8003860 <_scanf_chars+0x44>
 80038c8:	0800449f 	.word	0x0800449f

080038cc <_scanf_i>:
 80038cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038d0:	4698      	mov	r8, r3
 80038d2:	4b74      	ldr	r3, [pc, #464]	; (8003aa4 <_scanf_i+0x1d8>)
 80038d4:	460c      	mov	r4, r1
 80038d6:	4682      	mov	sl, r0
 80038d8:	4616      	mov	r6, r2
 80038da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80038de:	b087      	sub	sp, #28
 80038e0:	ab03      	add	r3, sp, #12
 80038e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80038e6:	4b70      	ldr	r3, [pc, #448]	; (8003aa8 <_scanf_i+0x1dc>)
 80038e8:	69a1      	ldr	r1, [r4, #24]
 80038ea:	4a70      	ldr	r2, [pc, #448]	; (8003aac <_scanf_i+0x1e0>)
 80038ec:	2903      	cmp	r1, #3
 80038ee:	bf18      	it	ne
 80038f0:	461a      	movne	r2, r3
 80038f2:	68a3      	ldr	r3, [r4, #8]
 80038f4:	9201      	str	r2, [sp, #4]
 80038f6:	1e5a      	subs	r2, r3, #1
 80038f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80038fc:	bf88      	it	hi
 80038fe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003902:	4627      	mov	r7, r4
 8003904:	bf82      	ittt	hi
 8003906:	eb03 0905 	addhi.w	r9, r3, r5
 800390a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800390e:	60a3      	strhi	r3, [r4, #8]
 8003910:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003914:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8003918:	bf98      	it	ls
 800391a:	f04f 0900 	movls.w	r9, #0
 800391e:	6023      	str	r3, [r4, #0]
 8003920:	463d      	mov	r5, r7
 8003922:	f04f 0b00 	mov.w	fp, #0
 8003926:	6831      	ldr	r1, [r6, #0]
 8003928:	ab03      	add	r3, sp, #12
 800392a:	7809      	ldrb	r1, [r1, #0]
 800392c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003930:	2202      	movs	r2, #2
 8003932:	f7fc fc55 	bl	80001e0 <memchr>
 8003936:	b328      	cbz	r0, 8003984 <_scanf_i+0xb8>
 8003938:	f1bb 0f01 	cmp.w	fp, #1
 800393c:	d159      	bne.n	80039f2 <_scanf_i+0x126>
 800393e:	6862      	ldr	r2, [r4, #4]
 8003940:	b92a      	cbnz	r2, 800394e <_scanf_i+0x82>
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	2308      	movs	r3, #8
 8003946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800394a:	6063      	str	r3, [r4, #4]
 800394c:	6022      	str	r2, [r4, #0]
 800394e:	6822      	ldr	r2, [r4, #0]
 8003950:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8003954:	6022      	str	r2, [r4, #0]
 8003956:	68a2      	ldr	r2, [r4, #8]
 8003958:	1e51      	subs	r1, r2, #1
 800395a:	60a1      	str	r1, [r4, #8]
 800395c:	b192      	cbz	r2, 8003984 <_scanf_i+0xb8>
 800395e:	6832      	ldr	r2, [r6, #0]
 8003960:	1c51      	adds	r1, r2, #1
 8003962:	6031      	str	r1, [r6, #0]
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	f805 2b01 	strb.w	r2, [r5], #1
 800396a:	6872      	ldr	r2, [r6, #4]
 800396c:	3a01      	subs	r2, #1
 800396e:	2a00      	cmp	r2, #0
 8003970:	6072      	str	r2, [r6, #4]
 8003972:	dc07      	bgt.n	8003984 <_scanf_i+0xb8>
 8003974:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8003978:	4631      	mov	r1, r6
 800397a:	4650      	mov	r0, sl
 800397c:	4790      	blx	r2
 800397e:	2800      	cmp	r0, #0
 8003980:	f040 8085 	bne.w	8003a8e <_scanf_i+0x1c2>
 8003984:	f10b 0b01 	add.w	fp, fp, #1
 8003988:	f1bb 0f03 	cmp.w	fp, #3
 800398c:	d1cb      	bne.n	8003926 <_scanf_i+0x5a>
 800398e:	6863      	ldr	r3, [r4, #4]
 8003990:	b90b      	cbnz	r3, 8003996 <_scanf_i+0xca>
 8003992:	230a      	movs	r3, #10
 8003994:	6063      	str	r3, [r4, #4]
 8003996:	6863      	ldr	r3, [r4, #4]
 8003998:	4945      	ldr	r1, [pc, #276]	; (8003ab0 <_scanf_i+0x1e4>)
 800399a:	6960      	ldr	r0, [r4, #20]
 800399c:	1ac9      	subs	r1, r1, r3
 800399e:	f000 f92d 	bl	8003bfc <__sccl>
 80039a2:	f04f 0b00 	mov.w	fp, #0
 80039a6:	68a3      	ldr	r3, [r4, #8]
 80039a8:	6822      	ldr	r2, [r4, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d03d      	beq.n	8003a2a <_scanf_i+0x15e>
 80039ae:	6831      	ldr	r1, [r6, #0]
 80039b0:	6960      	ldr	r0, [r4, #20]
 80039b2:	f891 c000 	ldrb.w	ip, [r1]
 80039b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d035      	beq.n	8003a2a <_scanf_i+0x15e>
 80039be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80039c2:	d124      	bne.n	8003a0e <_scanf_i+0x142>
 80039c4:	0510      	lsls	r0, r2, #20
 80039c6:	d522      	bpl.n	8003a0e <_scanf_i+0x142>
 80039c8:	f10b 0b01 	add.w	fp, fp, #1
 80039cc:	f1b9 0f00 	cmp.w	r9, #0
 80039d0:	d003      	beq.n	80039da <_scanf_i+0x10e>
 80039d2:	3301      	adds	r3, #1
 80039d4:	f109 39ff 	add.w	r9, r9, #4294967295
 80039d8:	60a3      	str	r3, [r4, #8]
 80039da:	6873      	ldr	r3, [r6, #4]
 80039dc:	3b01      	subs	r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	6073      	str	r3, [r6, #4]
 80039e2:	dd1b      	ble.n	8003a1c <_scanf_i+0x150>
 80039e4:	6833      	ldr	r3, [r6, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	6033      	str	r3, [r6, #0]
 80039ea:	68a3      	ldr	r3, [r4, #8]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	60a3      	str	r3, [r4, #8]
 80039f0:	e7d9      	b.n	80039a6 <_scanf_i+0xda>
 80039f2:	f1bb 0f02 	cmp.w	fp, #2
 80039f6:	d1ae      	bne.n	8003956 <_scanf_i+0x8a>
 80039f8:	6822      	ldr	r2, [r4, #0]
 80039fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80039fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003a02:	d1bf      	bne.n	8003984 <_scanf_i+0xb8>
 8003a04:	2310      	movs	r3, #16
 8003a06:	6063      	str	r3, [r4, #4]
 8003a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0c:	e7a2      	b.n	8003954 <_scanf_i+0x88>
 8003a0e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003a12:	6022      	str	r2, [r4, #0]
 8003a14:	780b      	ldrb	r3, [r1, #0]
 8003a16:	f805 3b01 	strb.w	r3, [r5], #1
 8003a1a:	e7de      	b.n	80039da <_scanf_i+0x10e>
 8003a1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003a20:	4631      	mov	r1, r6
 8003a22:	4650      	mov	r0, sl
 8003a24:	4798      	blx	r3
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d0df      	beq.n	80039ea <_scanf_i+0x11e>
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	05d9      	lsls	r1, r3, #23
 8003a2e:	d50d      	bpl.n	8003a4c <_scanf_i+0x180>
 8003a30:	42bd      	cmp	r5, r7
 8003a32:	d909      	bls.n	8003a48 <_scanf_i+0x17c>
 8003a34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003a38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003a3c:	4632      	mov	r2, r6
 8003a3e:	4650      	mov	r0, sl
 8003a40:	4798      	blx	r3
 8003a42:	f105 39ff 	add.w	r9, r5, #4294967295
 8003a46:	464d      	mov	r5, r9
 8003a48:	42bd      	cmp	r5, r7
 8003a4a:	d028      	beq.n	8003a9e <_scanf_i+0x1d2>
 8003a4c:	6822      	ldr	r2, [r4, #0]
 8003a4e:	f012 0210 	ands.w	r2, r2, #16
 8003a52:	d113      	bne.n	8003a7c <_scanf_i+0x1b0>
 8003a54:	702a      	strb	r2, [r5, #0]
 8003a56:	6863      	ldr	r3, [r4, #4]
 8003a58:	9e01      	ldr	r6, [sp, #4]
 8003a5a:	4639      	mov	r1, r7
 8003a5c:	4650      	mov	r0, sl
 8003a5e:	47b0      	blx	r6
 8003a60:	f8d8 3000 	ldr.w	r3, [r8]
 8003a64:	6821      	ldr	r1, [r4, #0]
 8003a66:	1d1a      	adds	r2, r3, #4
 8003a68:	f8c8 2000 	str.w	r2, [r8]
 8003a6c:	f011 0f20 	tst.w	r1, #32
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	d00f      	beq.n	8003a94 <_scanf_i+0x1c8>
 8003a74:	6018      	str	r0, [r3, #0]
 8003a76:	68e3      	ldr	r3, [r4, #12]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	60e3      	str	r3, [r4, #12]
 8003a7c:	1bed      	subs	r5, r5, r7
 8003a7e:	44ab      	add	fp, r5
 8003a80:	6925      	ldr	r5, [r4, #16]
 8003a82:	445d      	add	r5, fp
 8003a84:	6125      	str	r5, [r4, #16]
 8003a86:	2000      	movs	r0, #0
 8003a88:	b007      	add	sp, #28
 8003a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8e:	f04f 0b00 	mov.w	fp, #0
 8003a92:	e7ca      	b.n	8003a2a <_scanf_i+0x15e>
 8003a94:	07ca      	lsls	r2, r1, #31
 8003a96:	bf4c      	ite	mi
 8003a98:	8018      	strhmi	r0, [r3, #0]
 8003a9a:	6018      	strpl	r0, [r3, #0]
 8003a9c:	e7eb      	b.n	8003a76 <_scanf_i+0x1aa>
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	e7f2      	b.n	8003a88 <_scanf_i+0x1bc>
 8003aa2:	bf00      	nop
 8003aa4:	080043c8 	.word	0x080043c8
 8003aa8:	08003efd 	.word	0x08003efd
 8003aac:	08003e01 	.word	0x08003e01
 8003ab0:	0800449c 	.word	0x0800449c

08003ab4 <lflush>:
 8003ab4:	8983      	ldrh	r3, [r0, #12]
 8003ab6:	f003 0309 	and.w	r3, r3, #9
 8003aba:	2b09      	cmp	r3, #9
 8003abc:	d101      	bne.n	8003ac2 <lflush+0xe>
 8003abe:	f7fe bfbd 	b.w	8002a3c <fflush>
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	4770      	bx	lr
	...

08003ac8 <__srefill_r>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	460c      	mov	r4, r1
 8003acc:	4605      	mov	r5, r0
 8003ace:	b118      	cbz	r0, 8003ad8 <__srefill_r+0x10>
 8003ad0:	6983      	ldr	r3, [r0, #24]
 8003ad2:	b90b      	cbnz	r3, 8003ad8 <__srefill_r+0x10>
 8003ad4:	f7ff f81c 	bl	8002b10 <__sinit>
 8003ad8:	4b3b      	ldr	r3, [pc, #236]	; (8003bc8 <__srefill_r+0x100>)
 8003ada:	429c      	cmp	r4, r3
 8003adc:	d10a      	bne.n	8003af4 <__srefill_r+0x2c>
 8003ade:	686c      	ldr	r4, [r5, #4]
 8003ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	6063      	str	r3, [r4, #4]
 8003ae8:	89a3      	ldrh	r3, [r4, #12]
 8003aea:	069e      	lsls	r6, r3, #26
 8003aec:	d50c      	bpl.n	8003b08 <__srefill_r+0x40>
 8003aee:	f04f 30ff 	mov.w	r0, #4294967295
 8003af2:	e066      	b.n	8003bc2 <__srefill_r+0xfa>
 8003af4:	4b35      	ldr	r3, [pc, #212]	; (8003bcc <__srefill_r+0x104>)
 8003af6:	429c      	cmp	r4, r3
 8003af8:	d101      	bne.n	8003afe <__srefill_r+0x36>
 8003afa:	68ac      	ldr	r4, [r5, #8]
 8003afc:	e7f0      	b.n	8003ae0 <__srefill_r+0x18>
 8003afe:	4b34      	ldr	r3, [pc, #208]	; (8003bd0 <__srefill_r+0x108>)
 8003b00:	429c      	cmp	r4, r3
 8003b02:	bf08      	it	eq
 8003b04:	68ec      	ldreq	r4, [r5, #12]
 8003b06:	e7eb      	b.n	8003ae0 <__srefill_r+0x18>
 8003b08:	0758      	lsls	r0, r3, #29
 8003b0a:	d448      	bmi.n	8003b9e <__srefill_r+0xd6>
 8003b0c:	06d9      	lsls	r1, r3, #27
 8003b0e:	d405      	bmi.n	8003b1c <__srefill_r+0x54>
 8003b10:	2309      	movs	r3, #9
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003b18:	81a3      	strh	r3, [r4, #12]
 8003b1a:	e7e8      	b.n	8003aee <__srefill_r+0x26>
 8003b1c:	071a      	lsls	r2, r3, #28
 8003b1e:	d50b      	bpl.n	8003b38 <__srefill_r+0x70>
 8003b20:	4621      	mov	r1, r4
 8003b22:	4628      	mov	r0, r5
 8003b24:	f7fe ff4e 	bl	80029c4 <_fflush_r>
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	d1e0      	bne.n	8003aee <__srefill_r+0x26>
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	60a0      	str	r0, [r4, #8]
 8003b30:	f023 0308 	bic.w	r3, r3, #8
 8003b34:	81a3      	strh	r3, [r4, #12]
 8003b36:	61a0      	str	r0, [r4, #24]
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	f043 0304 	orr.w	r3, r3, #4
 8003b3e:	81a3      	strh	r3, [r4, #12]
 8003b40:	6923      	ldr	r3, [r4, #16]
 8003b42:	b91b      	cbnz	r3, 8003b4c <__srefill_r+0x84>
 8003b44:	4621      	mov	r1, r4
 8003b46:	4628      	mov	r0, r5
 8003b48:	f7ff f8c4 	bl	8002cd4 <__smakebuf_r>
 8003b4c:	89a6      	ldrh	r6, [r4, #12]
 8003b4e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8003b52:	07b3      	lsls	r3, r6, #30
 8003b54:	d00f      	beq.n	8003b76 <__srefill_r+0xae>
 8003b56:	2301      	movs	r3, #1
 8003b58:	81a3      	strh	r3, [r4, #12]
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <__srefill_r+0x10c>)
 8003b5c:	491e      	ldr	r1, [pc, #120]	; (8003bd8 <__srefill_r+0x110>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	f006 0609 	and.w	r6, r6, #9
 8003b64:	f7ff f852 	bl	8002c0c <_fwalk>
 8003b68:	2e09      	cmp	r6, #9
 8003b6a:	81a7      	strh	r7, [r4, #12]
 8003b6c:	d103      	bne.n	8003b76 <__srefill_r+0xae>
 8003b6e:	4621      	mov	r1, r4
 8003b70:	4628      	mov	r0, r5
 8003b72:	f7fe fea1 	bl	80028b8 <__sflush_r>
 8003b76:	6922      	ldr	r2, [r4, #16]
 8003b78:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003b7a:	6963      	ldr	r3, [r4, #20]
 8003b7c:	6a21      	ldr	r1, [r4, #32]
 8003b7e:	6022      	str	r2, [r4, #0]
 8003b80:	4628      	mov	r0, r5
 8003b82:	47b0      	blx	r6
 8003b84:	2800      	cmp	r0, #0
 8003b86:	6060      	str	r0, [r4, #4]
 8003b88:	dc1c      	bgt.n	8003bc4 <__srefill_r+0xfc>
 8003b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b8e:	bf17      	itett	ne
 8003b90:	2200      	movne	r2, #0
 8003b92:	f043 0320 	orreq.w	r3, r3, #32
 8003b96:	6062      	strne	r2, [r4, #4]
 8003b98:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003b9c:	e7bc      	b.n	8003b18 <__srefill_r+0x50>
 8003b9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ba0:	2900      	cmp	r1, #0
 8003ba2:	d0cd      	beq.n	8003b40 <__srefill_r+0x78>
 8003ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ba8:	4299      	cmp	r1, r3
 8003baa:	d002      	beq.n	8003bb2 <__srefill_r+0xea>
 8003bac:	4628      	mov	r0, r5
 8003bae:	f7ff f8d1 	bl	8002d54 <_free_r>
 8003bb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bb4:	6063      	str	r3, [r4, #4]
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	6360      	str	r0, [r4, #52]	; 0x34
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0c0      	beq.n	8003b40 <__srefill_r+0x78>
 8003bbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003bc0:	6023      	str	r3, [r4, #0]
 8003bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	e7fc      	b.n	8003bc2 <__srefill_r+0xfa>
 8003bc8:	08004410 	.word	0x08004410
 8003bcc:	08004430 	.word	0x08004430
 8003bd0:	080043f0 	.word	0x080043f0
 8003bd4:	080043ec 	.word	0x080043ec
 8003bd8:	08003ab5 	.word	0x08003ab5

08003bdc <_sbrk_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4d06      	ldr	r5, [pc, #24]	; (8003bf8 <_sbrk_r+0x1c>)
 8003be0:	2300      	movs	r3, #0
 8003be2:	4604      	mov	r4, r0
 8003be4:	4608      	mov	r0, r1
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	f7fc fef8 	bl	80009dc <_sbrk>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_sbrk_r+0x1a>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_sbrk_r+0x1a>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	20000180 	.word	0x20000180

08003bfc <__sccl>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	780b      	ldrb	r3, [r1, #0]
 8003c00:	4604      	mov	r4, r0
 8003c02:	2b5e      	cmp	r3, #94	; 0x5e
 8003c04:	bf0b      	itete	eq
 8003c06:	784b      	ldrbeq	r3, [r1, #1]
 8003c08:	1c48      	addne	r0, r1, #1
 8003c0a:	1c88      	addeq	r0, r1, #2
 8003c0c:	2200      	movne	r2, #0
 8003c0e:	bf08      	it	eq
 8003c10:	2201      	moveq	r2, #1
 8003c12:	1e61      	subs	r1, r4, #1
 8003c14:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8003c18:	f801 2f01 	strb.w	r2, [r1, #1]!
 8003c1c:	42a9      	cmp	r1, r5
 8003c1e:	d1fb      	bne.n	8003c18 <__sccl+0x1c>
 8003c20:	b90b      	cbnz	r3, 8003c26 <__sccl+0x2a>
 8003c22:	3801      	subs	r0, #1
 8003c24:	bd70      	pop	{r4, r5, r6, pc}
 8003c26:	f082 0101 	eor.w	r1, r2, #1
 8003c2a:	54e1      	strb	r1, [r4, r3]
 8003c2c:	1c42      	adds	r2, r0, #1
 8003c2e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8003c32:	2d2d      	cmp	r5, #45	; 0x2d
 8003c34:	f102 36ff 	add.w	r6, r2, #4294967295
 8003c38:	4610      	mov	r0, r2
 8003c3a:	d006      	beq.n	8003c4a <__sccl+0x4e>
 8003c3c:	2d5d      	cmp	r5, #93	; 0x5d
 8003c3e:	d0f1      	beq.n	8003c24 <__sccl+0x28>
 8003c40:	b90d      	cbnz	r5, 8003c46 <__sccl+0x4a>
 8003c42:	4630      	mov	r0, r6
 8003c44:	e7ee      	b.n	8003c24 <__sccl+0x28>
 8003c46:	462b      	mov	r3, r5
 8003c48:	e7ef      	b.n	8003c2a <__sccl+0x2e>
 8003c4a:	7816      	ldrb	r6, [r2, #0]
 8003c4c:	2e5d      	cmp	r6, #93	; 0x5d
 8003c4e:	d0fa      	beq.n	8003c46 <__sccl+0x4a>
 8003c50:	42b3      	cmp	r3, r6
 8003c52:	dcf8      	bgt.n	8003c46 <__sccl+0x4a>
 8003c54:	4618      	mov	r0, r3
 8003c56:	3001      	adds	r0, #1
 8003c58:	4286      	cmp	r6, r0
 8003c5a:	5421      	strb	r1, [r4, r0]
 8003c5c:	dcfb      	bgt.n	8003c56 <__sccl+0x5a>
 8003c5e:	43d8      	mvns	r0, r3
 8003c60:	4430      	add	r0, r6
 8003c62:	1c5d      	adds	r5, r3, #1
 8003c64:	42b3      	cmp	r3, r6
 8003c66:	bfa8      	it	ge
 8003c68:	2000      	movge	r0, #0
 8003c6a:	182b      	adds	r3, r5, r0
 8003c6c:	3202      	adds	r2, #2
 8003c6e:	e7de      	b.n	8003c2e <__sccl+0x32>

08003c70 <__sread>:
 8003c70:	b510      	push	{r4, lr}
 8003c72:	460c      	mov	r4, r1
 8003c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c78:	f000 fb6a 	bl	8004350 <_read_r>
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	bfab      	itete	ge
 8003c80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c82:	89a3      	ldrhlt	r3, [r4, #12]
 8003c84:	181b      	addge	r3, r3, r0
 8003c86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c8a:	bfac      	ite	ge
 8003c8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c8e:	81a3      	strhlt	r3, [r4, #12]
 8003c90:	bd10      	pop	{r4, pc}

08003c92 <__swrite>:
 8003c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c96:	461f      	mov	r7, r3
 8003c98:	898b      	ldrh	r3, [r1, #12]
 8003c9a:	05db      	lsls	r3, r3, #23
 8003c9c:	4605      	mov	r5, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	4616      	mov	r6, r2
 8003ca2:	d505      	bpl.n	8003cb0 <__swrite+0x1e>
 8003ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ca8:	2302      	movs	r3, #2
 8003caa:	2200      	movs	r2, #0
 8003cac:	f000 fafe 	bl	80042ac <_lseek_r>
 8003cb0:	89a3      	ldrh	r3, [r4, #12]
 8003cb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cba:	81a3      	strh	r3, [r4, #12]
 8003cbc:	4632      	mov	r2, r6
 8003cbe:	463b      	mov	r3, r7
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc6:	f000 ba3f 	b.w	8004148 <_write_r>

08003cca <__sseek>:
 8003cca:	b510      	push	{r4, lr}
 8003ccc:	460c      	mov	r4, r1
 8003cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cd2:	f000 faeb 	bl	80042ac <_lseek_r>
 8003cd6:	1c43      	adds	r3, r0, #1
 8003cd8:	89a3      	ldrh	r3, [r4, #12]
 8003cda:	bf15      	itete	ne
 8003cdc:	6560      	strne	r0, [r4, #84]	; 0x54
 8003cde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ce2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003ce6:	81a3      	strheq	r3, [r4, #12]
 8003ce8:	bf18      	it	ne
 8003cea:	81a3      	strhne	r3, [r4, #12]
 8003cec:	bd10      	pop	{r4, pc}

08003cee <__sclose>:
 8003cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf2:	f000 baa9 	b.w	8004248 <_close_r>
	...

08003cf8 <_strtol_l.isra.0>:
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cfe:	d001      	beq.n	8003d04 <_strtol_l.isra.0+0xc>
 8003d00:	2b24      	cmp	r3, #36	; 0x24
 8003d02:	d906      	bls.n	8003d12 <_strtol_l.isra.0+0x1a>
 8003d04:	f7fe fd76 	bl	80027f4 <__errno>
 8003d08:	2316      	movs	r3, #22
 8003d0a:	6003      	str	r3, [r0, #0]
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d12:	4f3a      	ldr	r7, [pc, #232]	; (8003dfc <_strtol_l.isra.0+0x104>)
 8003d14:	468e      	mov	lr, r1
 8003d16:	4676      	mov	r6, lr
 8003d18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003d1c:	5de5      	ldrb	r5, [r4, r7]
 8003d1e:	f015 0508 	ands.w	r5, r5, #8
 8003d22:	d1f8      	bne.n	8003d16 <_strtol_l.isra.0+0x1e>
 8003d24:	2c2d      	cmp	r4, #45	; 0x2d
 8003d26:	d134      	bne.n	8003d92 <_strtol_l.isra.0+0x9a>
 8003d28:	f89e 4000 	ldrb.w	r4, [lr]
 8003d2c:	f04f 0801 	mov.w	r8, #1
 8003d30:	f106 0e02 	add.w	lr, r6, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05c      	beq.n	8003df2 <_strtol_l.isra.0+0xfa>
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d10c      	bne.n	8003d56 <_strtol_l.isra.0+0x5e>
 8003d3c:	2c30      	cmp	r4, #48	; 0x30
 8003d3e:	d10a      	bne.n	8003d56 <_strtol_l.isra.0+0x5e>
 8003d40:	f89e 4000 	ldrb.w	r4, [lr]
 8003d44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003d48:	2c58      	cmp	r4, #88	; 0x58
 8003d4a:	d14d      	bne.n	8003de8 <_strtol_l.isra.0+0xf0>
 8003d4c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003d50:	2310      	movs	r3, #16
 8003d52:	f10e 0e02 	add.w	lr, lr, #2
 8003d56:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003d5a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003d5e:	2600      	movs	r6, #0
 8003d60:	fbbc f9f3 	udiv	r9, ip, r3
 8003d64:	4635      	mov	r5, r6
 8003d66:	fb03 ca19 	mls	sl, r3, r9, ip
 8003d6a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003d6e:	2f09      	cmp	r7, #9
 8003d70:	d818      	bhi.n	8003da4 <_strtol_l.isra.0+0xac>
 8003d72:	463c      	mov	r4, r7
 8003d74:	42a3      	cmp	r3, r4
 8003d76:	dd24      	ble.n	8003dc2 <_strtol_l.isra.0+0xca>
 8003d78:	2e00      	cmp	r6, #0
 8003d7a:	db1f      	blt.n	8003dbc <_strtol_l.isra.0+0xc4>
 8003d7c:	45a9      	cmp	r9, r5
 8003d7e:	d31d      	bcc.n	8003dbc <_strtol_l.isra.0+0xc4>
 8003d80:	d101      	bne.n	8003d86 <_strtol_l.isra.0+0x8e>
 8003d82:	45a2      	cmp	sl, r4
 8003d84:	db1a      	blt.n	8003dbc <_strtol_l.isra.0+0xc4>
 8003d86:	fb05 4503 	mla	r5, r5, r3, r4
 8003d8a:	2601      	movs	r6, #1
 8003d8c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003d90:	e7eb      	b.n	8003d6a <_strtol_l.isra.0+0x72>
 8003d92:	2c2b      	cmp	r4, #43	; 0x2b
 8003d94:	bf08      	it	eq
 8003d96:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003d9a:	46a8      	mov	r8, r5
 8003d9c:	bf08      	it	eq
 8003d9e:	f106 0e02 	addeq.w	lr, r6, #2
 8003da2:	e7c7      	b.n	8003d34 <_strtol_l.isra.0+0x3c>
 8003da4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003da8:	2f19      	cmp	r7, #25
 8003daa:	d801      	bhi.n	8003db0 <_strtol_l.isra.0+0xb8>
 8003dac:	3c37      	subs	r4, #55	; 0x37
 8003dae:	e7e1      	b.n	8003d74 <_strtol_l.isra.0+0x7c>
 8003db0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003db4:	2f19      	cmp	r7, #25
 8003db6:	d804      	bhi.n	8003dc2 <_strtol_l.isra.0+0xca>
 8003db8:	3c57      	subs	r4, #87	; 0x57
 8003dba:	e7db      	b.n	8003d74 <_strtol_l.isra.0+0x7c>
 8003dbc:	f04f 36ff 	mov.w	r6, #4294967295
 8003dc0:	e7e4      	b.n	8003d8c <_strtol_l.isra.0+0x94>
 8003dc2:	2e00      	cmp	r6, #0
 8003dc4:	da05      	bge.n	8003dd2 <_strtol_l.isra.0+0xda>
 8003dc6:	2322      	movs	r3, #34	; 0x22
 8003dc8:	6003      	str	r3, [r0, #0]
 8003dca:	4665      	mov	r5, ip
 8003dcc:	b942      	cbnz	r2, 8003de0 <_strtol_l.isra.0+0xe8>
 8003dce:	4628      	mov	r0, r5
 8003dd0:	e79d      	b.n	8003d0e <_strtol_l.isra.0+0x16>
 8003dd2:	f1b8 0f00 	cmp.w	r8, #0
 8003dd6:	d000      	beq.n	8003dda <_strtol_l.isra.0+0xe2>
 8003dd8:	426d      	negs	r5, r5
 8003dda:	2a00      	cmp	r2, #0
 8003ddc:	d0f7      	beq.n	8003dce <_strtol_l.isra.0+0xd6>
 8003dde:	b10e      	cbz	r6, 8003de4 <_strtol_l.isra.0+0xec>
 8003de0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003de4:	6011      	str	r1, [r2, #0]
 8003de6:	e7f2      	b.n	8003dce <_strtol_l.isra.0+0xd6>
 8003de8:	2430      	movs	r4, #48	; 0x30
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1b3      	bne.n	8003d56 <_strtol_l.isra.0+0x5e>
 8003dee:	2308      	movs	r3, #8
 8003df0:	e7b1      	b.n	8003d56 <_strtol_l.isra.0+0x5e>
 8003df2:	2c30      	cmp	r4, #48	; 0x30
 8003df4:	d0a4      	beq.n	8003d40 <_strtol_l.isra.0+0x48>
 8003df6:	230a      	movs	r3, #10
 8003df8:	e7ad      	b.n	8003d56 <_strtol_l.isra.0+0x5e>
 8003dfa:	bf00      	nop
 8003dfc:	0800449f 	.word	0x0800449f

08003e00 <_strtol_r>:
 8003e00:	f7ff bf7a 	b.w	8003cf8 <_strtol_l.isra.0>

08003e04 <_strtoul_l.isra.0>:
 8003e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e08:	4e3b      	ldr	r6, [pc, #236]	; (8003ef8 <_strtoul_l.isra.0+0xf4>)
 8003e0a:	4686      	mov	lr, r0
 8003e0c:	468c      	mov	ip, r1
 8003e0e:	4660      	mov	r0, ip
 8003e10:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003e14:	5da5      	ldrb	r5, [r4, r6]
 8003e16:	f015 0508 	ands.w	r5, r5, #8
 8003e1a:	d1f8      	bne.n	8003e0e <_strtoul_l.isra.0+0xa>
 8003e1c:	2c2d      	cmp	r4, #45	; 0x2d
 8003e1e:	d134      	bne.n	8003e8a <_strtoul_l.isra.0+0x86>
 8003e20:	f89c 4000 	ldrb.w	r4, [ip]
 8003e24:	f04f 0801 	mov.w	r8, #1
 8003e28:	f100 0c02 	add.w	ip, r0, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d05e      	beq.n	8003eee <_strtoul_l.isra.0+0xea>
 8003e30:	2b10      	cmp	r3, #16
 8003e32:	d10c      	bne.n	8003e4e <_strtoul_l.isra.0+0x4a>
 8003e34:	2c30      	cmp	r4, #48	; 0x30
 8003e36:	d10a      	bne.n	8003e4e <_strtoul_l.isra.0+0x4a>
 8003e38:	f89c 0000 	ldrb.w	r0, [ip]
 8003e3c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003e40:	2858      	cmp	r0, #88	; 0x58
 8003e42:	d14f      	bne.n	8003ee4 <_strtoul_l.isra.0+0xe0>
 8003e44:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003e48:	2310      	movs	r3, #16
 8003e4a:	f10c 0c02 	add.w	ip, ip, #2
 8003e4e:	f04f 37ff 	mov.w	r7, #4294967295
 8003e52:	2500      	movs	r5, #0
 8003e54:	fbb7 f7f3 	udiv	r7, r7, r3
 8003e58:	fb03 f907 	mul.w	r9, r3, r7
 8003e5c:	ea6f 0909 	mvn.w	r9, r9
 8003e60:	4628      	mov	r0, r5
 8003e62:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8003e66:	2e09      	cmp	r6, #9
 8003e68:	d818      	bhi.n	8003e9c <_strtoul_l.isra.0+0x98>
 8003e6a:	4634      	mov	r4, r6
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	dd24      	ble.n	8003eba <_strtoul_l.isra.0+0xb6>
 8003e70:	2d00      	cmp	r5, #0
 8003e72:	db1f      	blt.n	8003eb4 <_strtoul_l.isra.0+0xb0>
 8003e74:	4287      	cmp	r7, r0
 8003e76:	d31d      	bcc.n	8003eb4 <_strtoul_l.isra.0+0xb0>
 8003e78:	d101      	bne.n	8003e7e <_strtoul_l.isra.0+0x7a>
 8003e7a:	45a1      	cmp	r9, r4
 8003e7c:	db1a      	blt.n	8003eb4 <_strtoul_l.isra.0+0xb0>
 8003e7e:	fb00 4003 	mla	r0, r0, r3, r4
 8003e82:	2501      	movs	r5, #1
 8003e84:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003e88:	e7eb      	b.n	8003e62 <_strtoul_l.isra.0+0x5e>
 8003e8a:	2c2b      	cmp	r4, #43	; 0x2b
 8003e8c:	bf08      	it	eq
 8003e8e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8003e92:	46a8      	mov	r8, r5
 8003e94:	bf08      	it	eq
 8003e96:	f100 0c02 	addeq.w	ip, r0, #2
 8003e9a:	e7c7      	b.n	8003e2c <_strtoul_l.isra.0+0x28>
 8003e9c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003ea0:	2e19      	cmp	r6, #25
 8003ea2:	d801      	bhi.n	8003ea8 <_strtoul_l.isra.0+0xa4>
 8003ea4:	3c37      	subs	r4, #55	; 0x37
 8003ea6:	e7e1      	b.n	8003e6c <_strtoul_l.isra.0+0x68>
 8003ea8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8003eac:	2e19      	cmp	r6, #25
 8003eae:	d804      	bhi.n	8003eba <_strtoul_l.isra.0+0xb6>
 8003eb0:	3c57      	subs	r4, #87	; 0x57
 8003eb2:	e7db      	b.n	8003e6c <_strtoul_l.isra.0+0x68>
 8003eb4:	f04f 35ff 	mov.w	r5, #4294967295
 8003eb8:	e7e4      	b.n	8003e84 <_strtoul_l.isra.0+0x80>
 8003eba:	2d00      	cmp	r5, #0
 8003ebc:	da07      	bge.n	8003ece <_strtoul_l.isra.0+0xca>
 8003ebe:	2322      	movs	r3, #34	; 0x22
 8003ec0:	f8ce 3000 	str.w	r3, [lr]
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	b942      	cbnz	r2, 8003edc <_strtoul_l.isra.0+0xd8>
 8003eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ece:	f1b8 0f00 	cmp.w	r8, #0
 8003ed2:	d000      	beq.n	8003ed6 <_strtoul_l.isra.0+0xd2>
 8003ed4:	4240      	negs	r0, r0
 8003ed6:	2a00      	cmp	r2, #0
 8003ed8:	d0f7      	beq.n	8003eca <_strtoul_l.isra.0+0xc6>
 8003eda:	b10d      	cbz	r5, 8003ee0 <_strtoul_l.isra.0+0xdc>
 8003edc:	f10c 31ff 	add.w	r1, ip, #4294967295
 8003ee0:	6011      	str	r1, [r2, #0]
 8003ee2:	e7f2      	b.n	8003eca <_strtoul_l.isra.0+0xc6>
 8003ee4:	2430      	movs	r4, #48	; 0x30
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1b1      	bne.n	8003e4e <_strtoul_l.isra.0+0x4a>
 8003eea:	2308      	movs	r3, #8
 8003eec:	e7af      	b.n	8003e4e <_strtoul_l.isra.0+0x4a>
 8003eee:	2c30      	cmp	r4, #48	; 0x30
 8003ef0:	d0a2      	beq.n	8003e38 <_strtoul_l.isra.0+0x34>
 8003ef2:	230a      	movs	r3, #10
 8003ef4:	e7ab      	b.n	8003e4e <_strtoul_l.isra.0+0x4a>
 8003ef6:	bf00      	nop
 8003ef8:	0800449f 	.word	0x0800449f

08003efc <_strtoul_r>:
 8003efc:	f7ff bf82 	b.w	8003e04 <_strtoul_l.isra.0>

08003f00 <__submore>:
 8003f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f04:	460c      	mov	r4, r1
 8003f06:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f0c:	4299      	cmp	r1, r3
 8003f0e:	d11d      	bne.n	8003f4c <__submore+0x4c>
 8003f10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f14:	f7fe ff6e 	bl	8002df4 <_malloc_r>
 8003f18:	b918      	cbnz	r0, 8003f22 <__submore+0x22>
 8003f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f26:	63a3      	str	r3, [r4, #56]	; 0x38
 8003f28:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003f2c:	6360      	str	r0, [r4, #52]	; 0x34
 8003f2e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003f32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003f36:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8003f3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003f3e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8003f42:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8003f46:	6020      	str	r0, [r4, #0]
 8003f48:	2000      	movs	r0, #0
 8003f4a:	e7e8      	b.n	8003f1e <__submore+0x1e>
 8003f4c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003f4e:	0077      	lsls	r7, r6, #1
 8003f50:	463a      	mov	r2, r7
 8003f52:	f000 f9d7 	bl	8004304 <_realloc_r>
 8003f56:	4605      	mov	r5, r0
 8003f58:	2800      	cmp	r0, #0
 8003f5a:	d0de      	beq.n	8003f1a <__submore+0x1a>
 8003f5c:	eb00 0806 	add.w	r8, r0, r6
 8003f60:	4601      	mov	r1, r0
 8003f62:	4632      	mov	r2, r6
 8003f64:	4640      	mov	r0, r8
 8003f66:	f000 f9b3 	bl	80042d0 <memcpy>
 8003f6a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8003f6e:	f8c4 8000 	str.w	r8, [r4]
 8003f72:	e7e9      	b.n	8003f48 <__submore+0x48>

08003f74 <_ungetc_r>:
 8003f74:	b570      	push	{r4, r5, r6, lr}
 8003f76:	4614      	mov	r4, r2
 8003f78:	1c4a      	adds	r2, r1, #1
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	460d      	mov	r5, r1
 8003f7e:	d103      	bne.n	8003f88 <_ungetc_r+0x14>
 8003f80:	f04f 35ff 	mov.w	r5, #4294967295
 8003f84:	4628      	mov	r0, r5
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	b118      	cbz	r0, 8003f92 <_ungetc_r+0x1e>
 8003f8a:	6983      	ldr	r3, [r0, #24]
 8003f8c:	b90b      	cbnz	r3, 8003f92 <_ungetc_r+0x1e>
 8003f8e:	f7fe fdbf 	bl	8002b10 <__sinit>
 8003f92:	4b41      	ldr	r3, [pc, #260]	; (8004098 <_ungetc_r+0x124>)
 8003f94:	429c      	cmp	r4, r3
 8003f96:	d11d      	bne.n	8003fd4 <_ungetc_r+0x60>
 8003f98:	6874      	ldr	r4, [r6, #4]
 8003f9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f9c:	07db      	lsls	r3, r3, #31
 8003f9e:	d405      	bmi.n	8003fac <_ungetc_r+0x38>
 8003fa0:	89a3      	ldrh	r3, [r4, #12]
 8003fa2:	0598      	lsls	r0, r3, #22
 8003fa4:	d402      	bmi.n	8003fac <_ungetc_r+0x38>
 8003fa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fa8:	f7fe fe6d 	bl	8002c86 <__retarget_lock_acquire_recursive>
 8003fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fb0:	f023 0320 	bic.w	r3, r3, #32
 8003fb4:	0759      	lsls	r1, r3, #29
 8003fb6:	81a3      	strh	r3, [r4, #12]
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	d42d      	bmi.n	8004018 <_ungetc_r+0xa4>
 8003fbc:	06d3      	lsls	r3, r2, #27
 8003fbe:	d413      	bmi.n	8003fe8 <_ungetc_r+0x74>
 8003fc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fc2:	07dd      	lsls	r5, r3, #31
 8003fc4:	d4dc      	bmi.n	8003f80 <_ungetc_r+0xc>
 8003fc6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003fca:	d1d9      	bne.n	8003f80 <_ungetc_r+0xc>
 8003fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fce:	f7fe fe5b 	bl	8002c88 <__retarget_lock_release_recursive>
 8003fd2:	e7d5      	b.n	8003f80 <_ungetc_r+0xc>
 8003fd4:	4b31      	ldr	r3, [pc, #196]	; (800409c <_ungetc_r+0x128>)
 8003fd6:	429c      	cmp	r4, r3
 8003fd8:	d101      	bne.n	8003fde <_ungetc_r+0x6a>
 8003fda:	68b4      	ldr	r4, [r6, #8]
 8003fdc:	e7dd      	b.n	8003f9a <_ungetc_r+0x26>
 8003fde:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <_ungetc_r+0x12c>)
 8003fe0:	429c      	cmp	r4, r3
 8003fe2:	bf08      	it	eq
 8003fe4:	68f4      	ldreq	r4, [r6, #12]
 8003fe6:	e7d8      	b.n	8003f9a <_ungetc_r+0x26>
 8003fe8:	0710      	lsls	r0, r2, #28
 8003fea:	d511      	bpl.n	8004010 <_ungetc_r+0x9c>
 8003fec:	4621      	mov	r1, r4
 8003fee:	4630      	mov	r0, r6
 8003ff0:	f7fe fce8 	bl	80029c4 <_fflush_r>
 8003ff4:	b130      	cbz	r0, 8004004 <_ungetc_r+0x90>
 8003ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ff8:	07d9      	lsls	r1, r3, #31
 8003ffa:	d4c1      	bmi.n	8003f80 <_ungetc_r+0xc>
 8003ffc:	89a3      	ldrh	r3, [r4, #12]
 8003ffe:	f413 7f00 	tst.w	r3, #512	; 0x200
 8004002:	e7e2      	b.n	8003fca <_ungetc_r+0x56>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	60a0      	str	r0, [r4, #8]
 8004008:	f023 0308 	bic.w	r3, r3, #8
 800400c:	81a3      	strh	r3, [r4, #12]
 800400e:	61a0      	str	r0, [r4, #24]
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	f043 0304 	orr.w	r3, r3, #4
 8004016:	81a3      	strh	r3, [r4, #12]
 8004018:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800401a:	6862      	ldr	r2, [r4, #4]
 800401c:	b2ed      	uxtb	r5, r5
 800401e:	b1d3      	cbz	r3, 8004056 <_ungetc_r+0xe2>
 8004020:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004022:	4293      	cmp	r3, r2
 8004024:	dc05      	bgt.n	8004032 <_ungetc_r+0xbe>
 8004026:	4621      	mov	r1, r4
 8004028:	4630      	mov	r0, r6
 800402a:	f7ff ff69 	bl	8003f00 <__submore>
 800402e:	2800      	cmp	r0, #0
 8004030:	d1e1      	bne.n	8003ff6 <_ungetc_r+0x82>
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	6022      	str	r2, [r4, #0]
 8004038:	f803 5c01 	strb.w	r5, [r3, #-1]
 800403c:	6863      	ldr	r3, [r4, #4]
 800403e:	3301      	adds	r3, #1
 8004040:	6063      	str	r3, [r4, #4]
 8004042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004044:	07da      	lsls	r2, r3, #31
 8004046:	d49d      	bmi.n	8003f84 <_ungetc_r+0x10>
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	059b      	lsls	r3, r3, #22
 800404c:	d49a      	bmi.n	8003f84 <_ungetc_r+0x10>
 800404e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004050:	f7fe fe1a 	bl	8002c88 <__retarget_lock_release_recursive>
 8004054:	e796      	b.n	8003f84 <_ungetc_r+0x10>
 8004056:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004058:	6920      	ldr	r0, [r4, #16]
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	f001 0101 	and.w	r1, r1, #1
 8004060:	b160      	cbz	r0, 800407c <_ungetc_r+0x108>
 8004062:	4298      	cmp	r0, r3
 8004064:	d20a      	bcs.n	800407c <_ungetc_r+0x108>
 8004066:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800406a:	42a8      	cmp	r0, r5
 800406c:	d106      	bne.n	800407c <_ungetc_r+0x108>
 800406e:	3b01      	subs	r3, #1
 8004070:	3201      	adds	r2, #1
 8004072:	6023      	str	r3, [r4, #0]
 8004074:	6062      	str	r2, [r4, #4]
 8004076:	2900      	cmp	r1, #0
 8004078:	d184      	bne.n	8003f84 <_ungetc_r+0x10>
 800407a:	e7e5      	b.n	8004048 <_ungetc_r+0xd4>
 800407c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004084:	6363      	str	r3, [r4, #52]	; 0x34
 8004086:	2303      	movs	r3, #3
 8004088:	63a3      	str	r3, [r4, #56]	; 0x38
 800408a:	4623      	mov	r3, r4
 800408c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004090:	6023      	str	r3, [r4, #0]
 8004092:	2301      	movs	r3, #1
 8004094:	6063      	str	r3, [r4, #4]
 8004096:	e7ee      	b.n	8004076 <_ungetc_r+0x102>
 8004098:	08004410 	.word	0x08004410
 800409c:	08004430 	.word	0x08004430
 80040a0:	080043f0 	.word	0x080043f0

080040a4 <__swbuf_r>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	460e      	mov	r6, r1
 80040a8:	4614      	mov	r4, r2
 80040aa:	4605      	mov	r5, r0
 80040ac:	b118      	cbz	r0, 80040b6 <__swbuf_r+0x12>
 80040ae:	6983      	ldr	r3, [r0, #24]
 80040b0:	b90b      	cbnz	r3, 80040b6 <__swbuf_r+0x12>
 80040b2:	f7fe fd2d 	bl	8002b10 <__sinit>
 80040b6:	4b21      	ldr	r3, [pc, #132]	; (800413c <__swbuf_r+0x98>)
 80040b8:	429c      	cmp	r4, r3
 80040ba:	d12b      	bne.n	8004114 <__swbuf_r+0x70>
 80040bc:	686c      	ldr	r4, [r5, #4]
 80040be:	69a3      	ldr	r3, [r4, #24]
 80040c0:	60a3      	str	r3, [r4, #8]
 80040c2:	89a3      	ldrh	r3, [r4, #12]
 80040c4:	071a      	lsls	r2, r3, #28
 80040c6:	d52f      	bpl.n	8004128 <__swbuf_r+0x84>
 80040c8:	6923      	ldr	r3, [r4, #16]
 80040ca:	b36b      	cbz	r3, 8004128 <__swbuf_r+0x84>
 80040cc:	6923      	ldr	r3, [r4, #16]
 80040ce:	6820      	ldr	r0, [r4, #0]
 80040d0:	1ac0      	subs	r0, r0, r3
 80040d2:	6963      	ldr	r3, [r4, #20]
 80040d4:	b2f6      	uxtb	r6, r6
 80040d6:	4283      	cmp	r3, r0
 80040d8:	4637      	mov	r7, r6
 80040da:	dc04      	bgt.n	80040e6 <__swbuf_r+0x42>
 80040dc:	4621      	mov	r1, r4
 80040de:	4628      	mov	r0, r5
 80040e0:	f7fe fc70 	bl	80029c4 <_fflush_r>
 80040e4:	bb30      	cbnz	r0, 8004134 <__swbuf_r+0x90>
 80040e6:	68a3      	ldr	r3, [r4, #8]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	60a3      	str	r3, [r4, #8]
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	6022      	str	r2, [r4, #0]
 80040f2:	701e      	strb	r6, [r3, #0]
 80040f4:	6963      	ldr	r3, [r4, #20]
 80040f6:	3001      	adds	r0, #1
 80040f8:	4283      	cmp	r3, r0
 80040fa:	d004      	beq.n	8004106 <__swbuf_r+0x62>
 80040fc:	89a3      	ldrh	r3, [r4, #12]
 80040fe:	07db      	lsls	r3, r3, #31
 8004100:	d506      	bpl.n	8004110 <__swbuf_r+0x6c>
 8004102:	2e0a      	cmp	r6, #10
 8004104:	d104      	bne.n	8004110 <__swbuf_r+0x6c>
 8004106:	4621      	mov	r1, r4
 8004108:	4628      	mov	r0, r5
 800410a:	f7fe fc5b 	bl	80029c4 <_fflush_r>
 800410e:	b988      	cbnz	r0, 8004134 <__swbuf_r+0x90>
 8004110:	4638      	mov	r0, r7
 8004112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004114:	4b0a      	ldr	r3, [pc, #40]	; (8004140 <__swbuf_r+0x9c>)
 8004116:	429c      	cmp	r4, r3
 8004118:	d101      	bne.n	800411e <__swbuf_r+0x7a>
 800411a:	68ac      	ldr	r4, [r5, #8]
 800411c:	e7cf      	b.n	80040be <__swbuf_r+0x1a>
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <__swbuf_r+0xa0>)
 8004120:	429c      	cmp	r4, r3
 8004122:	bf08      	it	eq
 8004124:	68ec      	ldreq	r4, [r5, #12]
 8004126:	e7ca      	b.n	80040be <__swbuf_r+0x1a>
 8004128:	4621      	mov	r1, r4
 800412a:	4628      	mov	r0, r5
 800412c:	f000 f81e 	bl	800416c <__swsetup_r>
 8004130:	2800      	cmp	r0, #0
 8004132:	d0cb      	beq.n	80040cc <__swbuf_r+0x28>
 8004134:	f04f 37ff 	mov.w	r7, #4294967295
 8004138:	e7ea      	b.n	8004110 <__swbuf_r+0x6c>
 800413a:	bf00      	nop
 800413c:	08004410 	.word	0x08004410
 8004140:	08004430 	.word	0x08004430
 8004144:	080043f0 	.word	0x080043f0

08004148 <_write_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	4d07      	ldr	r5, [pc, #28]	; (8004168 <_write_r+0x20>)
 800414c:	4604      	mov	r4, r0
 800414e:	4608      	mov	r0, r1
 8004150:	4611      	mov	r1, r2
 8004152:	2200      	movs	r2, #0
 8004154:	602a      	str	r2, [r5, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	f7fc fb4c 	bl	80007f4 <_write>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_write_r+0x1e>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_write_r+0x1e>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	20000180 	.word	0x20000180

0800416c <__swsetup_r>:
 800416c:	4b32      	ldr	r3, [pc, #200]	; (8004238 <__swsetup_r+0xcc>)
 800416e:	b570      	push	{r4, r5, r6, lr}
 8004170:	681d      	ldr	r5, [r3, #0]
 8004172:	4606      	mov	r6, r0
 8004174:	460c      	mov	r4, r1
 8004176:	b125      	cbz	r5, 8004182 <__swsetup_r+0x16>
 8004178:	69ab      	ldr	r3, [r5, #24]
 800417a:	b913      	cbnz	r3, 8004182 <__swsetup_r+0x16>
 800417c:	4628      	mov	r0, r5
 800417e:	f7fe fcc7 	bl	8002b10 <__sinit>
 8004182:	4b2e      	ldr	r3, [pc, #184]	; (800423c <__swsetup_r+0xd0>)
 8004184:	429c      	cmp	r4, r3
 8004186:	d10f      	bne.n	80041a8 <__swsetup_r+0x3c>
 8004188:	686c      	ldr	r4, [r5, #4]
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004190:	0719      	lsls	r1, r3, #28
 8004192:	d42c      	bmi.n	80041ee <__swsetup_r+0x82>
 8004194:	06dd      	lsls	r5, r3, #27
 8004196:	d411      	bmi.n	80041bc <__swsetup_r+0x50>
 8004198:	2309      	movs	r3, #9
 800419a:	6033      	str	r3, [r6, #0]
 800419c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041a0:	81a3      	strh	r3, [r4, #12]
 80041a2:	f04f 30ff 	mov.w	r0, #4294967295
 80041a6:	e03e      	b.n	8004226 <__swsetup_r+0xba>
 80041a8:	4b25      	ldr	r3, [pc, #148]	; (8004240 <__swsetup_r+0xd4>)
 80041aa:	429c      	cmp	r4, r3
 80041ac:	d101      	bne.n	80041b2 <__swsetup_r+0x46>
 80041ae:	68ac      	ldr	r4, [r5, #8]
 80041b0:	e7eb      	b.n	800418a <__swsetup_r+0x1e>
 80041b2:	4b24      	ldr	r3, [pc, #144]	; (8004244 <__swsetup_r+0xd8>)
 80041b4:	429c      	cmp	r4, r3
 80041b6:	bf08      	it	eq
 80041b8:	68ec      	ldreq	r4, [r5, #12]
 80041ba:	e7e6      	b.n	800418a <__swsetup_r+0x1e>
 80041bc:	0758      	lsls	r0, r3, #29
 80041be:	d512      	bpl.n	80041e6 <__swsetup_r+0x7a>
 80041c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041c2:	b141      	cbz	r1, 80041d6 <__swsetup_r+0x6a>
 80041c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041c8:	4299      	cmp	r1, r3
 80041ca:	d002      	beq.n	80041d2 <__swsetup_r+0x66>
 80041cc:	4630      	mov	r0, r6
 80041ce:	f7fe fdc1 	bl	8002d54 <_free_r>
 80041d2:	2300      	movs	r3, #0
 80041d4:	6363      	str	r3, [r4, #52]	; 0x34
 80041d6:	89a3      	ldrh	r3, [r4, #12]
 80041d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041dc:	81a3      	strh	r3, [r4, #12]
 80041de:	2300      	movs	r3, #0
 80041e0:	6063      	str	r3, [r4, #4]
 80041e2:	6923      	ldr	r3, [r4, #16]
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	f043 0308 	orr.w	r3, r3, #8
 80041ec:	81a3      	strh	r3, [r4, #12]
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	b94b      	cbnz	r3, 8004206 <__swsetup_r+0x9a>
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041fc:	d003      	beq.n	8004206 <__swsetup_r+0x9a>
 80041fe:	4621      	mov	r1, r4
 8004200:	4630      	mov	r0, r6
 8004202:	f7fe fd67 	bl	8002cd4 <__smakebuf_r>
 8004206:	89a0      	ldrh	r0, [r4, #12]
 8004208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800420c:	f010 0301 	ands.w	r3, r0, #1
 8004210:	d00a      	beq.n	8004228 <__swsetup_r+0xbc>
 8004212:	2300      	movs	r3, #0
 8004214:	60a3      	str	r3, [r4, #8]
 8004216:	6963      	ldr	r3, [r4, #20]
 8004218:	425b      	negs	r3, r3
 800421a:	61a3      	str	r3, [r4, #24]
 800421c:	6923      	ldr	r3, [r4, #16]
 800421e:	b943      	cbnz	r3, 8004232 <__swsetup_r+0xc6>
 8004220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004224:	d1ba      	bne.n	800419c <__swsetup_r+0x30>
 8004226:	bd70      	pop	{r4, r5, r6, pc}
 8004228:	0781      	lsls	r1, r0, #30
 800422a:	bf58      	it	pl
 800422c:	6963      	ldrpl	r3, [r4, #20]
 800422e:	60a3      	str	r3, [r4, #8]
 8004230:	e7f4      	b.n	800421c <__swsetup_r+0xb0>
 8004232:	2000      	movs	r0, #0
 8004234:	e7f7      	b.n	8004226 <__swsetup_r+0xba>
 8004236:	bf00      	nop
 8004238:	2000000c 	.word	0x2000000c
 800423c:	08004410 	.word	0x08004410
 8004240:	08004430 	.word	0x08004430
 8004244:	080043f0 	.word	0x080043f0

08004248 <_close_r>:
 8004248:	b538      	push	{r3, r4, r5, lr}
 800424a:	4d06      	ldr	r5, [pc, #24]	; (8004264 <_close_r+0x1c>)
 800424c:	2300      	movs	r3, #0
 800424e:	4604      	mov	r4, r0
 8004250:	4608      	mov	r0, r1
 8004252:	602b      	str	r3, [r5, #0]
 8004254:	f7fc fafa 	bl	800084c <_close>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d102      	bne.n	8004262 <_close_r+0x1a>
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	b103      	cbz	r3, 8004262 <_close_r+0x1a>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	bd38      	pop	{r3, r4, r5, pc}
 8004264:	20000180 	.word	0x20000180

08004268 <_fstat_r>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4d07      	ldr	r5, [pc, #28]	; (8004288 <_fstat_r+0x20>)
 800426c:	2300      	movs	r3, #0
 800426e:	4604      	mov	r4, r0
 8004270:	4608      	mov	r0, r1
 8004272:	4611      	mov	r1, r2
 8004274:	602b      	str	r3, [r5, #0]
 8004276:	f7fc fb39 	bl	80008ec <_fstat>
 800427a:	1c43      	adds	r3, r0, #1
 800427c:	d102      	bne.n	8004284 <_fstat_r+0x1c>
 800427e:	682b      	ldr	r3, [r5, #0]
 8004280:	b103      	cbz	r3, 8004284 <_fstat_r+0x1c>
 8004282:	6023      	str	r3, [r4, #0]
 8004284:	bd38      	pop	{r3, r4, r5, pc}
 8004286:	bf00      	nop
 8004288:	20000180 	.word	0x20000180

0800428c <_isatty_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d06      	ldr	r5, [pc, #24]	; (80042a8 <_isatty_r+0x1c>)
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	f7fc fa95 	bl	80007c6 <_isatty>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d102      	bne.n	80042a6 <_isatty_r+0x1a>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	b103      	cbz	r3, 80042a6 <_isatty_r+0x1a>
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	bd38      	pop	{r3, r4, r5, pc}
 80042a8:	20000180 	.word	0x20000180

080042ac <_lseek_r>:
 80042ac:	b538      	push	{r3, r4, r5, lr}
 80042ae:	4d07      	ldr	r5, [pc, #28]	; (80042cc <_lseek_r+0x20>)
 80042b0:	4604      	mov	r4, r0
 80042b2:	4608      	mov	r0, r1
 80042b4:	4611      	mov	r1, r2
 80042b6:	2200      	movs	r2, #0
 80042b8:	602a      	str	r2, [r5, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	f7fc fadd 	bl	800087a <_lseek>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d102      	bne.n	80042ca <_lseek_r+0x1e>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	b103      	cbz	r3, 80042ca <_lseek_r+0x1e>
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	20000180 	.word	0x20000180

080042d0 <memcpy>:
 80042d0:	440a      	add	r2, r1
 80042d2:	4291      	cmp	r1, r2
 80042d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042d8:	d100      	bne.n	80042dc <memcpy+0xc>
 80042da:	4770      	bx	lr
 80042dc:	b510      	push	{r4, lr}
 80042de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042e6:	4291      	cmp	r1, r2
 80042e8:	d1f9      	bne.n	80042de <memcpy+0xe>
 80042ea:	bd10      	pop	{r4, pc}

080042ec <__malloc_lock>:
 80042ec:	4801      	ldr	r0, [pc, #4]	; (80042f4 <__malloc_lock+0x8>)
 80042ee:	f7fe bcca 	b.w	8002c86 <__retarget_lock_acquire_recursive>
 80042f2:	bf00      	nop
 80042f4:	20000178 	.word	0x20000178

080042f8 <__malloc_unlock>:
 80042f8:	4801      	ldr	r0, [pc, #4]	; (8004300 <__malloc_unlock+0x8>)
 80042fa:	f7fe bcc5 	b.w	8002c88 <__retarget_lock_release_recursive>
 80042fe:	bf00      	nop
 8004300:	20000178 	.word	0x20000178

08004304 <_realloc_r>:
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	4607      	mov	r7, r0
 8004308:	4614      	mov	r4, r2
 800430a:	460e      	mov	r6, r1
 800430c:	b921      	cbnz	r1, 8004318 <_realloc_r+0x14>
 800430e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004312:	4611      	mov	r1, r2
 8004314:	f7fe bd6e 	b.w	8002df4 <_malloc_r>
 8004318:	b922      	cbnz	r2, 8004324 <_realloc_r+0x20>
 800431a:	f7fe fd1b 	bl	8002d54 <_free_r>
 800431e:	4625      	mov	r5, r4
 8004320:	4628      	mov	r0, r5
 8004322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004324:	f000 f826 	bl	8004374 <_malloc_usable_size_r>
 8004328:	42a0      	cmp	r0, r4
 800432a:	d20f      	bcs.n	800434c <_realloc_r+0x48>
 800432c:	4621      	mov	r1, r4
 800432e:	4638      	mov	r0, r7
 8004330:	f7fe fd60 	bl	8002df4 <_malloc_r>
 8004334:	4605      	mov	r5, r0
 8004336:	2800      	cmp	r0, #0
 8004338:	d0f2      	beq.n	8004320 <_realloc_r+0x1c>
 800433a:	4631      	mov	r1, r6
 800433c:	4622      	mov	r2, r4
 800433e:	f7ff ffc7 	bl	80042d0 <memcpy>
 8004342:	4631      	mov	r1, r6
 8004344:	4638      	mov	r0, r7
 8004346:	f7fe fd05 	bl	8002d54 <_free_r>
 800434a:	e7e9      	b.n	8004320 <_realloc_r+0x1c>
 800434c:	4635      	mov	r5, r6
 800434e:	e7e7      	b.n	8004320 <_realloc_r+0x1c>

08004350 <_read_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4d07      	ldr	r5, [pc, #28]	; (8004370 <_read_r+0x20>)
 8004354:	4604      	mov	r4, r0
 8004356:	4608      	mov	r0, r1
 8004358:	4611      	mov	r1, r2
 800435a:	2200      	movs	r2, #0
 800435c:	602a      	str	r2, [r5, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	f7fc fa9c 	bl	800089c <_read>
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d102      	bne.n	800436e <_read_r+0x1e>
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	b103      	cbz	r3, 800436e <_read_r+0x1e>
 800436c:	6023      	str	r3, [r4, #0]
 800436e:	bd38      	pop	{r3, r4, r5, pc}
 8004370:	20000180 	.word	0x20000180

08004374 <_malloc_usable_size_r>:
 8004374:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004378:	1f18      	subs	r0, r3, #4
 800437a:	2b00      	cmp	r3, #0
 800437c:	bfbc      	itt	lt
 800437e:	580b      	ldrlt	r3, [r1, r0]
 8004380:	18c0      	addlt	r0, r0, r3
 8004382:	4770      	bx	lr

08004384 <_init>:
 8004384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004386:	bf00      	nop
 8004388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438a:	bc08      	pop	{r3}
 800438c:	469e      	mov	lr, r3
 800438e:	4770      	bx	lr

08004390 <_fini>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	bf00      	nop
 8004394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004396:	bc08      	pop	{r3}
 8004398:	469e      	mov	lr, r3
 800439a:	4770      	bx	lr
